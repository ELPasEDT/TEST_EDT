
&НаКлиенте
Перем мПараметрыИтогов;

&НаКлиенте
Перем мОтборНеВключатьВЖурнал;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочаяДата   = ТекущаяДатаСеанса();
	Пользователь  = ПользователиКлиентСервер.ТекущийПользователь();	
	Подразделение = Пользователь.Подразделение;
	ВидРеагента   = Перечисления.ВидыРеагентов.Известь;
	
	УстановитьУсловноеОФормлениеСписка();	
	ОбновитьПараметрыНаСервере();
	
	ЕстьПравоНаДобавление = ЕстьПравоНаДобавление();
	
	ОтборПроведенных = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПроведенных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Проведен");
	ОтборПроведенных.ПравоеЗначение = Истина;
	ОтборПроведенных.Использование = Истина;

	КоличествоСтрокПоказанийДатчиков = 20;
	
	Элементы.СписокДобавитьЗапись.Доступность = РольДоступна("ПолныеПрава") Или РольДоступна("ИнженерХВО");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мОтборНеВключатьВЖурнал = Истина;
	УстановитьОтборНеВключатьВЖурнал();
	
	ОбновитьФорму(Неопределено);
	
	Если Не ЕстьПравоНаДобавление Тогда
		Элементы.ГруппаВидыОпераций.ТекущаяСтраница = Элементы.ГруппаДатчики;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьОбновитьИтоги", 2, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьТекущиеПартии" Тогда
		ЗаполнитьПартииРеагентов();
		УстановитьПартиюРеагента();
	ИначеЕсли ИмяСобытия = "ИзмененаЗаписьЖургала" Тогда
		Если Параметр.Подразделение = Подразделение Тогда
			ОбновитьФорму(Неопределено);
			Элементы.Список.ТекущаяСтрока = Параметр.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; 
	
	ТипДокумента = ТипЗнч(ВыбраннаяСтрока);
	
	ПараметрыОткрытия = Новый Структура("Ключ, ДатаПриемаСмены, ДокументПриемаСмены", ВыбраннаяСтрока, ДатаПриемаСмены, ДокументПриемаСмены);
	
	Отказ = Ложь;
	ОбновитьПараметрыСмены(Отказ, Ложь);
	Если Отказ Тогда
		ПараметрыОткрытия.ДокументПриемаСмены = Неопределено;
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументСсылка.ЗаписьЖурналаУчетаРеагентов") Тогда
		ОткрытьФорму("Документ.ЗаписьЖурналаУчетаРеагентов.ФормаОбъекта", ПараметрыОткрытия, Элемент);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РасходРеагента") Тогда
		ОткрытьФорму("Документ.РасходРеагента.ФормаОбъекта", ПараметрыОткрытия, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьУровеньПриИзменении(Элемент)
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьКонцентрацияПриИзменении(Элемент)
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ПлотностьПоТаблицеПриИзменении(Элемент)
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьНаправлениеРасходаПриИзменении(Элемент)
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьФорму(Неопределено);
	УстановитьОтборСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРеагентаПриИзменении(Элемент)
	
	ОбновитьФорму(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура РабочаяДатаПриИзменении(Элемент)
	ОбновитьФорму(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьОборудованиеПриИзменении(Элемент)
	ЗаполнитьПараметрыНовойЗаписи();
	ОбновитьЗаголовкиЭлементовУправления();
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьОборудованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	КлючЗаписиРегистра = ПолучитьКлючЗаписиНастройкиОборудования(НоваяЗаписьОборудование, ВидРеагента);
	
	Если КлючЗаписиРегистра <> Неопределено Тогда
		ОткрытьФорму("РегистрСведений.ОборудованиеХимЦеха.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписиРегистра));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьВидРасходаПриИзменении(Элемент)
	НоваяЗаписьВидРасходаПриИзмененииНаСервере();
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура НоваяЗаписьВремяПриИзменении(Элемент)
	ОбновитьПоказанияДатчиков();
	СохранитьПарамеотрыНовойЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВидыОперацийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьПоказанияДатчиков();
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияДатчикаКонцентрацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Для Каждого Стр Из ПоказанияДатчикаКонцентрации Цикл
		Если Стр.ПолучитьИдентификатор() = ВыбраннаяСтрока Тогда
			Стр.Выбран = Истина;
			НоваяЗаписьКонцентрация = Стр.Значение;
		Иначе
			Стр.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияДатчикаУровняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Для Каждого Стр Из ПоказанияДатчикаУровня Цикл
		Если Стр.ПолучитьИдентификатор() = ВыбраннаяСтрока Тогда
			Стр.Выбран = Истина;
			НоваяЗаписьУровень = Стр.Значение;
		Иначе
			Стр.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартияРеагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПартияРеагента) Тогда
		ОбновитьДанныеПартии();
		ЗапомнитьВыбраннуюПартию();
	КонецЕсли;

	Если ЗначениеЗаполнено(ПартияРеагента) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПриВыбореПартии", ЭтотОбъект, ПартияРеагента), "Установить выбранную партию как используемую по умолчанию?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	СохранитьПарамеотрыНовойЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПартии(Ответ, ВыбраннаяПартия) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДорПараметры = Новый Структура("ВыбраннаяПартия, ВидРеагента", ВыбраннаяПартия, ВидРеагента);
		Оповещение = Новый ОписаниеОповещения("ПриВводеДатыИспользованияПартии", ЭтотОбъект, ДорПараметры);
		ПоказатьВводЗначения(Оповещение, ТекущаяДата(), "Период, с которого используется партия", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВводеДатыИспользованияПартии(ВведенноеЗначение, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВведенноеЗначение) Тогда
		Отказ = Ложь;
		УстановитьПартиюВИспользованииНаСервере(ДопПараметры.ВыбраннаяПартия, ВведенноеЗначение, ДопПараметры.ВидРеагента, Отказ);
		Если Не Отказ Тогда
			Элементы.Список.Обновить();
			Оповестить("ОбновитьТекущиеПартии");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Оборудование) Тогда
	//	НоваяЗаписьОборудование       = Элемент.ТекущиеДанные.Оборудование;
	//КонецЕсли;
	//Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидРасхода) Тогда
	//	НоваяЗаписьВидРасхода         = Элемент.ТекущиеДанные.ВидРасхода;
	//	НоваяЗаписьНаправлениеРасхода = Элемент.ТекущиеДанные.НаправлениеРасхода;
	//КонецЕсли;
	//
	//КрйняяДата = 
	//	Макс(Элемент.ТекущиеДанные.ДатаНачалаЗакачки, 
	//		Элемент.ТекущиеДанные.ДатаНачалаРасхода,
	//		Элемент.ТекущиеДанные.ДатаОкончанияЗакачки,
	//		Элемент.ТекущиеДанные.ДатаОкончанияРасхода);
	//		
	//Если ЗначениеЗаполнено(КрйняяДата) Тогда 		
	//		
	//	Если КрйняяДата = Элемент.ТекущиеДанные.ДатаНачалаЗакачки Тогда
	//		НоваяЗаписьУровень      = Элемент.ТекущиеДанные.УровеньНаНачалоЗакачки;
	//		НоваяЗаписьКонцентрация = Элемент.ТекущиеДанные.КонцентрацияНаНачалоЗакачки;
	//	ИначеЕсли КрйняяДата = Элемент.ТекущиеДанные.ДатаНачалаРасхода Тогда
	//    	НоваяЗаписьУровень      = Элемент.ТекущиеДанные.УровеньНаНачалоРасхода;
	//		НоваяЗаписьКонцентрация = Элемент.ТекущиеДанные.КонцентрацияНаНачалоРасхода;
	//	ИначеЕсли КрйняяДата = Элемент.ТекущиеДанные.ДатаОкончанияЗакачки Тогда
	//		НоваяЗаписьУровень      = Элемент.ТекущиеДанные.УровеньНаОкончаниеЗакачки;
	//		НоваяЗаписьКонцентрация = Элемент.ТекущиеДанные.КонцентрацияНаОкончаниеЗакачки;
	//	ИначеЕсли КрйняяДата = Элемент.ТекущиеДанные.ДатаОкончанияРасхода Тогда
	//		НоваяЗаписьУровень      = Элемент.ТекущиеДанные.УровеньНаОкончаниеРасхода;
	//		НоваяЗаписьКонцентрация = Элемент.ТекущиеДанные.КонцентрацияНаОкончаниеРасхода;
	//	КонецЕсли;
	//	
	//	//РабочаяДата = КрйняяДата;
	//	НоваяЗаписьВремя = КрйняяДата;
	//	
	//КонецЕсли;
	//
	//ПлотностьПоТаблице = Элемент.ТекущиеДанные.ПлотностьПоТаблицам;
	//
	//ОбновитьЗаголовкиЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтрокПоказанийДатчиковПриИзменении(Элемент)
	ОбновитьПоказанияДатчиков();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ	

&НаКлиенте
Процедура ПереключитьОтборНеВключатьВЖурнал(Команда)
	
	мОтборНеВключатьВЖурнал = Не мОтборНеВключатьВЖурнал;
	УстановитьОтборНеВключатьВЖурнал();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФорму(Команда)
	ОбновитьПараметрыНаСервере();
	ПриИзмененииВидаРеагента();
	УстановитьВидимость();
	ЗаполнитьПараметрыНовойЗаписи();
	ОбновитьЗаголовкиЭлементовУправления();
	ОбновитьПоказанияДатчиков();
	ТекущийЭлемент = Элементы.Список;
	ВКонецСпискаСписка();
	ОбновитьИтоги(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания);
	ОбновитьПараметрыИтогов();
КонецПроцедуры

&НаКлиенте
Процедура УчестьРасход(Команда)
	
	НовСтрока = УчестьРасходНаСервере(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания);
	
	Если НовСтрока <> Неопределено Тогда
	
		ОбновитьИнформациюОбОборудовании();
		Элементы.Список.Обновить();
		ОбновитьЗаголовкиЭлементовУправления();
		Время = НоваяЗаписьВремя + 60;
		Элементы.Список.ТекущаяСтрока = НовСтрока;
		УстановитьВидимость();
		НоваяЗаписьВремя = Время;
		
		ПоказатьВопросПовторитьОперациюДляСообщающихсяСосудов(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания, "Расход", Ложь);
	Иначе
		ПоказатьПредупреждение(, "Операция не выполнена");
	КонецЕсли;
	
	//Элементы.Список.Обновить();
	//Элементы.Список.ТекущаяСтрока = НовСтрока;
	//НоваяЗаписьВремя = НоваяЗаписьВремя + 60;
	//ОбновитьПараметрыИтогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакачкаВклВыкл(Команда)
	
	Отказ = Ложь;
	
	ВыполнитьКонтрольЗаполненияНовойЗаписи(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//СтрокаТабЖурнала = Неопределено;
	СтрокаТабЖурнала = ЗаписатьНаСервере(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания, "Закачка", Отказ);
	Если Не Отказ Тогда
		ОбновитьПараметрыИтогов();
	Иначе
		ПоказатьПредупреждение(, "Операция не выполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабЖурнала) Тогда
		ОбновитьИнформациюОбОборудовании();
		Элементы.Список.Обновить();
		ОбновитьЗаголовкиЭлементовУправления();
		НоваяЗаписьВремя = НоваяЗаписьВремя + 60;
		Элементы.Список.ТекущаяСтрока = СтрокаТабЖурнала;
		УстановитьВидимость();
	КонецЕсли;
	//УстановитьТекущуюСтроку(СтрокаТабЖурнала);
	ПоказатьВопросПовторитьОперациюДляСообщающихсяСосудов(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания, "Закачка", Отказ);
КонецПроцедуры

&НаКлиенте
Процедура РасходВклВыкл(Команда)
	
	Отказ = Ложь;
	
	ВыполнитьКонтрольЗаполненияНовойЗаписи(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//СтрокаТабЖурнала = Неопределено;
	СтрокаТабЖурнала = ЗаписатьНаСервере(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания, "Расход", Отказ);
	Если Не Отказ Тогда
		ОбновитьПараметрыИтогов();
	Иначе
		ПоказатьПредупреждение(, "Операция не выполнена");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабЖурнала) Тогда
		ОбновитьИнформациюОбОборудовании();
		Элементы.Список.Обновить();
		ОбновитьЗаголовкиЭлементовУправления();
		НоваяЗаписьВремя = НоваяЗаписьВремя + 60;
		Элементы.Список.ТекущаяСтрока = СтрокаТабЖурнала;
		УстановитьВидимость();
	КонецЕсли;
	
	ПоказатьВопросПовторитьОперациюДляСообщающихсяСосудов(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания, "Расход", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПовторитьОперациюДляСообщающихсяСосудов(ДатаНачалаИтогов, ДатаОкончанияИтогов, Операция = Неопределено, Отказ = Ложь, РучнаяОперация = Ложь)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОборудованиеДляПовторения  = Новый Массив;
	ОтборОборудование          = Новый Структура("Оборудование", НоваяЗаписьОборудование);
	НйденныеСообщающиесяСосуды = СообщающиесяСосуды.НайтиСтроки(ОтборОборудование);
	ОтборСообщающиесяСосуды    = Новый Структура("Ссылка");
	
	Для Каждого СтрСообщающиесяСосуды Из НйденныеСообщающиесяСосуды Цикл
		ОтборСообщающиесяСосуды.Ссылка = СтрСообщающиесяСосуды.Ссылка;
		НайденныеОборудование          = СообщающиесяСосуды.НайтиСтроки(ОтборСообщающиесяСосуды);
		Для Каждого СтрОборудование Из НайденныеОборудование Цикл
			Если СтрОборудование.Оборудование <> НоваяЗаписьОборудование Тогда
				ОборудованиеДляПовторения.Добавить(СтрОборудование.Оборудование);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ОборудованиеДляПовторения.Количество() > 0 Тогда
		
		СписокОборудования = "";
		
		ТекстВопроса = 
			"Данное оборудование входит в состав сообщающегося срсуда.
			|Повторить операцию для остальных сосудов:
			|%1?";
		
		Для Каждого ОборудованиеСсылка Из ОборудованиеДляПовторения Цикл
			Если Не ПустаяСтрока(СписокОборудования) Тогда
				СписокОборудования = СписокОборудования + "
				|";
			КонецЕсли;
			СписокОборудования = СписокОборудования + ОборудованиеСсылка;
		КонецЦикла;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СписокОборудования);
		
		ПараметрыОперации = Новый Структура("ДатаНачалаИтогов, ДатаОкончанияИтогов, Операция, Отказ, ОборудованиеДляПовторения, РучнаяОперация", 
		                                     ДатаНачалаИтогов, ДатаОкончанияИтогов, Операция, Отказ, ОборудованиеДляПовторения, РучнаяОперация);
		
		Оповещение = Новый ОписаниеОповещения("ПриОтветеНаВопросОПоаторенииОперации", ЭтотОбъект, ПараметрыОперации);
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОтветеНаВопросОПоаторенииОперации(Ответ, ПараметрыОперации) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СтрокаТабЖурнала = Неопределено;
		                                  
		Для Каждого ОборудованиеСсылка Из ПараметрыОперации.ОборудованиеДляПовторения Цикл
			НоваяЗаписьОборудование = ОборудованиеСсылка;
			Если ПараметрыОперации.РучнаяОперация Тогда
				СтрокаТабЖурнала = ЗаписатьНаСервере(ПараметрыОперации.ДатаНачалаИтогов, ПараметрыОперации.ДатаОкончанияИтогов, ПараметрыОперации.Операция, ПараметрыОперации.Отказ);
			Иначе
				СтрокаТабЖурнала = УчестьРасходНаСервере(ПараметрыОперации.ДатаНачалаИтогов, ПараметрыОперации.ДатаОкончанияИтогов);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТабЖурнала <> Неопределено Тогда
			ОбновитьПараметрыИтогов();
			Если ЗначениеЗаполнено(СтрокаТабЖурнала) Тогда
				ОбновитьИнформациюОбОборудовании();
				Элементы.Список.Обновить();
				ОбновитьЗаголовкиЭлементовУправления();
				НоваяЗаписьВремя = НоваяЗаписьВремя + 60;
				Элементы.Список.ТекущаяСтрока = СтрокаТабЖурнала;
				УстановитьВидимость();
			КонецЕсли;
		Иначе
			ПоказатьПредупреждение(, "Операция не выполнена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗапись(Команда)
	ДокСсылка = Элементы.Список.ТекущаяСтрока;
	Если ДокСсылка <> Неопределено Тогда
		УдалитьЗаписьНаСервере(ДокСсылка);
		ОбновитьФорму(Неопределено);
		Элементы.Список.ТекущаяСтрока = ДокСсылка;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписьНаСервере(ДокСсылка, Отказ = Ложь)
	
	ТекстСообщения = "";
	
	Если Не РольДоступна("ПолныеПрава") И Не РольДоступна("ИнженерХВО") Тогда
	
		ОбновитьПараметрыСмены(Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ДокСсылка.ДокументПриемаСмены <> ДокументПриемаСмены Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокОбъект = ДокСсылка.ПолучитьОбъект();
	Если ДокОбъект.Проведен И Не ДокОбъект.ЗаписьОтменена Тогда
		ДокОбъект.ЗаписьОтменена = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтменитьОперациюНаСервере(ОтборНеВключатьВЖурнал)
	
	РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.ОтменитьОПерацию(ВидРеагента, ДокументПриемаСмены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОперацию(Команда)
	ОтменитьОперациюНаСервере(мОтборНеВключатьВЖурнал);
	ОбновитьФорму(Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВВОД НОВОЙ ЗАПИСИ

&НаСервере
Функция УчестьРасходНаСервере(ДатаНачалаИтогов, ДатаОкончанияИтогов)
	
	Отказ = Ложь;
	
	ПроверитьПериод(Отказ, Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьПараметрыСмены(Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДокРасход = Документы.РасходРеагента.СоздатьДокумент();
	ДокРасход.Дата = РабочаяДата + (НоваяЗаписьВремя - '00010101');
	ДокРасход.Организация = Подразделение.Организация;
	ДокРасход.Подразделение = Подразделение;
	ДокРасход.Партия = ПартияРеагента;
	ДокРасход.ВидРасхода                      = НоваяЗаписьВидРасхода;
	ДокРасход.НаправлениеРасхода              = НоваяЗаписьНаправлениеРасхода;
	ДокРасход.ВидРеагента                     = ВидРеагента;
	ДокРасход.Количество                      = НоваяЗаписьКоличество;
	ДокРасход.Комментарий                     = НоваяЗаписьКомментарий;
	
	Если ЗначениеЗаполнено(ПартияРеагента) Тогда
		ДокРасход.Реагент = ПартияРеагента.Реагент;
	Иначе
		ДокРасход.Реагент = НоваяЗаписьРеагент;
	КонецЕсли;
	
	ДокРасход.Оборудование                    = НоваяЗаписьОборудование;
	ДокРасход.ДокументПриемаСмены             = ДокументПриемаСмены;
	ДокРасход.Смена                           = Смена;
	ДокРасход.Вахта                           = Вахта;
	ДокРасход.Ответственный                   = ПользователиКлиентСервер.ТекущийПользователь();
	
	НачатьТранзакцию();
	
	Попытка
		ДокРасход.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// История операций
	ЗаписьПоследовательности = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.СоздатьМенеджерЗаписи();
	ЗаписьПоследовательности.Документ = ДокРасход.Ссылка;
	ЗаписьПоследовательности.НомерОперации = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.ПолучитьНовыйНомерОперации(ДокРасход.Ссылка);
	ЗаписьПоследовательности.ДокументПриемаСмены = ДокументПриемаСмены;
	ЗаписьПоследовательности.Записать();
	
	ЗафиксироватьТранзакцию();
	
	//НоваяЗаписьКомментарий = "";
	//НоваяЗаписьКоличество  = 0;
	
	ОбновитьТекущееСостояниеОборудования();
	ОбновитьИтоги(ДатаНачалаИтогов, ДатаОкончанияИтогов);
	ОбновитьОстатокПартии();
	
	Возврат ДокРасход.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыНовойЗаписи()
	
	Найденные = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование));
	
	Если Найденные.Количество() > 0 Тогда
		НоваяЗаписьУровень      = Найденные[0].Уровень;
		НоваяЗаписьКонцентрация = Найденные[0].Концентрация;
		НоваяЗаписьВремя        = Макс(Найденные[0].ДатаВключенияЗакачки, Найденные[0].ДатаВключенияРасхода);
		НоваяЗаписьРеагент      = Найденные[0].Реагент;
		ЕдиницаИзмеренияКоличества                         = Найденные[0].ЕдиницаИзмеренияКоличества;
		НоваяЗакисьЕдиницаИзмеренияКонцентрации            = Найденные[0].ЕдиницаИзмеренияКонцентрации;
		НоваяЗакисьЕдиницаИзмеренияПлотности               = Найденные[0].ЕдиницаИзмеренияПлотности;
		БазоваяЕдиницаИзмеренияОбъема                      = Найденные[0].БазоваяЕдиницаИзмеренияОбъема;
		Если ЗначениеЗаполнено(НоваяЗаписьВремя) Тогда
			НоваяЗаписьВремя = НоваяЗаписьВремя + 60;
		КонецЕсли;
	Иначе
		НоваяЗаписьУровень      = Неопределено;
		НоваяЗаписьКонцентрация = Неопределено;
		НоваяЗаписьВремя        = Неопределено;
		НоваяЗаписьРеагент      = Неопределено;
		ЕдиницаИзмеренияКоличества                         = Неопределено;
		НоваяЗакисьЕдиницаИзмеренияКонцентрации            = Неопределено;
		НоваяЗакисьЕдиницаИзмеренияПлотности               = Неопределено;
		БазоваяЕдиницаИзмеренияОбъема                      = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуКрайнейОперации()
	
	
	
КонецФункции

&НаСервере
Функция ЗаписатьНаСервере(ДатаНачалаИтогов, ДатаОкончанияИтогов, Операция = Неопределено, Отказ = Ложь)
	
	Если Не ЕстьПравоНаДобавление Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У пользователя отсутствуют права на ввод записей в журнал.",,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьПараметрыСмены(Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОборудования = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование));
	Если ДанныеОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОборудования = ДанныеОборудования[0];	
	ВидЗаписи          = Неопределено;
	ВклВыкл            = Неопределено;	
	Если Операция = "Расход" Тогда
		ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход;
	ИначеЕсли Операция = "Закачка" Тогда
		ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПроверитьПериод(Отказ, ВидЗаписи);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Операция = "Вкл";	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Если ДанныеОборудования.ЗакачкаВключена Тогда
			Операция = "Выкл";
		КонецЕсли;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Если ДанныеОборудования.РасходВключен Тогда
			Операция = "Выкл";
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДокЗапись = ЗаписатьВСтрокуЖурнаа(ВидЗаписи, ДанныеОборудования, Операция);
	исключение
		Отказ = Истина;
		Возврат Неопределено;
	КонецПопытки;
	
	ОбновитьТекущееСостояниеОборудования();
	ОбновитьИтоги(ДатаНачалаИтогов, ДатаОкончанияИтогов);
	ОбновитьОстатокПартии();
	
	Возврат ДокЗапись;
	
КонецФункции

&НаСервере
Функция ОбратнаяОперацияВключена(ВидЗаписи, ДанныеОборудования)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат ДанныеОборудования.ЗакачкаВключена;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат ДанныеОборудования.РасходВключен;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ОперацияВключена(ВидЗаписи, ДанныеОборудования)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат ДанныеОборудования.РасходВключен;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат ДанныеОборудования.ЗакачкаВключена;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДокументИзмСостояниеОбратнойОперации(ВидЗаписи, ДанныеОборудования)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат ДанныеОборудования.ДокументИзмСостояниеЗакачки;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат ДанныеОборудования.ДокументИзмСостояниеРасхода;
	КонецЕсли;
	
	Возврат Документы.ЗаписьЖурналаУчетаРеагентов.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ДокументИзмСостояниеТекущкйОперации(ВидЗаписи, ДанныеОборудования)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат ДанныеОборудования.ДокументИзмСостояниеРасхода;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат ДанныеОборудования.ДокументИзмСостояниеЗакачки;
	КонецЕсли;
	
	Возврат Документы.ЗаписьЖурналаУчетаРеагентов.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция СоздатьНовуюЗапись(ДатаЗаписи)
	
	ДокЗапись = Документы.ЗаписьЖурналаУчетаРеагентов.СоздатьДокумент();
	ДокЗапись.Дата                         = ДатаЗаписи;
	ДокЗапись.Организация                  = Подразделение.Организация;
	ДокЗапись.Подразделение                = Подразделение;
	ДокЗапись.Оборудование                 = НоваяЗаписьОборудование;
	ДокЗапись.Реагент                      = НоваяЗаписьРеагент;
	ДокЗапись.НаправлениеРасхода           = НоваяЗаписьНаправлениеРасхода;
	ДокЗапись.ВидРасхода                   = НоваяЗаписьВидРасхода;
	ДокЗапись.Партия                       = ПартияРеагента;
	ДокЗапись.ВидРеагента                  = ВидРеагента;
	ДокЗапись.ЕдиницаИзмеренияКоличества   = ЕдиницаИзмеренияКоличества;
	ДокЗапись.ЕдиницаИзмеренияКонцентрации = НоваяЗакисьЕдиницаИзмеренияКонцентрации;
	ДокЗапись.ЕдиницаИзмеренияПлотности    = НоваяЗакисьЕдиницаИзмеренияПлотности;
	ДокЗапись.ДокументПриемаСмены          = ДокументПриемаСмены;
	
	Возврат ДокЗапись;
	
КонецФункции

&НаСервере
Функция ПолучитьМестоВСтрокеОкончанияОбратной(МестоВСтроке)
	
	Если МестоВСтроке = 1 Тогда // НачалоЗакачки
		Возврат 4; // ОкончаниеРасхода
	ИначеЕсли МестоВСтроке = 3 Тогда // НачалоРасхода
		Возврат 2; // ОкончаниеЗакачки
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПолучитьМестоЗаписиВСтрокеЫ(ВидЗаписи, Операция)
	
	МестоВТаблице = 0;
	МестоЗаписиВТаблице = Новый Структура;
	МестоЗаписиВТаблице.Вставить("НачалоЗакачки"   , 1);
	МестоЗаписиВТаблице.Вставить("ОкончаниеЗакачки", 2);
	МестоЗаписиВТаблице.Вставить("НачалоРасхода"   , 3);
	МестоЗаписиВТаблице.Вставить("ОкончаниеРасхода", 4);
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Если Операция = "Вкл" Тогда
		    МестоВТаблице = МестоЗаписиВТаблице.НачалоЗакачки;			
		ИначеЕсли Операция = "Выкл" Тогда
			МестоВТаблице = МестоЗаписиВТаблице.ОкончаниеЗакачки;			
		КонецЕсли;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Если Операция = "Вкл" Тогда
			МестоВТаблице = МестоЗаписиВТаблице.НачалоРасхода;
		ИначеЕсли Операция = "Выкл" Тогда
			МестоВТаблице = МестоЗаписиВТаблице.ОкончаниеРасхода;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МестоВТаблице;
	
КонецФункции

&НаСервере
Процедура УстановитьФлагиНачалаОкончанияОпераций(ДокЗапись, МестоВСтроке)
	
	Если МестоВСтроке = 1 Тогда
		ДокЗапись.ЗакачкаНачата = Истина;
	ИначеЕсли МестоВСтроке = 2 Тогда
		ДокЗапись.ЗакачкаЗавершена = Истина;
	ИначеЕсли МестоВСтроке = 3 Тогда
		ДокЗапись.РасходНачат = Истина;
	ИначеЕсли МестоВСтроке = 4 Тогда
		ДокЗапись.РасходЗавершен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи, ЗаполнитьДатуОкончанияЧистойОперации = Ложь, ТолькоНезаполненные = Ложь)
	
	ИменаПолей   = Документы.ЗаписьЖурналаУчетаРеагентов.ПолучитьИменаПолейТаблицыЖурнала(МестоВСтроке);
	
	Если ЗаполнитьДатуОкончанияЧистойОперации Тогда
		Если МестоВСтроке = 2 Тогда      // Окончание закачки
			ДокЗапись.ДатаОкончанияЧистойЗакачки = ДатаЗаписи;
		ИначеЕсли МестоВСтроке = 4 Тогда // Окончание расхода
			ДокЗапись.ДатаОкончанияЧистогоРасхода = ДатаЗаписи;
		КонецЕсли;
	Иначе
		ДокЗапись[ИменаПолей.Дата] = ДатаЗаписи;
	КонецЕсли;
	
	Если ТолькоНезаполненные Тогда
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Уровень]) Тогда
			ДокЗапись[ИменаПолей.Уровень]       = НоваяЗаписьУровень;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Концентрация]) Тогда
			ДокЗапись[ИменаПолей.Концентрация]  = НоваяЗаписьКонцентрация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Смена]) Тогда
			ДокЗапись[ИменаПолей.Смена]         = Смена;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Ответственный]) Тогда
			ДокЗапись[ИменаПолей.Ответственный] = ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Вахта]) Тогда
			ДокЗапись[ИменаПолей.Вахта]         = Вахта;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокЗапись[ИменаПолей.Комментарий]) Тогда
			ДокЗапись[ИменаПолей.Комментарий]   = НоваяЗаписьКомментарий;
		КонецЕсли;
		
	Иначе
		ДокЗапись[ИменаПолей.Уровень]       = НоваяЗаписьУровень;
		ДокЗапись[ИменаПолей.Концентрация]  = НоваяЗаписьКонцентрация;
		ДокЗапись[ИменаПолей.Смена]         = Смена;
		ДокЗапись[ИменаПолей.Ответственный] = ПользователиКлиентСервер.ТекущийПользователь();
		ДокЗапись[ИменаПолей.Вахта]         = Вахта;
		ДокЗапись[ИменаПолей.Комментарий]   = НоваяЗаписьКомментарий;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКнопкуОперации(ВидЗаписи)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат Элементы.ЗакачкаВклВыкл;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат Элементы.РасходВклВыкл;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОбратныйВидЗаписи(ВидЗаписи)
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход;
	КонецЕсли;
КонецФункции

&НаСервере
Функция УстаногвленФлагЗавершенияОперации(Документ, ВидЗаписи)
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат Документ.РасходЗавершен;
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат Документ.ЗакачкаЗавершена;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИмяРеквизитаДатыЗавершенияОперации(ВидЗаписи)
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		Возврат "ДатаОкончанияРасхода";
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		Возврат "ДатаОкончанияЗакачки";
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьОперациПоследовательности(ВидЗаписи, Операция)
	
	Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
		
		Если Операция = "Вкл" Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВключениеРасхода;
		ИначеЕсли Операция = "Выкл" Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеРасхода;
		КонецЕсли;
		
	ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
		
		Если Операция = "Вкл" Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВключениеЗакачки;
		ИначеЕсли Операция = "Выкл" Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеЗакачуи;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьОперациюПоследовательностиПоместуВСтроке(МестоВСтроке, ОдновременноеВыключение = Ложь)
	
	Если МестоВСтроке = 1 Тогда
		Возврат Перечисления.ОперацииОборудованияХимцеха.ВключениеЗакачки;
	ИначеЕсли МестоВСтроке = 2 Тогда
		Если ОдновременноеВыключение Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеЗакачкиОдновременноСРасходом;
		КонецЕсли;
		Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеЗакачуи;
	ИначеЕсли МестоВСтроке = 3 Тогда
		Возврат Перечисления.ОперацииОборудованияХимцеха.ВключениеРасхода;
	ИначеЕсли МестоВСтроке = 4 Тогда
		Если ОдновременноеВыключение Тогда
			Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеРасходаОдновременноСЗакачкой;
		КонецЕсли;
		Возврат Перечисления.ОперацииОборудованияХимцеха.ВыключениеРасхода;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаписатьВСтрокуЖурнаа(ВидЗаписи, ДанныеОборудования, Операция)
	
	ДатаЗаписи                 = РабочаяДата + (НоваяЗаписьВремя - '00010101');	
	
	///////////////////////////////////////////////////////////////////////////////
	// Получение документа, в который выполняется запись
	
	МестоВТаблице = 0;
	
	Если Операция = "Вкл" Тогда
		Если ДанныеОборудования.РасходИЗакачкаОдновременно Тогда
			Если ОбратнаяОперацияВключена(ВидЗаписи, ДанныеОборудования) Тогда
				ДокЗаписьСсылка = ДокументИзмСостояниеОбратнойОперации(ВидЗаписи, ДанныеОборудования);
				Если Не ЗначениеЗаполнено(ДокЗаписьСсылка) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден документ включения обратной операции");
					Возврат Неопределено;
				КонецЕсли;
				ДокЗапись = ДокЗаписьСсылка.ПолучитьОбъект();
				ДокЗапись.РассчитатьРасходВоВремяЗакачки = Истина;
			Иначе
				ДокЗапись = СоздатьНовуюЗапись(ДатаЗаписи);
			КонецЕсли;
		Иначе
			ДокЗапись = СоздатьНовуюЗапись(ДатаЗаписи);
		КонецЕсли;
	ИначеЕсли Операция = "Выкл" Тогда
		ДокЗаписьСсылка = ДокументИзмСостояниеТекущкйОперации(ВидЗаписи, ДанныеОборудования);
		Если Не ЗначениеЗаполнено(ДокЗаписьСсылка) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не найден документ включения операции");
			Возврат Неопределено;
		КонецЕсли;
		ДокЗапись = ДокЗаписьСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	//
	///////////////////////////////////////////////////////////////////////////////
	
	ДокЗапись.ПлотностьПоТаблицам = ПлотностьПоТаблице;
	
	///////////////////////////////////////////////////////////////////////////////
	// Заполнение параметров операции
	МестоВСтроке = ПолучитьМестоЗаписиВСтрокеЫ(ВидЗаписи, Операция);
	УстановитьФлагиНачалаОкончанияОпераций(ДокЗапись, МестоВСтроке);	
	ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи);
	Если Не ОбратнаяОперацияВключена(ВидЗаписи, ДанныеОборудования)  Тогда
		ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи, Истина);	
	КонецЕсли;
	
	ОперацияПоследовательности = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.СоздатьМенеджерЗаписи();
	Если ДокЗапись.ЭтоНовый() Тогда
		НоваяСсылка = Документы.ЗаписьЖурналаУчетаРеагентов.ПолучитьСсылку();
		ДокЗапись.УстановитьСсылкуНового(НоваяСсылка);
		ОперацияПоследовательности.Документ = ДокЗапись.ПолучитьСсылкуНового();
	Иначе
		ОперацияПоследовательности.Документ = ДокЗапись.Ссылка;
	КонецЕсли;
	ОперацияПоследовательности.НомерОперации = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.ПолучитьНовыйНомерОперации(ОперацияПоследовательности.Документ);
	ОперацияПоследовательности.ДатаОперации  = ДатаЗаписи;
	ОперацияПоследовательности.Операция = ПолучитьОперациюПоследовательностиПоместуВСтроке(МестоВСтроке);
	
	//
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Одновременная закачка и расход
	
	СоздатьДокПродолженияОперации = Ложь;
	ОперацияВыключения            = Неопределено;
	
	Если ДанныеОборудования.РасходИЗакачкаОдновременно И ДокЗапись.РассчитатьРасходВоВремяЗакачки Тогда
		
		Если Операция = "Вкл" Тогда
			
			// Заполнить дату окончания и прочие параметры обратной
			МестоВСтроке = ПолучитьМестоВСтрокеОкончанияОбратной(МестоВСтроке);			
			ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи, Истина);
			
			ОперацияВыключения = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.СоздатьМенеджерЗаписи();
			ОперацияВыключения.Документ = ОперацияПоследовательности.Документ;
			ОперацияВыключения.НомерОперации = ОперацияПоследовательности.НомерОперации + 1;
			ОперацияВыключения.Операция = ПолучитьОперациюПоследовательностиПоместуВСтроке(МестоВСтроке);
			ОперацияВыключения.ДатаОперации = ДатаЗаписи;
			ОперацияВыключения.СвязаннаяОперацияДокумент = ОперацияПоследовательности.Документ;
			ОперацияВыключения.СвязаннаяОперацияНомерОперации = ОперацияПоследовательности.НомерОперации;
			
		ИначеЕсли Операция = "Выкл" Тогда
			
			ОбратныйВидЗаписи = ПолучитьОбратныйВидЗаписи(ВидЗаписи);
			
			ИмяРекв = ПолучитьИмяРеквизитаДатыЗавершенияОперации(ОбратныйВидЗаписи);
			Если ОбратнаяОперацияВключена(ВидЗаписи, ДанныеОборудования)
				И Не ЗначениеЗаполнено(ДокЗапись[ИмяРекв]) Тогда
				
				СоздатьДокПродолженияОперации = Истина;
				
				МестоВСтроке = ПолучитьМестоЗаписиВСтрокеЫ(ОбратныйВидЗаписи, "Выкл");
				УстановитьФлагиНачалаОкончанияОпераций(ДокЗапись, МестоВСтроке);
				ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи,, Истина);
				
				ОперацияВыключения = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.СоздатьМенеджерЗаписи();
				ОперацияВыключения.Документ = ОперацияПоследовательности.Документ;
				ОперацияВыключения.НомерОперации = ОперацияПоследовательности.НомерОперации + 1;
				ОперацияВыключения.Операция = ПолучитьОперациюПоследовательностиПоместуВСтроке(МестоВСтроке, Истина);
				
				ОперацияВыключения.ДатаОперации = ДатаЗаписи;
				ОперацияВыключения.СвязаннаяОперацияДокумент = ОперацияПоследовательности.Документ;
				ОперацияВыключения.СвязаннаяОперацияНомерОперации = ОперацияПоследовательности.НомерОперации;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Запись документов
	
	НачатьТранзакцию();
	
	// Основной документ
	ДокЗапись.РассчитатьРасход(ДанныеОборудования);
	ДокЗапись.ДополнительныеСвойства.Вставить("УстановитьНеВключатьВЖурнал", Истина);
	ДокЗапись.Записать(РежимЗаписиДокумента.Проведение);
	
	ОперацияПоследовательности.ДокументПриемаСмены = ДокументПриемаСмены;
	ОперацияПоследовательности.Записать();
	Если ОперацияВыключения <> Неопределено Тогда
		ОперацияВыключения.ДокументПриемаСмены = ДокументПриемаСмены;
		ОперацияВыключения.Записать();
	КонецЕсли;
	
	Если СоздатьДокПродолженияОперации Тогда
		
		// Парный документ - продолжение операции
		Если ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
			ВидЗаписиВкл = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход;
		ИначеЕсли ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
			ВидЗаписиВкл = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка;
		КонецЕсли;
		
		ДокЗапись = СоздатьНовуюЗапись(ДатаЗаписи);
	
		МестоВСтроке = ПолучитьМестоЗаписиВСтрокеЫ(ВидЗаписиВкл, "Вкл");
		УстановитьФлагиНачалаОкончанияОпераций(ДокЗапись, МестоВСтроке);
		ЗаполнитьПоляСогласноМесту(ДокЗапись, МестоВСтроке, ДатаЗаписи);
		
		ДокЗапись.ДополнительныеСвойства.Вставить("УстановитьНеВключатьВЖурнал", Истина);
		ДокЗапись.Записать(РежимЗаписиДокумента.Проведение);
		
		ОперацияВключения = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.СоздатьМенеджерЗаписи();
		ОперацияВключения.Документ = ДокЗапись.Ссылка;
		ОперацияВключения.НомерОперации = РегистрыСведений.ПоследовательностьВводаОперацийРаботыХимцеха.ПолучитьНовыйНомерОперации(ДокЗапись.Ссылка);
		ОперацияВключения.Операция = ПолучитьОперациюПоследовательностиПоместуВСтроке(МестоВСтроке);
		ОперацияВключения.ДатаОперации = ДатаЗаписи;
		ОперацияВключения.СвязаннаяОперацияДокумент = ОперацияВыключения.Документ;
		ОперацияВключения.СвязаннаяОперацияНомерОперации = ОперацияВыключения.НомерОперации;
		ОперацияВключения.Записать();
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	//
	///////////////////////////////////////////////////////////////////////////////
		
	Возврат ДокЗапись.Ссылка;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗаписьНаСервере()
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапись(Команда)
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Организация",   ПолучитьРеквихит(Подразделение, "Организация"));
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Подразделение", Подразделение);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Оборудование",  НоваяЗаписьОборудование);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ВидРеагента",   ВидРеагента);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Реагент",       ПолучитьРеквихит(ПартияРеагента, "Реагент"));
	ОткрытьФорму("Документ.ЗаписьЖурналаУчетаРеагентов.ФормаОбъекта",ПараметрыОткрытия , Элементы.Список,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ДобавитьЗаписьНаСервере();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ КОРРЕКТНОСТИ ВВОДИМЫХ ДАННЫХ

&НаСервере
Процедура ПроверитьПериод(Отказ, ВидЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Дата крайней записи
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РаботаХимцехаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.РаботаХимцеха.СрезПоследних(
	|			,
	|			Оборудование = &Оборудование
	|				И ВидЗаписи = &ВидЗаписи) КАК РаботаХимцехаСрезПоследних
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("ВидЗаписи", ВидЗаписи);
	Запрос.УстановитьПараметр("Оборудование", НоваяЗаписьОборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДатаТекЗаписм = РабочаяДата + (НоваяЗаписьВремя - '00010101');
		
		Если Выборка.Период > ДатаТекЗаписм Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"Новая запись не должна иметь дату и время меньше даты и времени предыдущей записи: ""%1""", Формат(Выборка.Период, "ДФ='dd.MM.yyyy HH:mm'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НоваяЗаписьВремя",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКонтрольЗаполненияНовойЗаписи(Отказ)
	
	Найденные = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование));
	
	Если Найденные.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Найденные[0].КонтрольМинЗначениеУровня)
			Или ЗначениеЗаполнено(Найденные[0].КонтрольМаксЗначениеУровня) Тогда
			
			Если НоваяЗаписьУровень < Найденные[0].КонтрольМинЗначениеУровня
				Или НоваяЗаписьУровень > Найденные[0].КонтрольМаксЗначениеУровня Тогда
				
				ТекстСообщения = "Значение уровня должно находиться в диапазоне от %1 до %2";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Найденные[0].КонтрольМинЗначениеУровня, Найденные[0].КонтрольМаксЗначениеУровня);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НоваяЗаписьУровень",, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Найденные[0].КонтрольМинЗначениеКонцентрации)
			Или ЗначениеЗаполнено(Найденные[0].КонтрольМаксЗначениеКонцентрации) Тогда
			
			Если НоваяЗаписьКонцентрация < Найденные[0].КонтрольМинЗначениеКонцентрации
				Или НоваяЗаписьКонцентрация > Найденные[0].КонтрольМаксЗначениеКонцентрации Тогда
				
				ТекстСообщения = "Значение концентрации должно находиться в диапазоне от %1 до %2";
				ТекстСообщения =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Найденные[0].КонтрольМинЗначениеКонцентрации, Найденные[0].КонтрольМаксЗначениеКонцентрации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "НоваяЗаписьКонцентрация",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьКорректностьВводаУровня(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьВводаУровня(Отказ)
	
	Отбор = Новый Структура("Оборудование", НоваяЗаписьОборудование);
	Найденные = Оборудование.НайтиСтроки(Отбор);
	
	Отбор = Новый Структура("Реагент", Найденные[0].Реагент);
	Найденные = ПараметрыКонтроляУровня.НайтиСтроки(Отбор);
	Если Найденные.Количество() = 0 
		Или Не Найденные[0].ВыполнятьКонтроль
		
		Или ЭтоПерваяЗапись(НоваяЗаписьОборудование, Подразделение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСост = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование))[0];
	
	ТекстСообщения = "";
	
	Если Не ТекСост.ЗакачкаВключена
		И НоваяЗаписьУровень > ТекСост.Уровень Тогда
		ТекстСообщения = "Введенное значение уровня не может превышать предыдущее значение";
	КонецЕсли;	
	
	Если Не ТекСост.РасходВключен 
		И НоваяЗаписьУровень < ТекСост.Уровень Тогда
		ТекстСообщения = "Введенное значение уровня не может бвть меньше предыдущее значение";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "НоваяЗаписьУровень", Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПерваяЗапись(Оборудование, Подраделение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Документ.ЗаписьЖурналаУчетаРеагентов КАК ЗаписьЖурналаУчетаРеагентов
	|ГДЕ
	|	ЗаписьЖурналаУчетаРеагентов.Проведен
	|	И ЗаписьЖурналаУчетаРеагентов.Подразделение = &Подразделение
	|	И ЗаписьЖурналаУчетаРеагентов.Оборудование = &Оборудование");
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	Запрос.УстановитьПараметр("Подразделение", Подраделение);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАТЧИКАМИ

&НаКлиенте
Процедура ЗапомнитьВыбраннуюПартию()
	
	Найденные = ПартииРеагентов.НайтиСтроки(Новый Структура("ВидРеагента", ВидРеагента));
	
	Для Каждого СтрТаб Из Найденные Цикл
		Если СтрТаб.Партия = ПартияРеагента Тогда
			СтрТаб.Концентрация = КонцентрацияТоварногоРеагента;
			СтрТаб.Выбрана = Истина;
		Иначе
			СтрТаб.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказанияДатчиков()
	
	Если Элементы.ГруппаВидыОпераций.ТекущаяСтраница = Элементы.ГруппаДатчики Тогда
		ПоказанияДатчикаКонцентрации.Очистить();
		ПоказанияДатчикаУровня.Очистить();
		
		ДатаПоказаний = УниверсальноеВремя(РабочаяДата + (НоваяЗаписьВремя - '00010101'));
		Раз = РабочаяДата - УниверсальноеВремя(РабочаяДата);
		ОбновитьПоказанияДатчиковНаСервере(ДатаПоказаний, Раз);
		СпозиционироватьКурсор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпозиционироватьКурсор()
	
	Найденные = ПоказанияДатчикаКонцентрации.НайтиСтроки(Новый Структура("Дата", РабочаяДата + (НоваяЗаписьВремя - '00010101')));
	
	Если Найденные.Количество() > 0 Тогда
		Элементы.ПоказанияДатчикаКонцентрации.ТекущаяСтрока = Найденные[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Найденные = ПоказанияДатчикаУровня.НайтиСтроки(Новый Структура("Дата", РабочаяДата + (НоваяЗаписьВремя - '00010101')));
	
	Если Найденные.Количество() > 0 Тогда
		Элементы.ПоказанияДатчикаУровня.ТекущаяСтрока = Найденные[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказанияДатчиковНаСервере(ДатаПоказаний, Раз)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Датчики.Запрос.ТекстЗапроса КАК ТекстЗапроса,
	|	Датчики.Тип КАК ТипДатчика,
	|	Датчики.Запрос.Подключение.СтрокаПодключения КАК СтрокаПодключения,
	|	Датчики.Код КАК ID
	|ИЗ
	|	Справочник.Датчики КАК Датчики
	|ГДЕ
	|	Датчики.Включен
	|	И Датчики.Оборудование = &Оборудование");
	Запрос.УстановитьПараметр("Оборудование", НоваяЗаписьОборудование);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		
		ТаблицаПоказаний   = Неопределено;
		ВыбранноеПоказание = 0;
		Коэффициент = 1;
		
		Если Выборка.ТипДатчика = Перечисления.ТипыДатчиков.ДатчикКонцентрации Тогда
			ТаблицаПоказаний = ПоказанияДатчикаКонцентрации;
			ВыбранноеПоказание = НоваяЗаписьКонцентрация;
		ИначеЕсли Выборка.ТипДатчика = Перечисления.ТипыДатчиков.ДатчикУровня Тогда
			ТаблицаПоказаний = ПоказанияДатчикаУровня;
			ВыбранноеПоказание = НоваяЗаписьУровень;
		КонецЕсли;
		
		Если ТаблицаПоказаний = Неопределено Тогда
			Возврат;
			
		КонецЕсли;
		
		ТаблицаПоказаний.Очистить();
		
		Connection = Новый COMОбъект("ADODB.Connection");
		
		Connection.Open(СокрЛП(Выборка.СтрокаПодключения));
		
		Command = Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = Connection;
		Command.CommandText = ЗаполнитПараметрыЗапроса(Выборка.ТекстЗапроса, Выборка.ID, ДатаПоказаний);
		
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet = Command.Execute();
		
		НайденоВыбранноеЗначение = Ложь;
		
		Пока Не RecordSet.EOF() Цикл
			
			НовСтр          = ТаблицаПоказаний.Добавить();
			НовСтр.Дата     = RecordSet.Fields.Item("Time").Value + Раз;
			НовСтр.Значение = ?(Коэффициент = 0, 0, RecordSet.Fields.Item("Value").Value / Коэффициент);
			
			Если Не НайденоВыбранноеЗначение И НовСтр.Значение = ВыбранноеПоказание Тогда
				НовСтр.Выбран = Истина;
				НайденоВыбранноеЗначение = Истина;
			КонецЕсли;
			
			RecordSet.MoveNext();  
	    КонецЦикла;
		
		RecordSet.Close();
		Connection.Close();
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитПараметрыЗапроса(Знач ТекстЗапроса, ID, ДатаПоказаний)
	
	Если КоличествоСтрокПоказанийДатчиков = 0 Или КоличествоСтрокПоказанийДатчиков = 1 Тогда
		ДатаНачалаИнтервала = ДатаПоказаний;
		ДатаОкончанияИнтервала = ДатаПоказаний;
	Иначе 
		ИнтерваловДо = Цел(КоличествоСтрокПоказанийДатчиков / 2);
		ДатаНачалаИнтервала = ДатаПоказаний - 60 * ИнтерваловДо;
		ДатаОкончанияИнтервала = ДатаНачалаИнтервала;
		Для Инд = 1 По КоличествоСтрокПоказанийДатчиков - 1 Цикл
			ДатаОкончанияИнтервала = ДатаОкончанияИнтервала + 60
		КонецЦикла;
	КонецЕсли;	
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, 
		"'" + ID + "'",
		"'" + Формат(ДатаНачалаИнтервала, "ДФ='yyyy-MM-dd HH:mm:00.000'") + "'",
		"'" + Формат(ДатаОкончанияИнтервала, "ДФ='yyyy-MM-dd HH:mm:00.000'") + "'");
	
	Возврат ТекстЗапроса;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура СохранитьПарамеотрыНовойЗаписи()
	
	Отбор = Новый Структура("ВидРеагента", ВидРеагента);
	
	Найденные = ПараметрыНовойЗаписи.НайтиСтроки(Отбор);
	Если Найденные.Количество() > 0 Тогда
		СтрокаТаб = Найденные[0];
	Иначе
		СтрокаТаб = ПараметрыНовойЗаписи.Добавить();
		СтрокаТаб.ВидРеагента = ВидРеагента;
	КонецЕсли;
	
	СтрокаТаб.Оборудование       = НоваяЗаписьОборудование;
	СтрокаТаб.ВидРасхода         = НоваяЗаписьВидРасхода;
	СтрокаТаб.НаправлениеРасхода = НоваяЗаписьНаправлениеРасхода;
	СтрокаТаб.Время              = НоваяЗаписьВремя;
	СтрокаТаб.Уровень            = НоваяЗаписьУровень;
	СтрокаТаб.Концентрация       = НоваяЗаписьКонцентрация;
	СтрокаТаб.Плотность          = ПлотностьПоТаблице;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьПарамеотрыНовойЗаписи()
	
	Отбор = Новый Структура("ВидРеагента", ВидРеагента);
	
	Найденные = ПараметрыНовойЗаписи.НайтиСтроки(Отбор);
	Если Найденные.Количество() > 0 Тогда
		СтрокаТаб = Найденные[0];
		
		НоваяЗаписьОборудование		  =	СтрокаТаб.Оборудование;
		НоваяЗаписьВидРасхода		  = СтрокаТаб.ВидРасхода;
		НоваяЗаписьНаправлениеРасхода =	СтрокаТаб.НаправлениеРасхода;
		НоваяЗаписьВремя			  =	СтрокаТаб.Время;
		НоваяЗаписьУровень			  =	СтрокаТаб.Уровень;
		НоваяЗаписьКонцентрация		  =	СтрокаТаб.Концентрация;
		ПлотностьПоТаблице			  =	СтрокаТаб.Плотность;
	Иначе
		ЗаполнитьПараметрыНовойЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОбновитьИтоги()
	
	Если Не ИтогиАктуальны() Тогда
		ОбновитьИтоги(Элементы.Список.Период.ДатаНачала, Элементы.Список.Период.ДатаОкончания);
		ОбновитьПараметрыИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрыИтогов()
	
	Если мПараметрыИтогов = Неопределено Тогда
		мПараметрыИтогов = Новый Структура;
	КонецЕсли;
	
	мПараметрыИтогов.Вставить("ДатаНачала", Элементы.Список.Период.ДатаНачала);
	мПараметрыИтогов.Вставить("ДатаОкончания", Элементы.Список.Период.ДатаОкончания);
	мПараметрыИтогов.Вставить("Подразделение", Подразделение);
	мПараметрыИтогов.Вставить("ВидРеагента", ВидРеагента);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги(ДатаНачала, ДатаОкончания)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИспользованиеРеагентовОбороты.КоличествоОборот КАК КоличествоОборот,
	|	ИспользованиеРеагентовОбороты.КоличествоМоногидратаВБазовойЕдиницеОборот КАК КоличествоМоногидратаВБазовойЕдиницеОборот,
	|	ИспользованиеРеагентовОбороты.ОбъемСработанногоОборот КАК ОбъемСработанногоОборот,
	|	ИспользованиеРеагентовОбороты.КоличествоВБазовойЕдиницеОборот КАК КоличествоВБазовойЕдиницеОборот
	|ИЗ
	|	РегистрНакопления.ИспользованиеРеагентов.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Сценарий = ЗНАЧЕНИЕ(Справочник.СценарииПланирования.Факт)
	|				И Подразделение = &Подразделение
	|				И Реагент.ВидРеагента = &ВидРеагента) КАК ИспользованиеРеагентовОбороты");
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ВидРеагента", ВидРеагента);
	
	ИтогоОбъмСработанногоРаствора = 0;
	ИтогоРасход                   = 0;
	ИтогоРасходТоварногоРеагента  = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИтогоОбъмСработанногоРаствора = Выборка.ОбъемСработанногоОборот;
		ИтогоРасход                   = Выборка.КоличествоМоногидратаВБазовойЕдиницеОборот;
		ИтогоРасходТоварногоРеагента  = Выборка.КоличествоВБазовойЕдиницеОборот;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИтогиАктуальны()
	
	Актуальны = Ложь;
	
	Если мПараметрыИтогов <> Неопределено Тогда
		
		Если Элементы.Список.Период.ДатаНачала = мПараметрыИтогов.ДатаНачала
			И Элементы.Список.Период.ДатаОкончания = мПараметрыИтогов.ДатаОкончания
			И Подразделение = мПараметрыИтогов.Подразделение
			И ВидРеагента = мПараметрыИтогов.ВидРеагента Тогда
			
			Актуальны = Истина;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Актуальны;
	
КонецФункции

&НаСервере
Процедура ОбновитьОстатокПартии()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеагентыВПодразделенияхОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	РеагентыВПодразделенияхОстатки1.КоличествоВБазовойЕдиницеОстаток КАК ОбщийОстатокРеагента
	|ИЗ
	|	РегистрНакопления.РеагентыВПодразделениях.Остатки(, Партия = &Партия) КАК РеагентыВПодразделенияхОстатки,
	|	РегистрНакопления.РеагентыВПодразделениях.Остатки(
	|			,
	|			ВидРеагента = &ВидРеагента
	|				И Подразделение = &Подразделение) КАК РеагентыВПодразделенияхОстатки1");
	Запрос.УстановитьПараметр("Партия", ПартияРеагента);
	Запрос.УстановитьПараметр("ВидРеагента", ВидРеагента);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ОстатокРеагента      = 0;
	ОбщийОстатокРеагента = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Остаток = Выборка.КоличествоОстаток;
	КонецЕсли;
	
	Найденные = ПартииРеагентов.НайтиСтроки(Новый Структура("Партия", ПартияРеагента));	
	Если Найденные.Количество() > 0 Тогда
		ОстатокРеагента      = Выборка.КоличествоОстаток;
		ОбщийОстатокРеагента = Выборка.ОбщийОстатокРеагента;
		Найденные[0].Остаток = ОстатокРеагента;
		Найденные[0].ОбщийОстатокРеагента = ОбщийОстатокРеагента;
	КонецЕсли;
	
	СообщитьОНедостаточномОстаткеРеагента(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПартии()
	
	Найденные = ПартииРеагентов.НайтиСтроки(Новый Структура("ВидРеагента,Партия", ВидРеагента, ПартияРеагента));
	
	Если Найденные.Количество() = 0 Тогда
		
		НовСтр = ПартииРеагентов.Добавить();
		
		НовСтр.ВидРеагента = ПартияРеагента.ВидРеагента;
		НовСтр.Партия = ПартияРеагента;
		
	КонецЕсли;
	
	ОбновитьОстатокПартии();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПартиюВИспользованииНаСервере(Партия, Дата, ВидРеагента, Отказ)
	
	Документы.ПриходРеагента.УстановитьПартиюВИспользованииНаСервере(Партия, Дата, ВидРеагента, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиНастройкиОборудования(Оборудование, ВидРеагента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОборудованиеХимЦехаСрезПоследних.Период КАК Период
	|ИЗ
	|	РегистрСведений.ОборудованиеХимЦеха.СрезПоследних(
	|			,
	|			Оборудование = &Оборудование
	|				И ВидРеагента = &ВидРеагента) КАК ОборудованиеХимЦехаСрезПоследних");
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	Запрос.УстановитьПараметр("ВидРеагента", ВидРеагента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		МассивКонструктораКлюча = Новый Массив;
		МассивКонструктораКлюча.Добавить(Новый Структура("Оборудование, Период, ВидРеагента", Оборудование, Выборка.Период, ВидРеагента));
		
		Возврат Новый ("РегистрСведенийКлючЗаписи.ОборудованиеХимЦеха", МассивКонструктораКлюча);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЕстьПравоНаДобавление()
	Возврат РольДоступна("ДобавлениеДокументаЗаписьЖурналаУчетаРеагентов") 
		Или РольДоступна("ПолныеПрава");
КонецФункции

&НаКлиенте
Процедура ПриИзмененииВидаРеагента()
	
	УстановитьОтборСписка();
	Элементы.Список.Обновить();
	ОбновитьИнформациюОбОборудовании();
	ЗаполнитьСписокВыбораОборудования();
	УстановитьОборудованиеНовойЗаписиПоУмолчанию();
	
	ВосстановитьПарамеотрыНовойЗаписи();
	
	// Установка партии реагента
	
	УстановитьПартиюРеагента();
	
	НоваяЗаписьВидРасходаПриИзмененииНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура НоваяЗаписьВидРасходаПриИзмененииНаСервере(ЗаполнитьПоУмолчанию = Ложь)
	
	Если ЗаполнитьПоУмолчанию Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидРасходаРеагентовПоУмолчанию.ВидРасходаРеагентов КАК ВидРасходаРеагентов
		|ИЗ
		|	РегистрСведений.ВидРасходаРеагентовПоУмолчанию КАК ВидРасходаРеагентовПоУмолчанию
		|ГДЕ
		|	ВидРасходаРеагентовПоУмолчанию.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Подразделение.Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяЗаписьВидРасхода = Выборка.ВидРасходаРеагентов;
		Иначе
			НоваяЗаписьВидРасхода = Справочники.ВидыРасходаРеагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НоваяЗаписьНаправлениеРасхода.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(НоваяЗаписьВидРасхода) Тогда
		НоваяЗаписьНаправлениеРасхода = Неопределено;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыРасходаРеагентовНаправленияРасхода.НаправлениеРасхода КАК НаправлениеРасхода,
	|	ВидыРасходаРеагентовНаправленияРасхода.НаправлениеРасхода.Представление КАК НаправлениеРасходаПредставление,
	|	ВидыРасходаРеагентовНаправленияРасхода.НаправлениеРасхода.ДиспетчерскоеНаименование КАК НаправлениеРасходаДиспетчерскоеНаименование
	|ИЗ
	|	Справочник.ВидыРасходаРеагентов.НаправленияРасхода КАК ВидыРасходаРеагентовНаправленияРасхода
	|ГДЕ
	|	ВидыРасходаРеагентовНаправленияРасхода.Ссылка = &Ссылка
	|	И ВидыРасходаРеагентовНаправленияРасхода.ВидРеагента = &ВидРеагента");
	Запрос.УстановитьПараметр("Ссылка", НоваяЗаписьВидРасхода);
	Запрос.УстановитьПараметр("ВидРеагента", ВидРеагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Представление = Выборка.НаправлениеРасходаПредставление;
		Если Не ПустаяСтрока(Выборка.НаправлениеРасходаДиспетчерскоеНаименование) Тогда
			Представление = Представление + " (" + Выборка.НаправлениеРасходаДиспетчерскоеНаименование + ")"
		КонецЕсли;
		Элементы.НоваяЗаписьНаправлениеРасхода.СписокВыбора.Добавить(Выборка.НаправлениеРасхода, Представление);
	КонецЦикла;
	Если ЗначениеЗаполнено(НоваяЗаписьНаправлениеРасхода) 
		И Элементы.НоваяЗаписьНаправлениеРасхода.СписокВыбора.НайтиПоЗначению(НоваяЗаписьНаправлениеРасхода) = Неопределено 
		Тогда
		НоваяЗаписьНаправлениеРасхода = Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НоваяЗаписьНаправлениеРасхода) 
		И Элементы.НоваяЗаписьНаправлениеРасхода.СписокВыбора.Количество() > 0 
		Тогда
		НоваяЗаписьНаправлениеРасхода = Элементы.НоваяЗаписьНаправлениеРасхода.СписокВыбора[0].Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПартиюРеагента()
	
	Найденные = ПартииРеагентов.НайтиСтроки(Новый Структура("ВидРеагента", ВидРеагента));
	
	Если Найденные.Количество() > 0 Тогда
		ПартияВыбрана = Ложь;
		Для Каждого СтрТаб Из Найденные Цикл
			Если СтрТаб.Выбрана Тогда
				КонцентрацияТоварногоРеагента = СтрТаб.Концентрация;
				ПартияРеагента                = СтрТаб.Партия;
				ОстатокРеагента               = СтрТаб.Остаток;
				ОбщийОстатокРеагента          = СтрТаб.ОбщийОстатокРеагента;
				ПартияВыбрана = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ПартияВыбрана Тогда
			КонцентрацияТоварногоРеагента = Найденные[0].Концентрация;
			ПартияРеагента                = Найденные[0].Партия;
			ОстатокРеагента               = Найденные[0].Остаток;
			ОбщийОстатокРеагента          = Найденные[0].ОбщийОстатокРеагента;
		КонецЕсли;
	Иначе
		ОстатокРеагента               = 0;
		ОбщийОстатокРеагента          = 0;
		КонцентрацияТоварногоРеагента = 0;
		ПартияРеагента                = Неопределено;
	КонецЕсли;
	
	Элементы.ДекорацияЗакончиласьПартия.Видимость = Ложь;
	Если ОстатокРеагента <= 0 Тогда
		СообщитьОНедостаточномОстаткеРеагента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьОНедостаточномОстаткеРеагента(ДопСообдение = Ложь)
	
	ТекстСообщения = "";
	Если ОстатокРеагента < 0 Тогда
		ТекстСообщения = "Остаток реагента %1 меньше нуля. Необходимо установить в использование другую партию.";
	ИначеЕсли ОстатокРеагента = 0 Тогда
		ТекстСообщения = "Остаток реагента %1 закончился. Необходимо установить в использование другую партию.";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПартияРеагента.Реагент);
		Элементы.ДекорацияЗакончиласьПартия.Заголовок = ТекстСообщения;
		Если ДопСообдение Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	Элементы.ДекорацияЗакончиласьПартия.Видимость = Не ПустаяСтрока(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВКонецСпискаСписка()
	//Shell = Новый COMОбъект("WScript.Shell");
	//Shell.sendKeys("{END}"); 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОборудованиеНовойЗаписиПоУмолчанию()
	Если Элементы.НоваяЗаписьОборудование.СписокВыбора.Количество() > 0 Тогда
		НоваяЗаписьОборудование = Элементы.НоваяЗаписьОборудование.СписокВыбора[0].Значение;
	Иначе
		НоваяЗаписьОборудование = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОборудования()
	
	Элементы.НоваяЗаписьОборудование.СписокВыбора.Очистить();
	Найденные = Оборудование.НайтиСтроки(Новый Структура("ВидРеагента", ВидРеагента));
	
	Для Каждого ПараметрыОборудования Из Найденные Цикл		
		Элементы.НоваяЗаписьОборудование.СписокВыбора.Добавить(ПараметрыОборудования.Оборудование);		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнениеПараметров

&НаСервере
Процедура ОбновитьПараметрыНаСервере()
	
	Организация = Подразделение.Организация;
	
	ПрочитатьРежимКонтроляСмены();	
	ОтказВРаботе = Ложь;
	ОбновитьПараметрыСмены(ОтказВРаботе);
	ЗаполнитьБазовыеПараметры();
	ЗаполнитьПартииРеагентов();
	ЗаполнитьОборудование();
	ОбновитьТекущееСостояниеОборудования();
	ПолучитьПараметрыКонтроляУровня();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРежимКонтроляСмены()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиУчетаРеагентовПоОрганизациямСрезПоследних.КонтрольСмены КАК КонтрольСмены
	|ИЗ
	|	РегистрСведений.НастройкиУчетаРеагентовПоОрганизациям.СрезПоследних(&Период, Организация = &Организация) КАК НастройкиУчетаРеагентовПоОрганизациямСрезПоследних");
	Запрос.УстановитьПараметр("Период", РабочаяДата);
	Запрос.УстановитьПараметр("Организация", Подразделение.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КонтрольСмены = Ложь;
	
	Если Выборка.Следующий() Тогда
		КонтрольСмены = Выборка.КонтрольСмены;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБазовыеПараметры()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиУчетаРеагентовСрезПоследних.БазоваяЕдиницаИзмеренияПлощади КАК БазоваяЕдиницаИзмеренияПлощади,
	|	НастройкиУчетаРеагентовСрезПоследних.БазоваяЕдиницаИзмеренияУровня КАК БазоваяЕдиницаИзмеренияУровня
	|ИЗ
	|	РегистрСведений.НастройкиУчетаРеагентов.СрезПоследних КАК НастройкиУчетаРеагентовСрезПоследних");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НоваяЗаписьЕдиницаИзмеренияУровня = Выборка.БазоваяЕдиницаИзмеренияУровня;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартииРеагентов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеагентыВПодразделенияхОстатки.ВидРеагента КАК ВидРеагента,
	|	РеагентыВПодразделенияхОстатки.Подразделение КАК Подразделение,
	|	РеагентыВПодразделенияхОстатки.КоличествоВБазовойЕдиницеОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОбщийОстатокРеагента
	|ИЗ
	|	РегистрНакопления.РеагентыВПодразделениях.Остатки(&Период, Подразделение = &Подразделение) КАК РеагентыВПодразделенияхОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПартииРеагентовВИспользованииСрезПоследних.ВидРеагента, ВТ_ОбщийОстатокРеагента.ВидРеагента) КАК ВидРеагента,
	|	ПартииРеагентовВИспользованииСрезПоследних.Партия КАК Партия,
	|	ПартииРеагентовВИспользованииСрезПоследних.Партия.Концентрация КАК Концентрация,
	|	РеагентыВПодразделенияхОстатки.КоличествоОстаток КАК Остаток,
	|	ЕСТЬNULL(ВТ_ОбщийОстатокРеагента.КоличествоОстаток, 0) КАК ОбщийОстатокРеагента
	|ИЗ
	|	РегистрСведений.ПартииРеагентовВИспользовании.СрезПоследних(&Период, Подразделение = &Подразделение) КАК ПартииРеагентовВИспользованииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РеагентыВПодразделениях.Остатки(&Период, Подразделение = &Подразделение) КАК РеагентыВПодразделенияхОстатки
	|		ПО ПартииРеагентовВИспользованииСрезПоследних.Партия = РеагентыВПодразделенияхОстатки.Партия
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОбщийОстатокРеагента КАК ВТ_ОбщийОстатокРеагента
	|		ПО ПартииРеагентовВИспользованииСрезПоследних.ВидРеагента = ВТ_ОбщийОстатокРеагента.ВидРеагента
	|			И ПартииРеагентовВИспользованииСрезПоследних.Подразделение = ВТ_ОбщийОстатокРеагента.Подразделение");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Период", КонецДня(РабочаяДата));
	
	ПартииРеагентов.Очистить();
	ПартииРеагентов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьОборудование()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Оборудование.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОборудованиеХимЦехаСрезПоследних.Оборудование КАК Оборудование,
	|	ОборудованиеХимЦехаСрезПоследних.ВидРеагента КАК ВидРеагента,
	|	ОборудованиеХимЦехаСрезПоследних.ПлощадьОснования КАК ПлощадьОснования,
	|	ОборудованиеХимЦехаСрезПоследних.Объем КАК Объем,
	|	ОборудованиеХимЦехаСрезПоследних.Реагент КАК Реагент,
	|	ОборудованиеХимЦехаСрезПоследних.КонтрольМинЗначениеУровня КАК КонтрольМинЗначениеУровня,
	|	ОборудованиеХимЦехаСрезПоследних.КонтрольМаксЗначениеУровня КАК КонтрольМаксЗначениеУровня,
	|	ОборудованиеХимЦехаСрезПоследних.КонтрольМинЗначениеКонцентрации КАК КонтрольМинЗначениеКонцентрации,
	|	ОборудованиеХимЦехаСрезПоследних.КонтрольМаксЗначениеКонцентрации КАК КонтрольМаксЗначениеКонцентрации,
	|	ОборудованиеХимЦехаСрезПоследних.ОстановкаОборудованияНаГраницеСменыИлиПериода КАК ОстановкаОборудованияНаГраницеСменыИлиПериода,
	|	ОборудованиеХимЦехаСрезПоследних.Подразделение КАК Подразделение,
	|	БазовыеЕдиницыИзмеренияРеагентов.БазоваяЕдиницаИзмеренияОбъема КАК БазоваяЕдиницаИзмеренияОбъема,
	|	БазовыеЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияКоличества КАК БазоваяЕдиницаИзмеренияКоличества,
	|	БазовыеЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияКонцентрации КАК БазоваяЕдиницаИзмеренияКонцентрации,
	|	БазовыеЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияПлотности КАК БазоваяЕдиницаИзмеренияПлотности,
	|	ОборудованиеХимЦехаСрезПоследних.ПоказыватьСостояниеВИнформационнойПанелиАРМ КАК ПоказыватьСостояние,
	|	ОборудованиеХимЦехаСрезПоследних.РасходИЗакачкаОдновременно КАК РасходИЗакачкаОдновременно,
	|	ОборудованиеХимЦехаСрезПоследних.СообщающиесяСосуды КАК СообщающиесяСосуды
	|ПОМЕСТИТЬ ВТ_ОсновныеПараметрыОборудованияИРеагентов
	|ИЗ
	|	РегистрСведений.ОборудованиеХимЦеха.СрезПоследних(, Организация = &Организация) КАК ОборудованиеХимЦехаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БазовыеЕдиницыИзмеренияРеагентов КАК БазовыеЕдиницыИзмеренияРеагентов
	|		ПО ОборудованиеХимЦехаСрезПоследних.ВидРеагента = БазовыеЕдиницыИзмеренияРеагентов.ВидРеагента
	|ГДЕ
	|	ОборудованиеХимЦехаСрезПоследних.СостояниеОборудования = ЗНАЧЕНИЕ(Перечисление.СостоянияОборудования.ВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(ЕдиницаИзмеренияКоличества.Ссылка, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдиницаИзмеренияКоличества,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиПараметровАРМУчетаРеагентов.ЕдиницаИзмеренияКонцентрацииРаствора, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдиницаИзмеренияКонцентрации,
	|	МАКСИМУМ(ЕСТЬNULL(НастройкиПараметровАРМУчетаРеагентов.ЕдиницаИзмеренияПлотностиРаствора, ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка))) КАК ЕдиницаИзмеренияПлотности,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент КАК Реагент
	|ПОМЕСТИТЬ ВТ_ЕдиницыИзмеренияРеагентов
	|ИЗ
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов КАК ВТ_ОсновныеПараметрыОборудованияИРеагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницаИзмеренияКоличества
	|		ПО ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент = ЕдиницаИзмеренияКоличества.Владелец
	|			И ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияКоличества = ЕдиницаИзмеренияКоличества.БазоваяЕдиницаИзмерения
	|			И ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияКоличества = ЕдиницаИзмеренияКоличества.ЕдиницаПоКлассификатору
	|			И (ЕдиницаИзмеренияКоличества.Коэффициент = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПараметровАРМУчетаРеагентов КАК НастройкиПараметровАРМУчетаРеагентов
	|		ПО ВТ_ОсновныеПараметрыОборудованияИРеагентов.Подразделение.Организация = НастройкиПараметровАРМУчетаРеагентов.Организация
	|			И ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент = НастройкиПараметровАРМУчетаРеагентов.Реагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Оборудование КАК Оборудование,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.ВидРеагента КАК ВидРеагента,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.ПлощадьОснования КАК ПлощадьОснования,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Объем КАК Объем,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент КАК Реагент,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.КонтрольМинЗначениеУровня КАК КонтрольМинЗначениеУровня,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.КонтрольМаксЗначениеУровня КАК КонтрольМаксЗначениеУровня,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.КонтрольМинЗначениеКонцентрации КАК КонтрольМинЗначениеКонцентрации,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.КонтрольМаксЗначениеКонцентрации КАК КонтрольМаксЗначениеКонцентрации,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.ОстановкаОборудованияНаГраницеСменыИлиПериода КАК ОстановкаОборудованияНаГраницеСменыИлиПериода,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.Подразделение КАК Подразделение,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияОбъема КАК БазоваяЕдиницаИзмеренияОбъема,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияКоличества КАК БазоваяЕдиницаИзмеренияКоличества,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияКонцентрации КАК БазоваяЕдиницаИзмеренияКонцентрации,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.БазоваяЕдиницаИзмеренияПлотности КАК БазоваяЕдиницаИзмеренияПлотности,
	|	ВТ_ЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	ВТ_ЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияКонцентрации КАК ЕдиницаИзмеренияКонцентрации,
	|	ВТ_ЕдиницыИзмеренияРеагентов.ЕдиницаИзмеренияПлотности КАК ЕдиницаИзмеренияПлотности,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.ПоказыватьСостояние КАК ПоказыватьСостояние,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.РасходИЗакачкаОдновременно КАК РасходИЗакачкаОдновременно,
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов.СообщающиесяСосуды КАК СообщающиесяСосуды
	|ИЗ
	|	ВТ_ОсновныеПараметрыОборудованияИРеагентов КАК ВТ_ОсновныеПараметрыОборудованияИРеагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЕдиницыИзмеренияРеагентов КАК ВТ_ЕдиницыИзмеренияРеагентов
	|		ПО ВТ_ОсновныеПараметрыОборудованияИРеагентов.Реагент = ВТ_ЕдиницыИзмеренияРеагентов.Реагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидРеагента,
	|	Оборудование,
	|	ПоказыватьСостояние УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Организация", Подразделение.Организация);
	
	Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());
	
	// Создадим единицы измерения, аналогичные базовым
	
	Для Каждого СтрТаб Из Оборудование Цикл
		Если Не ЗначениеЗаполнено(СтрТаб.ЕдиницаИзмеренияКоличества) Тогда
			СтрТаб.ЕдиницаИзмеренияКоличества = НайтиСоздатьЕдиницуИзмеренияАналогичнуюБазовой(СтрТаб.Реагент, СтрТаб.БазоваяЕдиницаИзмеренияКоличества);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрТаб.ЕдиницаИзмеренияПлотности) Тогда
			СтрТаб.ЕдиницаИзмеренияПлотности = НайтиСоздатьЕдиницуИзмеренияАналогичнуюБазовой(СтрТаб.Реагент, СтрТаб.БазоваяЕдиницаИзмеренияПлотности);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СообщающиесяСосудыСосуды.Ссылка КАК Ссылка,
	|	СообщающиесяСосудыСосуды.Оборудование КАК Оборудование
	|ИЗ
	|	Справочник.СообщающиесяСосуды.Сосуды КАК СообщающиесяСосудыСосуды
	|ГДЕ
	|	СообщающиесяСосудыСосуды.Ссылка В (&СообщающиесяСосуды)";
	Запрос.УстановитьПараметр("СообщающиесяСосуды", Оборудование.Выгрузить(, "СообщающиесяСосуды").ВыгрузитьКолонку("СообщающиесяСосуды"));
	СообщающиесяСосуды.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущееСостояниеОборудования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Стр Из Оборудование Цикл
		Стр.ЗакачкаВключена         = Ложь;
		Стр.РасходВключен           = Ложь;
		Стр.ДатаВключенияЗакачки    = Неопределено;
		Стр.ДатаВключенияРасхода    = Неопределено;
		Стр.ВклЗакачкиВахта         = Неопределено;
		Стр.ВклЗакачкиОтветственный = Неопределено;
		Стр.ВклЗакачкиСмена         = Неопределено;
		Стр.ВклРасходаВахта         = Неопределено;
		Стр.ВклРасходаОтветственный = Неопределено;
		Стр.ВклРасходаСмена         = Неопределено;
		Стр.Уровень                 = 0;
		Стр.Концентрация            = 0;
		Стр.ДокументИзмСостояниеЗакачки = Документы.ЗаписьЖурналаУчетаРеагентов.ПустаяСсылка();
		Стр.ДокументИзмСостояниеРасхода = Документы.ЗаписьЖурналаУчетаРеагентов.ПустаяСсылка();
	КонецЦикла;
	
	Выборка = ПрочитатьТекущееСостояниеОборудования(РеквизитФормыВЗначение("Оборудование").ВыгрузитьКолонку("Оборудование"));
	
	Отбор = Новый Структура("Оборудование");
	
	Пока Выборка.Следующий() Цикл
		
		ТекУровень = РегистрыСведений.УровеньРаствораВМернике.ПолучитьУровень(Выборка.Оборудование);
		
		Отбор.Оборудование = Выборка.Оборудование;
		Найденные = Оборудование.НайтиСтроки(Отбор);
		Найденные[0].Уровень              = ТекУровень;
		Найденные[0].Концентрация         = Выборка.Концентрация;
		
		Если Выборка.ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Закачка Тогда
			Найденные[0].ЗакачкаВключена = Выборка.Включено;
			Если Выборка.Включено Тогда
				Найденные[0].ДатаВключенияЗакачки    = Выборка.Период;
				Найденные[0].ВклЗакачкиВахта         = Выборка.Вахта;
				Найденные[0].ВклЗакачкиОтветственный = Выборка.Ответственный;
				Найденные[0].ВклЗакачкиСмена         = Выборка.Смена;
			Иначе
				Найденные[0].ДатаВключенияЗакачки = '00010101';
			КонецЕсли;
			Найденные[0].ДокументИзмСостояниеЗакачки = Выборка.ДокументИзмСостояние;
		ИначеЕсли Выборка.ВидЗаписи = Перечисления.ВидыЗаписейЖурналаУчетаРеагентов.Расход Тогда
			Найденные[0].РасходВключен = Выборка.Включено;
			Если Выборка.Включено Тогда
				Найденные[0].ДатаВключенияРасхода    = Выборка.Период;
				Найденные[0].ВклРасходаВахта         = Выборка.Вахта;
				Найденные[0].ВклРасходаОтветственный = Выборка.Ответственный;
				Найденные[0].ВклРасходаСмена         = Выборка.Смена;
			Иначе
				Найденные[0].ДатаВключенияРасхода = '00010101';
			КонецЕсли;
			Найденные[0].ДокументИзмСостояниеРасхода = Выборка.ДокументИзмСостояние;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьПараметрыКонтроляУровня()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиПараметровАРМУчетаРеагентов.Реагент КАК Реагент,
	|	НастройкиПараметровАРМУчетаРеагентов.ВыполнятьКонтрольУровня КАК ВыполнятьКонтроль
	|ИЗ
	|	РегистрСведений.НастройкиПараметровАРМУчетаРеагентов КАК НастройкиПараметровАРМУчетаРеагентов
	|ГДЕ
	|	НастройкиПараметровАРМУчетаРеагентов.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Подразделение.Организация);
	
	ПараметрыКонтроляУровня.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьЕдиницуИзмеренияАналогичнуюБазовой(Владелец, БаоваяЕдИзм)
	
	ЕдИзм = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(БаоваяЕдИзм) Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.Владелец = &Владелец
		|	И ЕдиницыИзмерения.ЕдиницаПоКлассификатору = &БазоваяЕдиницаИзмерения
		|	И ЕдиницыИзмерения.БазоваяЕдиницаИзмерения = &БазоваяЕдиницаИзмерения
		|	И ЕдиницыИзмерения.Коэффициент = 1");
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("БазоваяЕдиницаИзмерения", БаоваяЕдИзм);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЕдИзм = Выборка.Ссылка;
		Иначе
			
			НовЕд = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			НовЕд.Владелец = Владелец;
			НовЕд.ЕдиницаПоКлассификатору = БаоваяЕдИзм;
			НовЕд.БазоваяЕдиницаИзмерения = БаоваяЕдИзм;
			НовЕд.Наименование = БаоваяЕдИзм;
			НовЕд.Коэффициент = 1;
			НовЕд.Записать();
			
			ЕдИзм = НовЕд.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕдИзм;
	
КонецФункции

&НаСервере
Функция ПрочитатьТекущееСостояниеОборудования(Оборудование)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботаХимцехаСрезПоследних.Период КАК Период,
	|	РаботаХимцехаСрезПоследних.Уровень КАК Уровень,
	|	РаботаХимцехаСрезПоследних.Концентрация КАК Концентрация,
	|	РаботаХимцехаСрезПоследних.ВремяРаботы КАК ВремяРаботы,
	|	РаботаХимцехаСрезПоследних.ВидРеагента КАК ВидРеагента,
	|	РаботаХимцехаСрезПоследних.Подразделение КАК Подразделение,
	|	РаботаХимцехаСрезПоследних.Включено КАК Включено,
	|	РаботаХимцехаСрезПоследних.ВидЗаписи КАК ВидЗаписи,
	|	РаботаХимцехаСрезПоследних.Оборудование КАК Оборудование,
	|	РаботаХимцехаСрезПоследних.Ответственный КАК Ответственный,
	|	РаботаХимцехаСрезПоследних.Смена КАК Смена,
	|	РаботаХимцехаСрезПоследних.Вахта КАК Вахта,
	|	РаботаХимцехаСрезПоследних.ЕдиницаИзмеренияКоличества КАК ЕдиницаИзмеренияКоличества,
	|	РаботаХимцехаСрезПоследних.ЕдиницаИзмеренияКонцентрации КАК ЕдиницаИзмеренияКонцентрации,
	|	РаботаХимцехаСрезПоследних.ЕдиницаИзмеренияПлотности КАК ЕдиницаИзмеренияПлотности,
	|	РаботаХимцехаСрезПоследних.Регистратор КАК ДокументИзмСостояние
	|ИЗ
	|	РегистрСведений.РаботаХимцеха.СрезПоследних(, Оборудование В (&Оборудование)) КАК РаботаХимцехаСрезПоследних");
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти


#Область ОтборСписка

&НаКлиенте
Процедура УстановитьОтборНеВключатьВЖурнал()
	
	Поле = Новый ПолеКомпоновкиДанных("НеВключатьВЖурнал");
	ЭлементОтбора = ПолучитьЭлементОтбораСписка(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Не мОтборНеВключатьВЖурнал;
	ЭлементОтбора.Использование =  мОтборНеВключатьВЖурнал;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСписка()
	
	Поле = Новый ПолеКомпоновкиДанных("ВидРеагента");
	ЭлементОтбора = ПолучитьЭлементОтбораСписка(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВидРеагента;
	
	Поле = Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлементОтбора = ПолучитьЭлементОтбораСписка(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Подразделение;
	
КонецПроцедуры

Функция НайтиДокументр()
	
	Возврат Документы.ЗаписьЖурналаУчетаРеагентов.НайтиПоНомеру("000000004", НачалоГода(ТекущаяДата()));
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквихит(Ссылка, Имя)
	Возврат Ссылка[Имя];
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементОтбораСписка(Поле)
	
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из Список.Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		ЭлементОтбора.ЛевоеЗначение = Поле
	КонецЕсли;
	
	Возврат ЭлементОтбора;
	
КонецФункции

#КонецОбласти


#Область РаботаСОформлениемФормы

&НаКлиенте
Процедура ОбновитьЗаголовкиЭлементовУправления()
	
	ПараметрыОборудования = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование));
	
	Если ПараметрыОборудования.Количество() > 0 Тогда
	
		Если ПараметрыОборудования[0].ЗакачкаВключена Тогда
			Элементы.ЗакачкаВклВыкл.Заголовок = "ВЫКЛ. закачку";
		Иначе
			Элементы.ЗакачкаВклВыкл.Заголовок = "ВКЛ. закачку";
		КонецЕсли;
		
		Если ПараметрыОборудования[0].РасходВключен Тогда
			Элементы.РасходВклВыкл.Заголовок = "ВЫКЛ. расход";
		Иначе
			Элементы.РасходВклВыкл.Заголовок = "ВКЛ. расход";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаголовокЕдИзм = ?(ЗначениеЗаполнено(ЕдиницаИзмеренияКоличества), " (" + ЕдиницаИзмеренияКоличества + ")", "");
	
	Элементы.СписокРасход.Заголовок = "Расх. 100% реаг." + ЗаголовокЕдИзм;
	Элементы.СписокРасходТоварногоРеагента.Заголовок = "Расх. тов. реаг." + ЗаголовокЕдИзм;
	
	Элементы.ИтогоОбъмСработанногоРаствора.Заголовок = "Объем сработанного раствора " + ?(ЗначениеЗаполнено(БазоваяЕдиницаИзмеренияОбъема), " (" + БазоваяЕдиницаИзмеренияОбъема + ")", "");
	Элементы.ИтогоРасход.Заголовок = "Расх. 100% реаг." + ЗаголовокЕдИзм;
	Элементы.ИтогоРасходТоварногоРеагента.Заголовок = "Расх. тов. реаг." + ЗаголовокЕдИзм;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОбОборудовании()
	
	ИнформацияОбОборудовании = "";
	
	Найденные = Оборудование.НайтиСтроки(Новый Структура("ВидРеагента, ПоказыватьСостояние", ВидРеагента, Истина));
	
	Для Каждого ПараметрыОборудования Из Найденные Цикл
		
		Если Не ПустаяСтрока(ИнформацияОбОборудовании) Тогда
			ИнформацияОбОборудовании = ИнформацияОбОборудовании + "
				|
				|";
		КонецЕсли;
		
		ИнформацияОбОборудовании = ИнформацияОбОборудовании + ПараметрыОборудования.Оборудование;
		СтрокаСостояния = "
			|   Закачка %1	Уровень %3
			|   Расход  %2	Концентрация %4";
		СтрокаСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСостояния, 
			Формат(ПараметрыОборудования.ЗакачкаВключена, "БЛ=выкл.; БИ=вкл."),
			Формат(ПараметрыОборудования.РасходВключен, "БЛ=выкл.; БИ=вкл."),
			ПараметрыОборудования.Уровень,
			ПараметрыОборудования.Концентрация);
		ИнформацияОбОборудовании = ИнформацияОбОборудовании + СтрокаСостояния;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	ВариантВидимостиИзсесть = (ВидРеагента = ПредопределенноеЗначение("Перечисление.ВидыРеагентов.Известь")
	                           Или ВидРеагента = ПредопределенноеЗначение("Перечисление.ВидыРеагентов.Коагулянт"));
							   
	//Элементы.СписокПлотностьПоТаблицам.Видимость = Не ВариантВидимостиИзсесть;
	//Элементы.ПлотностьПоТаблице.Видимость        = Не ВариантВидимостиИзсесть;
	
	Если ЕстьПравоНаДобавление И ЗначениеЗаполнено(Подразделение) Тогда
		Элементы.ЗакачкаВклВыкл.Доступность       = Истина;
		Элементы.РасходВклВыкл.Доступность        = Истина;
		ДанныеОборудования = Оборудование.НайтиСтроки(Новый Структура("Оборудование", НоваяЗаписьОборудование));
		Если ДанныеОборудования.Количество() > 0 И Не ДанныеОборудования[0].РасходИЗакачкаОдновременно Тогда
			Элементы.ЗакачкаВклВыкл.Доступность = Не ДанныеОборудования[0].РасходВключен;
			Элементы.РасходВклВыкл.Доступность  = Не ДанныеОборудования[0].ЗакачкаВключена;
		КонецЕсли;
		
	Иначе
		Элементы.ЗакачкаВклВыкл.Доступность       = Ложь;
		Элементы.РасходВклВыкл.Доступность        = Ложь;
		
	КонецЕсли;
	
	Элементы.СписокПереключитьОтборНеВключатьВЖурнал.Пометка = мОтборНеВключатьВЖурнал;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОФормлениеСписка()
	
	// Следующие поля подкрасим цыетом
	
	ОформляемынПоля = Новый Массив;
	ОформляемынПоля.Добавить(Элементы.ГруппаДатаРасхода);
	ОформляемынПоля.Добавить(Элементы.ГруппаСменаРасход);
	ОформляемынПоля.Добавить(Элементы.ГруппаУровниРасход);
	ОформляемынПоля.Добавить(Элементы.СписокОбъемСработанногоРаствораРасход);
	ОформляемынПоля.Добавить(Элементы.ГруппаДатаЗакачки);
	ОформляемынПоля.Добавить(Элементы.СписокВремяЗакачки);
	ОформляемынПоля.Добавить(Элементы.ГруппаКонцентрацияЗакачки);
	ОформляемынПоля.Добавить(Элементы.СписокПартия);
	
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	ЗаполнитьОформляемынПоля(ЭлементУО.Поля.Элементы, ОформляемынПоля);
	
	ЦветФона = ЭлементУО.Оформление.Элементы.Найти("ЦветФона");
	ЦветФона.Значение = WebЦвета.БледноМиндальный;
	ЦветФона.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОформляемынПоля(КоллекцияПолей, Поля)
	
	Для Каждого Поле Из Поля Цикл
		Если ТипЗнч(Поле) = Тип("ГруппаФормы") Тогда
			ЗаполнитьОформляемынПоля(КоллекцияПолей, Поле.ПодчиненныеЭлементы);
		Иначе
			ОформПоле = КоллекцияПолей.Добавить();
			ОформПоле.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(Поле.ПутьКДанным, "Список.", ""));
			ОформПоле.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ДанныеСмены

&НаСервере
Процедура ОбновитьПараметрыСмены(Отказ, ВыводитьСообщения = Истина)
	
	Смена               = Неопределено;
	Вахта               = Неопределено;
	ДатаПриемаСмены     = Неопределено;
	ДокументПриемаСмены = Неопределено;
	
	ИнформацияОСмене = "";
	ДопСообщение     = "";
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		ПользовательНеВходитВСоставСмены = Ложь;
		ДанныеСмены = ПолучитьДанныеТекущейСмены(ПользовательНеВходитВСоставСмены);
		Если ДанныеСмены.Следующий() Тогда
			Смена = ДанныеСмены.Смена;
			Вахта = ДанныеСмены.Вахта;
			ДатаПриемаСмены = ДанныеСмены.Период;
			ДокументПриемаСмены = ДанныеСмены.Регистратор;
		КонецЕсли;
		
		Если КонтрольСмены И ПользовательНеВходитВСоставСмены Тогда
			Отказ = Истина;
			ДопСообщение = "Пользователь не входит в состав текущей смены";
		КонецЕсли;
			
	ИначеЕсли КонтрольСмены Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	РаботаПользователяВозвможна = Не Отказ;
	Элементы.ДекорацияОтказВДоступе.Видимость = Отказ;
	
	Если ЗначениеЗаполнено(Смена) Тогда
		ИнформацияОСмене = ИнформацияОСмене + Смена;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Вахта) Тогда
		ИнформацияОСмене = ИнформацияОСмене + ", " + Вахта;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаПриемаСмены) Тогда
		ИнформацияОСмене = ИнформацияОСмене + "
			|Дата (время) приема: " + ДатаПриемаСмены;
	КонецЕсли;
	
	Элементы.ДекорацияОтказВДоступеДоп.Заголовок = ДопСообщение;
	Элементы.ДекорацияОтказВДоступеДоп.Видимость = Не ПустаяСтрока(ДопСообщение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеТекущейСмены(ПользовательНеВходитВСоставСмены)
	
	УстановитьПривилегированныйРежим(Истина);
	
	//ПодразделенияСмены = Новый Массив;
	//ТекПодразделение = Подразделение;
	//Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
	//	ПодразделенияСмены.Добавить(ТекПодразделение);
	//	ТекПодразделение = ТекПодразделение.Родитель;
	//КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(АктивныеСменыСрезПоследних.Регистратор) КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РегистраторПримаСменыСотрудника
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение В (&Подразделения)) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктивныеСмены.Период КАК Период,
	|	АктивныеСмены.Смена КАК Смена,
	|	АктивныеСмены.Регистратор.Вахта КАК Вахта,
	|	АктивныеСмены.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
	|ГДЕ
	|	АктивныеСмены.Регистратор В
	|			(ВЫБРАТЬ
	|				ВТ_РегистраторПримаСменыСотрудника.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_РегистраторПримаСменыСотрудника КАК ВТ_РегистраторПримаСменыСотрудника)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОперативныйЖурналСотрудники.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ОперативныйЖурнал.Сотрудники КАК ОперативныйЖурналСотрудники
	|ГДЕ
	|	ОперативныйЖурналСотрудники.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_РегистраторПримаСменыСотрудника.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_РегистраторПримаСменыСотрудника КАК ВТ_РегистраторПримаСменыСотрудника)
	|	И ОперативныйЖурналСотрудники.Выбран");
	Запрос.УстановитьПараметр("Подразделения", Подразделение);
	
	Результаты = Запрос.ВыполнитьПакет();
	ПользовательНеВходитВСоставСмены = (Результаты[2].Выгрузить().Найти(Пользователь.ФизическоеЛицо) = Неопределено);
	
	Возврат Результаты[1].Выбрать();
	
КонецФункции

#КонецОбласти



&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
КонецПроцедуры


&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СписокПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СписокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	// Вставить содержимое обработчика.
КонецПроцедуры


&НаКлиенте
Процедура СписокОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры




