&НаКлиенте
Функция ФайлСуществуетИДоступен(ПолноеИмяФайла)
    Перем Файл;
    
    Файл = Новый Файл(ПолноеИмяФайла);
    Если НЕ Файл.Существует() Тогда
        Возврат Ложь;
    КонецЕсли;
    
    // Проверка: Занят ли файл другим процессом?
    Попытка
        ПереместитьФайл(Файл.ПолноеИмя, Файл.ПолноеИмя);
    Исключение
        Сообщить("Файл не доступен: 
        |" + Файл.ПолноеИмя);
        Возврат Ложь;
    КонецПопытки;
    
    Возврат Истина;
    
КонецФункции

 &НаКлиенте
Функция ПередатьФайлНаСервер(Путь)

	Файл = Новый Файл(Путь);
	ФайлИсточник = Файл.ПолноеИмя;
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ФайлИсточник));
	Возврат(Адрес);

КонецФункции

&НаКлиенте
Процедура ЗагрузитьФайл(Команда)
		
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытия.Заголовок = "Выбор файла выгрузки из ЕСС";
	ДиалогОткрытия.Фильтр = "Файлы XML (*.xml)|*.xml";
	
	Если Не ДиалогОткрытия.Выбрать() Тогда Возврат; КонецЕсли;
	
	Объект.ФайлДанных = ДиалогОткрытия.ПолноеИмяФайла;
	
	Если ФайлСуществуетИДоступен(Объект.ФайлДанных) тогда
		ОбработкаФайла(ПередатьФайлНаСервер(Объект.ФайлДанных),Начальное);
	иначе
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаФайла(АдресВХранилище,Начальное)

	Цифры = "1234567890";
	РасширениеФайла = "xml";
	
	ИмяВременногоФайла  = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		Попытка
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
			
//организации
			//храним список организаций ЕСС в регистре, каждый раз переписываем, сохраняем признак использования
			//регистр организаций заполняем только при начальном
			Если Начальное тогда
 				ТЗорг = ПолучитьТекущиеОРГ();
				
				НаборЗаписей = РегистрыСведений.ИспользованиеОрганизацийЕСС.СоздатьНаборЗаписей();
				
				Для каждого ОргXDTO Из ОбъектXDTO.orgStruct.org Цикл
					
					СтрокаТЗ= ТЗорг.Найти(ОргXDTO.org_ID, "КодЕСС");	
					Если СтрокаТЗ <> Неопределено тогда
						ЗагружатьОрг =СтрокаТЗ.ЗагружатьЕСС;
					иначе
						ЗагружатьОрг =Ложь;
					КонецЕсли;
					
					Запись = НаборЗаписей.Добавить();
				    Запись.КодОрганизацииЕСС = ОргXDTO.org_ID;
				    Запись.НаименованиеОрганизацииЕСС = ОргXDTO.org_longname;
				    Запись.ЗагружатьОрганизацию = ЗагружатьОрг;
				
				КонецЦикла; 
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
//подразделения
			// прочитаем в ТЗ, далее запишем\обновим подразделения и иерархию
			ТЗ = Новый ТаблицаЗначений;
		    ТЗ.Колонки.Добавить("КодПодр",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))); 
			ТЗ.Колонки.Добавить("НаимПодр",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200))); 
			ТЗ.Колонки.Добавить("КодРод",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))); 
			ТЗ.Колонки.Добавить("КодОрг",	Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));  

			
			Для каждого ПодрXDTO Из ОбъектXDTO.orgStruct.dep Цикл
				
				НоваяСтрока = ТЗ.Добавить(); 
				НоваяСтрока.КодПодр		=	ПодрXDTO.dep_ID;	
				НоваяСтрока.НаимПодр	=	ПодрXDTO.dep_longname;
				НоваяСтрока.КодРод		= 	ПодрXDTO.dep_parentID;
				НоваяСтрока.КодОрг		= 	ПодрXDTO.org_ID
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
    		Запрос.Текст = "ВЫБРАТЬ
    		               |	ЗагрузкаПодразделений.КодПодр КАК КодПодр,
    		               |	ЗагрузкаПодразделений.КодРод КАК КодРод,
    		               |	ЗагрузкаПодразделений.КодОрг КАК КодОрг,
    		               |	ЗагрузкаПодразделений.НаимПодр КАК НаимПодр
    		               |ПОМЕСТИТЬ ТаблицаПодразделений
    		               |ИЗ
    		               |	&ТЗподр КАК ЗагрузкаПодразделений
    		               |;
    		               |
    		               |////////////////////////////////////////////////////////////////////////////////
    		               |ВЫБРАТЬ
    		               |	ТаблицаПодразделений.КодПодр КАК КодПодр,
    		               |	ТаблицаПодразделений.КодРод КАК КодРод,
    		               |	ТаблицаПодразделений.КодОрг КАК КодОрг,
    		               |	ТаблицаПодразделений.НаимПодр КАК НаимПодр
    		               |ИЗ
    		               |	ТаблицаПодразделений КАК ТаблицаПодразделений
    		               |ГДЕ
    		               |	ТаблицаПодразделений.КодОрг В
    		               |			(ВЫБРАТЬ
    		               |				ИспользованиеОрганизацийЕСС.КодОрганизацииЕСС КАК КодОрганизацииЕСС
    		               |			ИЗ
    		               |				РегистрСведений.ИспользованиеОрганизацийЕСС КАК ИспользованиеОрганизацийЕСС
    		               |			ГДЕ
    		               |				ИспользованиеОрганизацийЕСС.ЗагружатьОрганизацию = ИСТИНА)" ;
			
			Запрос.Параметры.Вставить("ТЗПодр",ТЗ);
			ТЗВыборка = Запрос.Выполнить().Выгрузить();
			
			
			Для каждого СтрокаТЗ Из ТЗВыборка Цикл
				Ссылка = Справочники.ПодразделениеЕСС.НайтиПоРеквизиту("КодЕСС",СтрокаТЗ.КодПодр);
				Если  Ссылка<>Справочники.ПодразделениеЕСС.ПустаяСсылка() тогда
					
					// такое подразделение уже есть
					Если Ссылка.Наименование <> СтрокаТЗ.НаимПодр или Ссылка.ПометкаУдаления =  Истина тогда
						//имя отличается, переименовываем
						ОбъектПодр = Ссылка.ПолучитьОбъект();
						ОбъектПодр.УстановитьПометкуУдаления(Ложь,Ложь);
						ОбъектПодр.Наименование = СтрокаТЗ.НаимПодр;
						ОбъектПодр.КодЕСС=СтрокаТЗ.КодПодр;
					
						Попытка 
			 				ОбъектПодр.Записать();
				        Исключение
			                ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка записи подразделения.'")+ОписаниеОшибки();
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
						КонецПопытки;
					иначе
						//имя идентично ничего не делаем
					КонецЕсли;	
				иначе
					//подразделения нет, формируем новое
					НовПодр = Справочники.ПодразделениеЕСС.СоздатьЭлемент();
					НовПодр.Наименование=СтрокаТЗ.НаимПодр;
					НовПодр.КодЕСС=СтрокаТЗ.КодПодр;

					Попытка 
			 			НовПодр.Записать();
				    Исключение
			            ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка записи подразделения.'")+ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла; 
			
			//подразделения иерархия
			
			Для каждого СтрокаТЗ Из ТЗВыборка Цикл

				Если СтрокаТЗ.НаимПодр <>"" тогда
					Попытка
					Ссылка = Справочники.ПодразделениеЕСС.НайтиПоРеквизиту("КодЕСС",СтрокаТЗ.КодПодр);
					СсылкаРод = Справочники.ПодразделениеЕСС.НайтиПоРеквизиту("КодЕСС",СтрокаТЗ.КодРод);
				
						Если  Ссылка<>Справочники.ПодразделениеЕСС.ПустаяСсылка() и СсылкаРод<>Справочники.ПодразделениеЕСС.ПустаяСсылка() тогда
							ОбъектПодр = Ссылка.ПолучитьОбъект();
							ОбъектПодр.Родитель = СсылкаРод;
						  	ОбъектПодр.Записать();
				        КонецЕсли;
					Исключение
			            ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка сохранения иерархии подразделения.'")+ОписаниеОшибки();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
					КонецПопытки;
				 КонецЕсли;
			КонецЦикла; 
			
//сотрудники			
			//работники, заполнение ТЗ
			
			ТЗсотр = Новый ТаблицаЗначений;
		    ТЗсотр.Колонки.Добавить("Фамилия",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
			ТЗсотр.Колонки.Добавить("Имя",					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
			ТЗсотр.Колонки.Добавить("Отчество",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
			ТЗсотр.Колонки.Добавить("КодСинхронизации",		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("UID",					Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))); 
			ТЗсотр.Колонки.Добавить("Логин",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))); 
			ТЗсотр.Колонки.Добавить("ПочтаЭл",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("Должность",			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("ПодразделениеКод",		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("Подразделение",		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("Организация",			Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("ОрганизацияКод",		Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50))); 
			ТЗсотр.Колонки.Добавить("Адрес",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			ТЗсотр.Колонки.Добавить("Телефон",				Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(150))); 
			
			Для каждого РаботникXDTO Из ОбъектXDTO.ess.sotr Цикл		
				
				НоваяСтрока = ТЗсотр.Добавить(); 
				
				НоваяСтрока.Фамилия 		= РаботникXDTO.fam;
				НоваяСтрока.Имя		 		= РаботникXDTO.ima;
				НоваяСтрока.Отчество 		= РаботникXDTO.otch;
				НоваяСтрока.КодСинхронизации= РаботникXDTO.kodsinhr;
			    НоваяСтрока.UID             = РаботникXDTO.Empl_UID;
				НоваяСтрока.Логин           = РаботникXDTO.login;
				НоваяСтрока.ПочтаЭл         = РаботникXDTO.email;
				
				//начальное заполнение (вопрос по дублям однофамильцев)
				Если Начальное тогда
					СтрокаПоиска = РаботникXDTO.fam+" "+РаботникXDTO.ima+" "+РаботникXDTO.otch;
					НайденСотр = Справочники.ФизическиеЛица.НайтиПоНаименованию(СтрокаПоиска);
					Если НайденСотр <> Справочники.ФизическиеЛица.ПустаяСсылка() тогда
						ОбъектСпр = НайденСотр.ПолучитьОбъект();
					    ОбъектСпр.КодЕСС = РаботникXDTO.Empl_UID;
					    ОбъектСпр.Записать();
					иначе
						Сообщить("Не найден сотрудник -" + СтрокаПоиска);
					КонецЕсли;	
					
				//обычная загрузка	
				иначе	
						НоваяСтрока.Должность 		= "";
						НоваяСтрока.ПодразделениеКод= "";
						НоваяСтрока.Подразделение	= "";
						НоваяСтрока.Организация		= "";
						НоваяСтрока.ОрганизацияКод	= "";
						НоваяСтрока.Адрес           = "";
						НоваяСтрока.Телефон         = "";
						
						//место работы			
						Попытка     // на случай отсутствия  rabmest
							Если ТипЗнч(РаботникXDTO.mrlist.rabmest) <> Тип("СписокXDTO") тогда
								НоваяСтрока.Должность 			= РаботникXDTO.mrlist.rabmest.rmdolg;
								НоваяСтрока.ПодразделениеКод	= РаботникXDTO.mrlist.rabmest.rmpodrID;
								НоваяСтрока.Подразделение		= РаботникXDTO.mrlist.rabmest.rmpodr;
								НоваяСтрока.Организация			= РаботникXDTO.mrlist.rabmest.orgnazvkr;
								НоваяСтрока.ОрганизацияКод		= РаботникXDTO.mrlist.rabmest.orgID;
							иначе	                                     				
								Для каждого МестоРабXDTO Из РаботникXDTO.mrlist.rabmest Цикл
									Если МестоРабXDTO.rmosn = "1" тогда	
										НоваяСтрока.Должность 			= МестоРабXDTO.rmdolg;
										НоваяСтрока.ПодразделениеКод	= МестоРабXDTO.rmpodrID;
										НоваяСтрока.Подразделение		= МестоРабXDTO.rmpodr;
										НоваяСтрока.Организация			= МестоРабXDTO.orgnazvkr;
										НоваяСтрока.ОрганизацияКод		= МестоРабXDTO.orgID;
										
									иначе
										НоваяСтрока.Должность 			= ?(НоваяСтрока.Должность="",МестоРабXDTO.rmdolg,НоваяСтрока.Должность);
										НоваяСтрока.ПодразделениеКод	= ?(НоваяСтрока.ПодразделениеКод="",МестоРабXDTO.rmpodrID,НоваяСтрока.ПодразделениеКод);
										НоваяСтрока.Подразделение		= ?(НоваяСтрока.Подразделение="",МестоРабXDTO.rmpodr,НоваяСтрока.Подразделение);
										НоваяСтрока.Организация			= ?(НоваяСтрока.Организация="",МестоРабXDTO.orgnazvkr,НоваяСтрока.Организация);
										НоваяСтрока.ОрганизацияКод		= ?(НоваяСтрока.ОрганизацияКод="",МестоРабXDTO.orgID,НоваяСтрока.ОрганизацияКод);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
						исключение	
						    //Сообщить("У сотрудника нет rabmest:" + Фамилия);
							НоваяСтрока.Должность 			= "";
							НоваяСтрока.ПодразделениеКод	= "";
							НоваяСтрока.Подразделение		= "";
							НоваяСтрока.Организация	        = "";
							НоваяСтрока.ОрганизацияКод	    = "";
							
						КонецПопытки;
						//адрес рабочего места
						Попытка     // на случай отсутствия  rabmest
							Если ТипЗнч(РаботникXDTO.kontlist.adrrab) <> Тип("СписокXDTO") тогда
								НоваяСтрока.Адрес			= РаботникXDTO.kontlist.adrrab.adrpoln;
							иначе 
								Для каждого АдресXDTO из РаботникXDTO.kontlist.adrrab Цикл
									Если АдресXDTO.rmosn = "1" тогда	
										НоваяСтрока.Адрес			= АдресXDTO.adrpoln;
									иначе
										НоваяСтрока.Адрес 			= ?(НоваяСтрока.Адрес="",АдресXDTO.adrpoln,НоваяСтрока.Адрес);
									КонецЕсли;
		 						КонецЦикла;
							КонецЕсли;
						исключение	
						    //Сообщить("У сотрудника нет kontlist:" + Фамилия);
							//Сообщить(ОписаниеОшибки());
							НоваяСтрока.Адрес="";
						КонецПопытки;
						//телефоны
						Попытка     // на случай отсутствия  tellist
							Если ТипЗнч(РаботникXDTO.tellist.telrab) <> Тип("СписокXDTO") тогда
								Если РаботникXDTO.tellist.telrab.telosn = "1" тогда
									НоваяСтрока.Телефон			= РаботникXDTO.tellist.telrab.telnomb;
								иначе
										
								КонецЕсли;	
							иначе 
								Для каждого ТелефонXDTO из РаботникXDTO.tellist.telrab Цикл
									Если ТелефонXDTO.telosn = "1" тогда	
										НоваяСтрока.Телефон 	= ?(НоваяСтрока.Телефон="",ТелефонXDTO.telnomb,НоваяСтрока.Телефон + ", "+ ТелефонXDTO.telnomb);
									КонецЕсли;
		 						КонецЦикла;
							КонецЕсли;
						исключение	
							//Сообщить("У сотрудника нет telrab:" + Фамилия);
							//Сообщить(ОписаниеОшибки());
							НоваяСтрока.Телефон ="";
						КонецПопытки;
				Конецесли;
				
				
				
			КонецЦикла; 
 	
		Исключение
			
			ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка чтения XML. Неверный формат файла.'")+ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
			
		КонецПопытки;
		
		
		//Выбор только сотрудников из отобранных организаций и подразделений из регистра соответствия
		
		
			Запрос = Новый Запрос;
    		Запрос.Текст = "ВЫБРАТЬ
    		               |	ЗагрузкаСотрудников.Фамилия КАК Фамилия,
    		               |	ЗагрузкаСотрудников.Имя КАК Имя,
    		               |	ЗагрузкаСотрудников.Отчество КАК Отчество,
    		               |	ЗагрузкаСотрудников.КодСинхронизации КАК КодСинхронизации,
    		               |	ЗагрузкаСотрудников.UID КАК UID,
    		               |	ЗагрузкаСотрудников.Логин КАК Логин,
    		               |	ЗагрузкаСотрудников.ПочтаЭл КАК ПочтаЭл,
    		               |	ЗагрузкаСотрудников.Должность КАК Должность,
    		               |	ЗагрузкаСотрудников.Подразделение КАК Подразделение,
    		               |	ЗагрузкаСотрудников.ПодразделениеКод КАК ПодразделениеКод,
    		               |	ЗагрузкаСотрудников.Организация КАК Организация,
    		               |	ЗагрузкаСотрудников.ОрганизацияКод КАК ОрганизацияКод,
    		               |	ЗагрузкаСотрудников.Адрес КАК Адрес,
    		               |	ЗагрузкаСотрудников.Телефон КАК Телефон
    		               |ПОМЕСТИТЬ ТаблицаСотрудников
    		               |ИЗ
    		               |	&ТЗсотр КАК ЗагрузкаСотрудников
    		               |;
    		               |
    		               |////////////////////////////////////////////////////////////////////////////////
    		               |ВЫБРАТЬ
    		               |	ТаблицаСотрудников.Фамилия КАК Фамилия,
    		               |	ТаблицаСотрудников.Имя КАК Имя,
    		               |	ТаблицаСотрудников.Отчество КАК Отчество,
    		               |	ТаблицаСотрудников.КодСинхронизации КАК КодСинхронизации,
    		               |	ТаблицаСотрудников.UID КАК UID,
    		               |	ТаблицаСотрудников.Логин КАК Логин,
    		               |	ТаблицаСотрудников.ПочтаЭл КАК ПочтаЭл,
    		               |	ТаблицаСотрудников.Должность КАК Должность,
    		               |	ТаблицаСотрудников.Подразделение КАК Подразделение,
    		               |	ТаблицаСотрудников.ПодразделениеКод КАК ПодразделениеКод,
    		               |	ТаблицаСотрудников.Организация КАК Организация,
    		               |	ТаблицаСотрудников.ОрганизацияКод КАК ОрганизацияКод,
    		               |	ТаблицаСотрудников.Адрес КАК Адрес,
    		               |	ТаблицаСотрудников.Телефон КАК Телефон
    		               |ИЗ
    		               |	ТаблицаСотрудников КАК ТаблицаСотрудников
    		               |ГДЕ
    		               |	ТаблицаСотрудников.ОрганизацияКод В
    		               |			(ВЫБРАТЬ
    		               |				ИспользованиеОрганизацийЕСС.КодОрганизацииЕСС КАК КодОрганизацииЕСС
    		               |			ИЗ
    		               |				РегистрСведений.ИспользованиеОрганизацийЕСС КАК ИспользованиеОрганизацийЕСС
    		               |			ГДЕ
    		               |				ИспользованиеОрганизацийЕСС.ЗагружатьОрганизацию = ИСТИНА)
    		               |	И ТаблицаСотрудников.ПодразделениеКод В
    		               |			(ВЫБРАТЬ
    		               |				ПодразделениеЕСС.КодЕСС КАК Код
    		               |			ИЗ
    		               |				Справочник.ПодразделениеЕСС КАК ПодразделениеЕСС
    		               |			ГДЕ
    		               |				ПодразделениеЕСС.Ссылка В ИЕРАРХИИ
    		               |					(ВЫБРАТЬ
    		               |						СоответствиеПодразделенийИПодразделенийЕСС.ПодразделениеЕСС.Ссылка КАК ПодразделениеЕСССсылка
    		               |					ИЗ
    		               |						РегистрСведений.СоответствиеПодразделенийИПодразделенийЕСС КАК СоответствиеПодразделенийИПодразделенийЕСС))" ;
			
			Запрос.Параметры.Вставить("ТЗсотр",ТЗсотр);
			ТЗ_Выб_Сотр = Запрос.Выполнить().Выгрузить();

		
		
			Для каждого СтрокаТЗ Из ТЗ_Выб_Сотр Цикл

					Ссылка = Справочники.ФизическиеЛица.НайтиПоРеквизиту("КодЕСС",СтрокаТЗ.UID);
					
					Если  Ссылка<>Справочники.ФизическиеЛица.ПустаяСсылка() тогда
						//// Сотрудник есть
						Модифицирован=Ложь;
						
						ФИО = СтрокаТЗ.Фамилия+" "+СтрокаТЗ.Имя+" "+СтрокаТЗ.Отчество;
						Если Ссылка.Наименование <> ФИО  тогда
							Модифицирован = Истина;
						КонецЕсли;	
						Если Ссылка.ПодразделениеЕСС <> ПолучитьПодразделениеПоКодуПодрЕСС(СтрокаТЗ.ПодразделениеКод) тогда    
							Модифицирован = Истина;
						КонецЕсли;
						Если Ссылка.ДолжностьЕСС<>СтрокаТЗ.Должность  			тогда Модифицирован = Истина;КонецЕсли;
						
						Если СтрокаТЗ.ПочтаЭл="ОбъектXDTO" тогда 
							ПочтаЭл=""; 
						иначе
							ПочтаЭл=СтрокаТЗ.ПочтаЭл;
						КонецЕсли;	
						Если Ссылка.ЭлектроннаяПочтаЕСС<>ПочтаЭл 				тогда Модифицирован = Истина;КонецЕсли;
						
						Если СтрокаТЗ.Логин="ОбъектXDTO" тогда 
							Логин=""; 
						иначе
							Логин=СтрокаТЗ.Логин;
						КонецЕсли;
						Если Ссылка.ЛогинЕСС<>Логин			 					тогда Модифицирован = Истина;КонецЕсли;
						Если Ссылка.АдресЕСС<>СтрокаТЗ.Адрес 					тогда Модифицирован = Истина;КонецЕсли;
						Если Ссылка.ТелефонЕСС<>СтрокаТЗ.Телефон				тогда Модифицирован = Истина;КонецЕсли;
						Если Ссылка.ОрганизацияЕСС<>СтрокаТЗ.Организация		тогда Модифицирован = Истина;КонецЕсли;
						
						Если Модифицирован тогда
							
							ОбъектСотр = Ссылка.ПолучитьОбъект();
							ОбъектСотр.УстановитьПометкуУдаления(Ложь,Ложь);
							ОбъектСотр.Наименование					= ФИО;
							ОбъектСотр.КодЕСС						=СтрокаТЗ.UID;
							ОбъектСотр.ПодразделениеЕСС				=ПолучитьПодразделениеПоКодуПодрЕСС(СтрокаТЗ.ПодразделениеКод);
	                        ОбъектСотр.ДолжностьЕСС					=СтрокаТЗ.Должность; //ПолучитьДолжностьЕСС(СтрокаТЗ.Должность);
	                        ОбъектСотр.ЭлектроннаяПочтаЕСС			=ПочтаЭл;
							ОбъектСотр.ЛогинЕСС						=Логин;
							ОбъектСотр.АдресЕСС		 				=СтрокаТЗ.Адрес;
							ОбъектСотр.ТелефонЕСС	 				=СтрокаТЗ.Телефон;
							ОбъектСотр.ОрганизацияЕСС	 			=СтрокаТЗ.Организация;
							ОбъектСотр.Уволен	 					=Ложь;

							Попытка 
								ОбъектСотр.Записать();
							Исключение
							        ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка записи сотрудника.'")+ОписаниеОшибки();
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
							КонецПопытки;
						 КонецЕсли;
					иначе
						//сотрудника нет, формируем нового
						ФИО = СтрокаТЗ.Фамилия+" "+СтрокаТЗ.Имя+" "+СтрокаТЗ.Отчество;

						НовСотр = Справочники.ФизическиеЛица.СоздатьЭлемент();
						НовСотр.Наименование=ФИО;
						НовСотр.КодЕСС=СтрокаТЗ.UID;
						НовСотр.ПодразделениеЕСС=ПолучитьПодразделениеПоКодуПодрЕСС(СтрокаТЗ.ПодразделениеКод);
                        НовСотр.ДолжностьЕСС=СтрокаТЗ.Должность; //ПолучитьДолжностьЕСС(СтрокаТЗ.Должность);
                        НовСотр.ЭлектроннаяПочтаЕСС 	=   СтрокаТЗ.ПочтаЭл;
						НовСотр.ЛогинЕСС				=   СтрокаТЗ.Логин;
						НовСотр.АдресЕСС 				=   СтрокаТЗ.Адрес;
						НовСотр.ТелефонЕСС 				=   СтрокаТЗ.Телефон;
						НовСотр.ОрганизацияЕСС 			=   СтрокаТЗ.Организация;
						НовСотр.Уволен 					=   Ложь;
						
						Попытка 
				 			НовСотр.Записать();
					    Исключение
				            ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка записи сотрудника.'")+ОписаниеОшибки();
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
						КонецПопытки;
					КонецЕсли;
	
				
				
			КонецЦикла; 
			// пометим сотрудников, которых нет в выгрузке как уволенных
			// при начальном заполнении не проверяем
			Если НЕ Начальное тогда
					Запрос = Новый Запрос;
		    		Запрос.Текст = "ВЫБРАТЬ
		    		               |	ЗагрузкаСотрудников.Фамилия КАК Фамилия,
		    		               |	ЗагрузкаСотрудников.Имя КАК Имя,
		    		               |	ЗагрузкаСотрудников.Отчество КАК Отчество,
		    		               |	ЗагрузкаСотрудников.КодСинхронизации КАК КодСинхронизации,
		    		               |	ЗагрузкаСотрудников.UID КАК UID,
		    		               |	ЗагрузкаСотрудников.Логин КАК Логин,
		    		               |	ЗагрузкаСотрудников.ПочтаЭл КАК ПочтаЭл,
		    		               |	ЗагрузкаСотрудников.Должность КАК Должность,
		    		               |	ЗагрузкаСотрудников.Подразделение КАК Подразделение,
		    		               |	ЗагрузкаСотрудников.ПодразделениеКод КАК ПодразделениеКод,
		    		               |	ЗагрузкаСотрудников.Организация КАК Организация,
		    		               |	ЗагрузкаСотрудников.ОрганизацияКод КАК ОрганизацияКод,
		    		               |	ЗагрузкаСотрудников.Адрес КАК Адрес,
		    		               |	ЗагрузкаСотрудников.Телефон КАК Телефон
		    		               |ПОМЕСТИТЬ ТаблицаСотрудников
		    		               |ИЗ
		    		               |	&ТЗсотр КАК ЗагрузкаСотрудников
		    		               |;
		    		               |
		    		               |////////////////////////////////////////////////////////////////////////////////
		    		               |ВЫБРАТЬ
		    		               |	ФизическиеЛица.Ссылка КАК СсылкаФЗ,
		    		               |	ФизическиеЛица.КодЕСС КАК КодЕСС
		    		               |ИЗ
		    		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		    		               |ГДЕ
		    		               |	НЕ ФизическиеЛица.КодЕСС В
		    		               |				(ВЫБРАТЬ
		    		               |					ТаблицаСотрудников.UID КАК UID
		    		               |				ИЗ
		    		               |					ТаблицаСотрудников КАК ТаблицаСотрудников)" ;
					
					Запрос.Параметры.Вставить("ТЗсотр",ТЗсотр);
					ТЗ_УВ_Сотр = Запрос.Выполнить().Выгрузить();
					Для каждого СтрокаТЗ Из ТЗ_УВ_Сотр Цикл
						Попытка
							ОбъектСотр = СтрокаТЗ.СсылкаФЗ.ПолучитьОбъект();
							ОбъектСотр.ПодразделениеЕСС				=Справочники.ПодразделениеЕСС.ПустаяСсылка();
			                ОбъектСотр.ДолжностьЕСС					=""; //ПолучитьДолжностьЕСС(СтрокаТЗ.Должность);
			                ОбъектСотр.ЭлектроннаяПочтаЕСС			="";
							ОбъектСотр.ЛогинЕСС						="";
							ОбъектСотр.АдресЕСС		 				="";
							ОбъектСотр.ТелефонЕСС	 				="";
							ОбъектСотр.ОрганизацияЕСС	 			="";
							ОбъектСотр.Уволен	 					=Истина;
							ОбъектСотр.ДатаЗакрытияЕСС				=ТекущаяДата();
							ОбъектСотр.Записать();
						Исключение
							ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка сохранения уволенного сотрудника.'")+ОписаниеОшибки();
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
						КонецПопытки;	
					КонецЦикла; 
		  КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеПоКодуПодрЕСС(ПодрКод);
	
	Возврат Справочники.ПодразделениеЕСС.НайтиПоРеквизиту("КодЕСС",ПодрКод)
	
КонецФункции	

&НаСервере
Функция ПолучитьДолжностьЕСС(НаимДолжн);
	
	Сссылка = Справочники.Должности.НайтиПоНаименованию(НаимДолжн, Истина);
	
	Если Сссылка<>Справочники.Должности.ПустаяСсылка() тогда
		 Возврат Сссылка;
	иначе	 
	     НовДолжн = Справочники.Должности.СоздатьЭлемент();
		 НовДолжн.Наименование=НаимДолжн;
		 Попытка 
			НовДолжн.Записать();
		Исключение
			ТекстСообщенияОбОшибке = НСтр("ru = 'Ошибка записи подразделения.'")+ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
		КонецПопытки;
    КонецЕсли;
	Возврат НовДолжн.Ссылка;	
	
КонецФункции

&НаСервере
Функция ПолучитьТекущиеОРГ();
	Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ИспользованиеОрганизацийЕСС.КодОрганизацииЕСС КАК КодЕСС,
        |	ИспользованиеОрганизацийЕСС.НаименованиеОрганизацииЕСС КАК НаименованиеЕСС,
        |	ИспользованиеОрганизацийЕСС.ЗагружатьОрганизацию КАК ЗагружатьЕСС
        |ИЗ
        |	РегистрСведений.ИспользованиеОрганизацийЕСС КАК ИспользованиеОрганизацийЕСС";
 
		Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


//Функция ОбработатьМассив(мСтрокФайла)
//	
//	//выгрузим справочник физ лиц в ТЗ
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст="ВЫБРАТЬ
//	             |	svr_ФизическиеЛица.Ссылка КАК Ссылка,
//	             |	svr_ФизическиеЛица.Наименование КАК ФИО,
//	             |	svr_ФизическиеЛица.ИД КАК ИД,
//	             |	svr_ФизическиеЛица.ДатаРождения КАК ДатаРождения,
//	             |	svr_ФизическиеЛица.Заблокирован КАК Заблокирован,
//	             |	svr_ФизическиеЛица.ПричинаБлокировки.Наименование КАК ПричинаБлокировки
//	             |ИЗ
//	             |	Справочник.svr_ФизическиеЛица КАК svr_ФизическиеЛица";
//	тзФизЛица = Запрос.Выполнить().Выгрузить();
//	тзФизЛица.Индексы.Добавить("ИД");
//	
//	Цифры = "1234567890";

//	Попытка
//		Для Индекс = 1 По мСтрокФайла.Количество() - 2 Цикл
//			
//			мСтрока=РазложитьСтрокуВМассивПодстрок(мСтрокФайла[Индекс],"""");
//			
//			ИД 		= СтрЗаменить(мСтрока[9],"""","");
//			ФИО 	= мСтрока[1];
//			Логин	= мСтрока[15];
//			Почта	= мСтрока[19];
//			Адрес 	= мСтрока[39];
//			
//			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ФИО+ИД+Логин+Почта+Адрес);

//			ДатаСтрокой = Прав(СокрЛП(мСтрока[9]), 8);				
//			Если Найти(Врег(Цифры), Врег(Лев(ДатаСтрокой, 1))) = 0 Тогда
//				Продолжить;
//			КонецЕсли;
//			ДР = НачалоДня(Дата(ДатаСтрокой));
//			//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДР);

//			// ищем в ТЗ записи и удаляем их.
//			СтруктураПоиска = новый Структура;
//			СтруктураПоиска.Вставить("ИД",ИД);
//			МассивСтрок = тзФизЛица.НайтиСтроки(СтруктураПоиска); 
//			
//			Если МассивСтрок.Количество()=0 тогда
//				//нет такого физ лица, надо формировать
//				
//				спрФЛнов = Справочники.svr_ФизическиеЛица.СоздатьЭлемент();
//				спрФЛнов.ИД= ИД;
//				спрФЛнов.Наименование= ФИО;
//				спрФЛнов.ДатаРождения= ДР;
//				спрФЛнов.Учетка= Логин;
//				//спрФЛнов.Регион="";  //реализовать поиск региона по адресу
//				
//				ТабФЛ = спрФЛнов.КонтактнаяИнформация.Добавить();
//				ТабФЛ.АдресЭП =Почта;
//				ТабФЛ.Представление =Почта;
//				ТабФЛ.Тип=перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
//				ТабФЛ.Вид=Справочники.ВидыКонтактнойИнформации.EmailПользователя;
//				спрФЛнов.Записать();
// 	
//			иначе
//				//физ лицо есть, проверяем заполнение признака "заблокирован" и "причину блокировки"
//				Для Каждого ЭлементМассива Из МассивСтрок Цикл 
//					
//					Если ЭлементМассива.Заблокирован = Истина и ЭлементМассива.ПричинаБлокировки="Уволен" тогда //сотрудник был уволен, теперь в списке работающих
//						//разблокировка
//						спрФЛ = ЭлементМассива.Ссылка.ПолучитьОбъект();
//						спрФЛ.Заблокирован = Ложь;
//						спрФЛ.ПричинаБлокировки=Справочники.srv_ОснованияБлокировкиПользователей.ПустаяСсылка();
//						спрФЛ.Записать();
//					КонецЕсли;
//				   	тзФизЛица.Удалить(ЭлементМассива);
//				КонецЦикла; 
//			КонецЕсли;	
//		КонецЦикла;
//		// оставшиеся записи блокируем как уволенные
//		Для Каждого Строка Из тзФизЛица Цикл 
//			
//			спрФЛ = Строка.Ссылка.ПолучитьОбъект();
//			спрФЛ.Заблокирован = Истина;
//			спрФЛ.ПричинаБлокировки=Справочники.srv_ОснованияБлокировкиПользователей.НайтиПоНаименованию("Уволен");
//			спрФЛ.Записать();
//			
//		КонецЦикла; 

//	Исключение
//			ТекстСообщенияОбОшибке = ОписаниеОшибки();
//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке);
//	КонецПопытки;

//	
//	
//КонецФункции	

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") 
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции