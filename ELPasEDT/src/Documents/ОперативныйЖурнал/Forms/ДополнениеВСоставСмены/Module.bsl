
&НаСервере
Функция ДополнитьСменуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор,
		|	АктивныеСмены.Подразделение КАК Подразделение,
		|	АктивныеСмены.Смена КАК Смена,
		|	АктивныеСмены.СтаршийСмены КАК СтаршийСмены,
		|	АктивныеСмены.СменаОткрыта КАК СменаОткрыта
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение = &Подразделение
		|	И АктивныеСмены.СтаршийСмены = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ДокОбъект = Результат.Регистратор.ПолучитьОбъект();
		Для Каждого ТекСтр Из СписокСотрудников Цикл
			Сотрудник = ТекСтр.Сотрудник;
			//проверка, что сотрудник принял смену
			//проверку выполняем только если дополнение выполняет НСС, для сотрудников НСЦ проверка не нужна			
			Если РольДоступна("НСС") Тогда				
				Если Не СотрудникПринялСмену(Сотрудник, ДокОбъект.Смена) Тогда
					Текст = "Сотрудник " + Сотрудник + " не принял смену"; 
					Комментарий = ?(ЗначениеЗаполнено(Комментарий), Комментарий + Символы.ПС + Текст, Текст);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//проверка, что сотрудник принял смену
			масСтрок = ДокОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
			Если масСтрок.Количество() = 0 Тогда 				
				НовСтр = ДокОбъект.Сотрудники.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
				НовСтр.Подразделение = НовСтр.Сотрудник.Подразделение;
				НовСтр.Должность = НовСтр.Сотрудник.Должность;
				НовСтр.ДатаКонтроляЗнаний = Сотрудник.ДатаКонтроляЗнаний;
				НовСтр.Выбран = Истина;
				//
				Текст = "Сотрудник " + Сотрудник + " добавлен в состав смены"; 
				//
			ИначеЕсли масСтрок.Количество() = 1 Тогда
				НовСтр = масСтрок[0];
				ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
				НовСтр.Подразделение = НовСтр.Сотрудник.Подразделение;
				НовСтр.Должность = НовСтр.Сотрудник.Должность;
				НовСтр.ДатаКонтроляЗнаний = Сотрудник.ДатаКонтроляЗнаний;
				//
				Если НовСтр.Выбран Тогда
					Текст = "Сотрудник " + Сотрудник + " уже есть в составе смены"; 
				Иначе
					Текст = "Сотрудник " + Сотрудник + " активизирован в составе смены";
				КонецЕсли;
				//
				НовСтр.Выбран = Истина;
			КонецЕсли;
			Комментарий = ?(ЗначениеЗаполнено(Комментарий), Комментарий + Символы.ПС + Текст, Текст);
		КонецЦикла;
		Попытка
			ДокОбъект.Записать();
		Исключение
		КонецПопытки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СотрудникПринялСмену(СтаршийСмены, Смена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И АктивныеСмены.СтаршийСмены.ФизическоеЛицо = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|	И АктивныеСмены.Смена = &Смена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	
	Запрос.УстановитьПараметр("Подразделение", СтаршийСмены.Подразделение);
	Запрос.УстановитьПараметр("Смена", Смена);
	Запрос.УстановитьПараметр("СтаршийСмены", СтаршийСмены);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции  

&НаКлиенте
Процедура ДополнитьСмену(Команда)
	
	Комментарий = "";
	
	Если СписокСотрудников.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Список сотрудников для дополнения состава смены пуст!");
		Возврат;
	КонецЕсли;		
	
	Если ДополнитьСменуНаСервере() Тогда
		ПоказатьПредупреждение(, Комментарий);
	Иначе
		ПоказатьПредупреждение(,"Открытая смена для добавления сотрудника/ сотрудников не найдена!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Подразделение));
		ВыбранноеЗначение = Неопределено;;
	КонецЕсли;
	
	Элемент = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
	Форма = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма); 
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = "Подбор сотрудников в Оперативный журнал";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда 		
		Сотрудник = ТекДанные.Сотрудник;
		Если ЗначениеЗаполнено(Сотрудник) Тогда 	
			Если СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() > 1 Тогда
				ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
				СтрокаДляУдаления = СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник))[1];
				СписокСотрудников.Удалить(СтрокаДляУдаления);
				Возврат;
			КонецЕсли;
			Если ДатаКонтроляЗнанийНеАктуальна(Сотрудник) Тогда
				ПоказатьПредупреждение(, "Дата следующей проверки знаний для сотрудника " + Сотрудник + " не актуальна!");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекДанные.ВремяНачалаРаботы) Тогда
				ТекДанные.ВремяНачалаРаботы = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;  		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Подразделение = ПараметрыСеанса.ТекущийПользователь.Подразделение;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПодразделениеФизлица(ФизЛицо)
	
	ТекПодразделение = ФизЛицо.Подразделение;
	ПроверкаПройдена = Ложь;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		
		Если ТекПодразделение = Подразделение Тогда
			ПроверкаПройдена = Истина;
			Прервать;
		КонецЕсли;
		
		ТекПодразделение = ТекПодразделение.Родитель;
		
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() > 0 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Подразделение));
			Возврат;
		КонецЕсли;
		
		Если ДатаКонтроляЗнанийНеАктуальна(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(, "Дата следующей проверки знаний для сотрудника " + ВыбранноеЗначение + " не актуальна!");
		КонецЕсли;
		
		НовСтр = СписокСотрудников.Добавить();
		НовСтр.Сотрудник = ВыбранноеЗначение;
		НовСтр.ВремяНачалаРаботы = ТекущаяДата();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаКонтроляЗнанийНеАктуальна(Сотрудник)
	
	Возврат Сотрудник.ДатаКонтроляЗнаний < КонецДня(ТекущаяДата()) + 1;
	
КонецФункции























