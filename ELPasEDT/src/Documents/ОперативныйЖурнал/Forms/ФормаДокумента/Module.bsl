
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 	
	
	//Заполнение
	Если Объект.Ссылка.Пустая() Тогда
	
		//Если Параметры.Свойство("Статус") Тогда
		//	Объект.Статус = Параметры.Статус;
		//Иначе
			Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
		//КонецЕсли;
		Объект.ДатаСобытия = ТекущаяДата();
		Объект.СтаршийСмены = ПараметрыСеанса.ТекущийПользователь;
		Объект.ЭтоПерваяЗапись = ЭтоПерваяЗапись();
		
		////Заполняем сотрудников смены сдачи
		//Если Не Объект.Событие = Справочники.События.СменуПринял Тогда
		//	СписокСотрудников = ПолучитьСписокСотрудников();
		//	Если СписокСотрудников.Количество() > 0 Тогда
		//		ДокументПриемаСмены = СписокСотрудников[0].ДокументПриемаСмены;
		//		ОтветственныйПриемаСмены = ДокументПриемаСмены.Ответственный;
		//		Объект.Вахта = ДокументПриемаСмены.Вахта;
		//		Объект.Смена = ДокументПриемаСмены.Смена;
		//		Для Каждого ТекСтр Из СписокСотрудников Цикл
		//			НовСтр = Объект.Сотрудники.Добавить();
		//			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		//		КонецЦикла; 			
		//	КонецЕсли;
		//КонецЕсли;
		//Заполняем сотрудников смены сдачи
		
		СписокСотрудников = ПолучитьСписокСотрудников();
		Если СписокСотрудников.Количество() > 0 Тогда
			ДокументПриемаСмены = СписокСотрудников[0].ДокументПриемаСмены;
			ОтветственныйПриемаСмены = ДокументПриемаСмены.Ответственный;
			//Объект.ДатаНачалаСмены = ДокументПриемаСмены.ДатаНачалаСмены;
			Если Не Объект.Событие = Справочники.События.СменуПринял Тогда
				Объект.Вахта = ДокументПриемаСмены.Вахта;
				Объект.Смена = ДокументПриемаСмены.Смена;
				//даты смены
				Объект.ДатаНачалаСмены = ДокументПриемаСмены.ДатаНачалаСмены;
				Объект.ДатаОкончанияСмены = ДокументПриемаСмены.ДатаОкончанияСмены;
				//даты смены
				Для Каждого ТекСтр Из СписокСотрудников Цикл
					НовСтр = Объект.Сотрудники.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
					Если Объект.Событие = Справочники.События.СменуСдал Тогда
						НовСтр.ВремяОкончанияРаботы = Объект.Смена.ВремяОкончания;
					КонецЕсли;
				КонецЦикла; 			
			КонецЕсли;
			Если Объект.Событие = Справочники.События.СменуСдал Тогда
				ЗаполнитьДокументыДляОзнакомления(ДокументПриемаСмены);
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("ДокументЗакрытия") Тогда
			ЗаполнитьДокументСдачиСмены(Параметры.ДокументЗакрытия);			
		КонецЕсли;
		
		Если Параметры.Свойство("СозданАвтоматически") Тогда
			Объект.СозданАвтоматически = Параметры.СозданАвтоматически;
		КонецЕсли;
		
		Если Объект.Событие = Справочники.События.СменуСдал Тогда
			//Объект.ДатаОкончанияСмены = ТекущаяДата();
			Для Каждого Стр Из Объект.Сотрудники Цикл
				Стр.Выбран = Истина;
			КонецЦикла;
			//Элементы.Сотрудники.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиВремяНачалаРаботы.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиВыбран.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиДатаКонтроляЗнаний.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиДолжность.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиНомерСтроки.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиПодразделение.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиСотрудник.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	//Видимость/ доступность
	Если Объект.ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
		//Элементы.ГруппаОборудование.Видимость = Ложь;
		Элементы.ГруппаЖурналы.Видимость = Истина;
	Иначе
		Элементы.ГруппаЧекЛист.Видимость = Ложь;
		Элементы.СотрудникиВремяНачалаРаботы.Видимость = Ложь;
		Элементы.СотрудникиВремяОкончанияРаботы.Видимость = Ложь;
		Элементы.ГруппаСотрудники.Заголовок = "Ответственные";
		Элементы.ГруппаЖурналы.Видимость = Ложь;
	КонецЕсли; 	
	
	Элементы.ВидЗаписи.ТолькоПросмотр = Объект.СозданАвтоматически;
	Элементы.Событие.ТолькоПросмотр = Объект.СозданАвтоматически;
	//Элементы.Статус.ТолькоПросмотр = Объект.СозданАвтоматически;
	
	//
	//ЗагрузитьСписокСобытий(); 
	
	//Блок Распоряжений
	Если Объект.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС Тогда
		Если Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено Тогда
			Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	//Блок Распоряжений
	
	//Копирование
	Если Объект.Ссылка.Пустая() И Не Параметры.ЗначениеКопирования.Пустая() Тогда
		Объект.Распоряжение = Неопределено;
		Объект.ПолученоОт = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоПерваяЗапись()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АктивныеСмены.Регистратор) КАК КолЗаписей
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].КолЗаписей = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыДляОзнакомления(ДокументПриемаСмены)
	
	Объект.ДокументыДляОзнакомления.Загрузить(ДокументПриемаСмены.ДокументыДляОзнакомления.Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	СтаршийСмены = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор,
		|	АктивныеСмены.Подразделение КАК Подразделение,
		|	АктивныеСмены.Смена КАК Смена,
		|	АктивныеСмены.СтаршийСмены КАК СтаршийСмены,
		|	АктивныеСмены.СменаОткрыта КАК СменаОткрыта
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение = &Подразделение
		|	И АктивныеСмены.СтаршийСмены = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_ДокументСменыСдачи
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперативныйЖурналСотрудники.Сотрудник КАК Сотрудник,
		|	ОперативныйЖурналСотрудники.Должность КАК Должность,
		|	ОперативныйЖурналСотрудники.Подразделение КАК Подразделение,
		|	ОперативныйЖурналСотрудники.ВремяНачалаРаботы КАК ВремяНачалаРаботы,
		|	ОперативныйЖурналСотрудники.ВремяОкончанияРаботы КАК ВремяОкончанияРаботы,
		|	ОперативныйЖурналСотрудники.Ссылка КАК ДокументПриемаСмены,
		|	ОперативныйЖурналСотрудники.Сотрудник.ДатаКонтроляЗнаний КАК ДатаКонтроляЗнаний
		|ИЗ
		|	Документ.ОперативныйЖурнал.Сотрудники КАК ОперативныйЖурналСотрудники
		|ГДЕ
		|	ОперативныйЖурналСотрудники.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументСменыСдачи.Регистратор КАК Регистратор
		|			ИЗ
		|				ВТ_ДокументСменыСдачи КАК ВТ_ДокументСменыСдачи)
		|	И ОперативныйЖурналСотрудники.Выбран";
	
	Запрос.УстановитьПараметр("Подразделение", СтаршийСмены.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", СтаршийСмены); 	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗапрещенВводДокументов()  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;  
	
КонецФункции

&НаСервере
Функция НеЗакрытаПредыдущаяСмена()  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Подразделение КАК Подразделение,
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И НЕ СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;  
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСдачиСмены(ДокументЗакрытия)
	
	Объект.ДокументЗакрытия = ДокументЗакрытия; 	
	
	Объект.ЧекЛист.Очистить();
	Для Каждого ТекСтр Из ДокументЗакрытия.ЧекЛист Цикл
		НовСтр = Объект.ЧекЛист.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
	КонецЦикла;
	
	Объект.ДокументыДляОзнакомления.Загрузить(ДокументЗакрытия.ДокументыДляОзнакомления.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//Если Объект.Ссылка.Пустая() Тогда//И Не Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял")
	//	Если ЭтоПерваяСмена() И Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") Тогда
	//	Иначе
	//		Если ЗапрещенВводДокументов() Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
	//			Возврат;
	//		КонецЕсли;
	//		Если Не ЗначениеЗаполнено(ОтветственныйПриемаСмены) Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Вы уже выполнили принятие смены!");
	//			Возврат;
	//		КонецЕсли;
	//		Если Не ОтветственныйПриемаСмены = Объект.СтаршийСмены Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Текущий пользователь не совпадает с Ответственным из последнего документа принятия смены!");
	//			Возврат;
	//		КонецЕсли;  			
	//	КонецЕсли;
	//КонецЕсли;
	
	//Новый документ
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") Тогда
			Если ЭтоПерваяСмена() Тогда
			Иначе
				Если Не ЗапрещенВводДокументов() И Объект.СтаршийСмены = ПолучитьСтаршегоТекущейСмены() Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, "Вы уже выполнили принятие смены!");
					Возврат;
				КонецЕсли;
				//Принятие смены по этому же подразделению другим пользователем
				//Если СменаПоПодразделениюПринятаДругимПользователем() Тогда
				//	Отказ = Истина;
				//	ПоказатьПредупреждение(, "По данному подразделению уже выполнено Принятие смены!");
				//	Возврат;					
				//КонецЕсли;					
			КонецЕсли;
		Иначе
			Если ЗапрещенВводДокументов() Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
				Возврат;
			КонецЕсли;
			Если Объект.СтаршийСмены = СтаршийПредыдущейСмены() Тогда
			Иначе
				Если Не Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуСдал") И НеЗакрытаПредыдущаяСмена() Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, "Сначала нужно Сдать предыдущую смену!");
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если Не ОтветственныйПриемаСмены = Объект.СтаршийСмены Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, "Текущий пользователь не совпадает с Ответственным из последнего документа принятия смены!");
				Возврат;
			КонецЕсли;
		КонецЕсли; 		
	КонецЕсли;
	
	Если Объект.Проведен ИЛИ 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен") Тогда
		//ЭтаФорма.ТолькоПросмотр = Истина;
		УстановитьТолькоПросмотрЭлементовФормыКромеСписка();
	ИначеЕсли Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуСдал") Тогда
		Элементы.ГруппаЧекЛист.ТолькоПросмотр = Истина;
		Элементы.ГруппаЖурналы.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
	УстановитьВидимостьПоВидуЗаписи();
	УстановитьВидимостьПоСтатусу();   	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрЭлементовФормыКромеСписка()
	
	Для Каждого ЭлФормы Из ЭтаФорма.Элементы Цикл
		Если ТипЗнч(ЭлФормы) = Тип("ДекорацияФормы") ИЛИ 
			ТипЗнч(ЭлФормы) = Тип("ГруппаФормы")
			Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлФормы.Имя = "ГруппаОборудование" ИЛИ ЭлФормы.Имя = "ОборудованиеПросмотр" ИЛИ ЭлФормы.Имя = "ФормаДокументОперативныйЖурналСоздатьНаОсновании" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ЭлФормы.ТолькоПросмотр = Истина;
		Исключение
			ЭлФормы.Доступность = Ложь;
		КонецПопытки;
	КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция СтаршийПредыдущейСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
		|	АктивныеСменыСрезПоследних.Период КАК Период,
		|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СтаршийСмены;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтаршегоТекущейСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", Объект.СтаршийСмены);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СтаршийСмены;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СменаПоПодразделениюПринятаДругимПользователем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И НЕ СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", Объект.СтаршийСмены);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПерваяСмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктивныеСменыСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник)).Количество() > 1 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			НомерСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник))[1].НомерСтроки;
			Объект.Сотрудники.Удалить(НомерСтроки-1);
			Возврат;
		КонецЕсли;
		
		ТекДанные.Подразделение = ПолучитьПодразделениеСотрудника(ТекДанные.Сотрудник);
		ТекДанные.Должность = ПолучитьДолжностьСотрудника(ТекДанные.Сотрудник);
		ТекДанные.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(ТекДанные.Сотрудник);
		ТекДанные.ВремяНачалаРаботы = ПолучитьВремяНачалаРаботы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяНачалаРаботы()
	
	Возврат Объект.Смена.ВремяНачала;
	
КонецФункции

&НаСервере
Функция ПолучитьПодразделениеСотрудника(Сотрудник)
	
	Возврат Сотрудник.Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьДолжностьСотрудника(Сотрудник)
	
	Возврат Сотрудник.Должность;
	
КонецФункции

&НаСервере
Функция ПолучитьДатуКонтроляЗнанийСотрудника(Сотрудник)
	
	Возврат Сотрудник.ДатаКонтроляЗнаний;
	
КонецФункции

&НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, Элемент);
 
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//РодительПодразделенияШапки = ПолучитьРодителя(Объект.Подразделение);
	//РодительПодразделенияСотрудника = ПолучитьРодителя(ВыбранноеЗначение);
	//
	//Если Не РодительПодразделенияСотрудника = РодительПодразделенияШапки Тогда 		
	//	ПоказатьПредупреждение(, "Данный сотрудник не относится к подразделению " + Объект.Подразделение);
	//	ВыбранноеЗначение = Неопределено;
	//КонецЕсли;	
	
	Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Объект.Подразделение));
		ВыбранноеЗначение = Неопределено;;
	КонецЕсли;
	
	Элемент = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРодителя(ЭлементПоиска)
	
	Если ТипЗнч(ЭлементПоиска) = Тип("СправочникСсылка.Подразделения") Тогда 	
		ПодразделениеРодитель = ЭлементПоиска;
	ИначеЕсли ТипЗнч(ЭлементПоиска) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 	
		ПодразделениеРодитель = ЭлементПоиска.Подразделение;
	КонецЕсли; 
	
	Пока НЕ ПодразделениеРодитель.Родитель.Пустая() Цикл
		ПодразделениеРодитель = ПодразделениеРодитель.Родитель;	
	КонецЦикла;
	
	Возврат ПодразделениеРодитель;

КонецФункции  

&НаКлиенте
Процедура ВидЗаписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
    ЭлементНастройки.ПравоеЗначение = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены");
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.ВидыЗаписей.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЧекЛист();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Объект.ЧекЛист.Очистить();
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьСписокСобытий();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСобытий()
	
	СписокСобытий = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗаписейСобытия.Событие КАК Событие
		|ИЗ
		|	Справочник.ВидыЗаписей.События КАК ВидыЗаписейСобытия
		|ГДЕ
		|	ВидыЗаписейСобытия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗаписи);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокСобытий.Добавить(Результат.Событие);
		
	КонецЦикла;
	
	Возврат СписокСобытий;
	
КонецФункции

&НаКлиенте
Процедура ВидЗаписиПриИзменении(Элемент)
	
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") Тогда
		Объект.ВидЗаписи = Неопределено;
	КонецЕсли;   	
	
	УстановитьВидимостьПоВидуЗаписи();
	
	Если ЗначениеЗаполнено(Объект.ВидЗаписи) Тогда
		Объект.Событие = ПолучитьСобытиеПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСобытиеПоУмолчанию()
	
	Возврат Объект.ВидЗаписи.СобытиеПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СостояниеОборудованияСрезПоследних.Оборудование КАК Оборудование,
	//	|	СостояниеОборудованияСрезПоследних.СтатусОборудования КАК СтатусОборудования,
	//	|	СостояниеОборудованияСрезПоследних.СтатусАктуален КАК СтатусАктуален
	//	|ИЗ
	//	|	РегистрСведений.СостояниеОборудования.СрезПоследних(
	//	|			,
	//	|			СтатусАктуален
	//	|				И Подразделение = &Подразделение) КАК СостояниеОборудованияСрезПоследних";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеОборудованияСрезПоследних.Оборудование КАК Оборудование,
		|	СостояниеОборудованияСрезПоследних.СтатусОборудования КАК СтатусОборудования,
		|	СостояниеОборудованияСрезПоследних.СтатусАктуален КАК СтатусАктуален
		|ПОМЕСТИТЬ ВТ_Состояние
		|ИЗ
		|	РегистрСведений.СостояниеОборудования.СрезПоследних(, Подразделение = &Подразделение) КАК СостояниеОборудованияСрезПоследних
		|ГДЕ
		|	СостояниеОборудованияСрезПоследних.СтатусАктуален
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОборудованиеНаКонтролеСрезПоследних.Оборудование КАК Оборудование,
		|	ОборудованиеНаКонтролеСрезПоследних.ДатаВыходаИзСтроя КАК ДатаВыходаИзСтроя
		|ПОМЕСТИТЬ ВТ_Неисправность
		|ИЗ
		|	РегистрСведений.ОборудованиеНаКонтроле.СрезПоследних(, ) КАК ОборудованиеНаКонтролеСрезПоследних
		|ГДЕ
		|	ОборудованиеНаКонтролеСрезПоследних.Подразделение = &Подразделение
		|	И ОборудованиеНаКонтролеСрезПоследних.ДатаОкончанияРемонтныхРабот = ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборудованиеНаКонтролеСрезПоследних.Оборудование,
		|	ОборудованиеНаКонтролеСрезПоследних.ДатаВыходаИзСтроя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Состояние.Оборудование КАК Оборудование,
		|	ВТ_Состояние.СтатусОборудования КАК СтатусОборудования,
		|	ВТ_Состояние.СтатусАктуален КАК СтатусАктуален,
		|	ВТ_Неисправность.ДатаВыходаИзСтроя КАК ДатаВыходаИзСтроя
		|ИЗ
		|	ВТ_Состояние КАК ВТ_Состояние
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Неисправность КАК ВТ_Неисправность
		|		ПО ВТ_Состояние.Оборудование = ВТ_Неисправность.Оборудование";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение); 	
	
    Объект.Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаписиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
 //   СтандартнаяОбработка = Ложь;
 //   
 //   Настройки = Новый НастройкиКомпоновкиДанных;
 //
 //   ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 //   ЭлементНастройки.Использование = Истина;
 //   ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
 //   ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
 //   ЭлементНастройки.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен");
 //   ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
 //    
 //   ПараметрыФормы = Новый Структура;
 //   ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
 //   
 //   ОткрытьФорму("Перечисление.СтатусыДокументаОперативногоЖурнала.ФормаВыбора", ПараметрыФормы, Элемент); 
 	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Черновик"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик"));
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементНастройки.ПравоеЗначение = Список;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
	
	ОткрытьФорму("Перечисление.СтатусыДокументаОперативногоЖурнала.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоВидуЗаписи()
	
	СтруктураФлагов = ПолучитьСтруктуруФлаговСервер();
	
	Если СтруктураФлагов.ЗаполнятьТЧСотрудников Тогда
		Элементы.ГруппаСотрудники.Видимость = Истина;
	Иначе
		Элементы.ГруппаСотрудники.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураФлагов.ЗаполнятьТЧОборудования Тогда
		Элементы.ГруппаОборудование.Видимость = Истина;
	Иначе
		Элементы.ГруппаОборудование.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") Тогда
		Элементы.Вахта.ТолькоПросмотр = Истина;
		Элементы.Смена.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Вахта.ТолькоПросмотр = Ложь;
		Элементы.Смена.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.РаспоряжениеНСС") Тогда
		Элементы.ПолученоОт.Видимость = Истина;
		Элементы.ПолученоОт.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ПолученоОт.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоСтатусу()
	
	ВидимостьКомментарияРаспоряжения = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик");
	
	//Элементы.Комментарий.Видимость = ВидимостьКомментарияРаспоряжения;
	//Элементы.ЗамечанияИРаспоряжения.Видимость = ВидимостьКомментарияРаспоряжения;
	Элементы.ГруппаКонтролер.Видимость = ВидимостьКомментарияРаспоряжения;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФлаговСервер()
	
	СтруктураФлагов = Новый Структура;
	СтруктураФлагов.Вставить("ЗаполнятьТЧСотрудников", Объект.ВидЗаписи.ЗаполнятьТЧСотрудников);
	СтруктураФлагов.Вставить("ЗаполнятьТЧОборудования", Объект.ВидЗаписи.ЗаполнятьТЧОборудования);
	СтруктураФлагов.Вставить("СобытиеПоУмолчанию", Объект.ВидЗаписи.СобытиеПоУмолчанию);
	
	Возврат СтруктураФлагов;
	
КонецФункции

&НаКлиенте
Процедура ВахтаПриИзменении(Элемент)
	
	//Если Объект.Сотрудники.Количество() > 0 Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ВахтаПриИзмененииЗавершение", ЭтотОбъект), "Табличная часть ответственных не пустая. Перезаполнить ответственных?",РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;
	ПриИзмененииВахтыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВахтыСервер()
	
	Объект.Сотрудники.Очистить();
	Для Каждого Стр Из Объект.Вахта.Состав Цикл
		НовСтр = Объект.Сотрудники.Добавить();
		НовСтр.Сотрудник = Стр.Сотрудник;
		НовСтр.Подразделение = ПолучитьПодразделениеСотрудника(НовСтр.Сотрудник);
		НовСтр.Должность = ПолучитьДолжностьСотрудника(НовСтр.Сотрудник);
		НовСтр.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(НовСтр.Сотрудник);
	КонецЦикла; 	
	
КонецПроцедуры
	
//&НаКлиенте
//Процедура ВахтаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
//		Объект.Вахта = Неопределено;
//		Возврат;		
//	КонецЕсли;
//	
//	ПриИзмененииВахтыСервер();
//	
//КонецПроцедуры	

&НаСервере
Процедура СменаПриИзмененииНаСервере()
	
	ВремяНачалаСмены = Объект.Смена.ВремяНачала;
	ВремяОкончанияСмены = Объект.Смена.ВремяОкончания;
	
	Для Каждого ТекСтр Из Объект.Сотрудники Цикл
		ТекСтр.ВремяНачалаРаботы = ВремяНачалаСмены;
		//ТекСтр.ВремяОкончанияРаботы = ВремяОкончанияСмены;
	КонецЦикла;
	
	//Даты смен
	//Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
	//	тВремяНачалаСмены = " " + Прав(Строка(ВремяНачалаСмены),8);
	//Иначе
	//	тВремяНачалаСмены = Прав(Строка(ВремяНачалаСмены),8);
	//КонецЕсли;
	//Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
	//	тВремяОкончанияСмены = " " + Прав(Строка(ВремяОкончанияСмены),8);
	//Иначе
	//	тВремяОкончанияСмены = Прав(Строка(ВремяОкончанияСмены),8);
	//КонецЕсли;
	//
	//Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
	//	тВремяНачалаСмены = " " + Прав(Строка(ВремяНачалаСмены),8);
	//Иначе
		тВремяНачалаСмены = Прав(Строка(ВремяНачалаСмены),8);
	//КонецЕсли;
	//Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
	//	тВремяОкончанияСмены = " " + Прав(Строка(ВремяОкончанияСмены),8);
	//Иначе
		тВремяОкончанияСмены = Прав(Строка(ВремяОкончанияСмены),8);
	//КонецЕсли;
	Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
		тВремяНачалаСмены = " " + тВремяНачалаСмены;
	КонецЕсли;
	Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
		тВремяОкончанияСмены = " " + тВремяОкончанияСмены;
	КонецЕсли;
	//
	
	Объект.ДатаНачалаСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДата())), 10) + тВремяНачалаСмены);
	Если ВремяНачалаСмены > ВремяОкончанияСмены Тогда
		Объект.ДатаОкончанияСмены = Дата(Лев(Строка(КонецДня(ТекущаяДата())+1), 10) + тВремяОкончанияСмены);
	Иначе
		Объект.ДатаОкончанияСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДата())), 10) + тВремяОкончанияСмены);  		
	КонецЕсли;
	
	//Даты смен
	
КонецПроцедуры

&НаКлиенте
Процедура СменаПриИзменении(Элемент)
	СменаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Объект.ДатаСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПроверятьСотрудников() Тогда
		
		Отказ = Не СотрудникВыбран(); 
		Отказ = ПроверитьДатуКонтроляЗнанийСотрудников();
		
	КонецЕсли;	
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		Если ЗапрещенВводДокументов() Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик")
		И Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") 
			И Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") И ЭтоНСС() Тогда 			
			Для Каждого ТекСтр Из Объект.Сотрудники Цикл
				Если ТекСтр.Выбран Тогда
					ДокументПриемаСменыНСЦ = ПолучитьДокументприемаСменыНСЦ(ТекСтр.Сотрудник);
					Если ДокументПриемаСменыНСЦ = Неопределено Тогда
						ПоказатьПредупреждение(, "НСЦ: " + ТекСтр.Сотрудник + " не выполнил прием смены, исключите его из Вашего состава смены.");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 			
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ЭтоНсс()
	Возврат РольДоступна("НСС");
КонецФункции

&НаСервере
Функция ПолучитьДокументприемаСменыНСЦ(НСЦ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И АктивныеСмены.СтаршийСмены.ФизическоеЛицо = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", НСЦ);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СотрудникВыбран()
	
	СотрудникВыбран = Ложь;
	
	Для Каждого Стр Из Объект.Сотрудники Цикл
		Если Стр.Выбран Тогда
			СотрудникВыбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СотрудникВыбран Тогда
		ПоказатьПредупреждение(, "Необходимо выбрать Сотрудника!""");
	КонецЕсли;
	
	Возврат СотрудникВыбран;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДатуКонтроляЗнанийСотрудников()
	
	ОтказВЗаписи = Ложь;
	
	Для Каждого Стр Из Объект.Сотрудники Цикл
		Если Стр.Выбран И Стр.ДатаКонтроляЗнаний < ТекущаяДата() Тогда
			ОтказВЗаписи = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Дата следующей проверки знаний для сотрудника "+Стр.Сотрудник+" не актуальна!";
			Сообщение.Поле = "Сотрудники["+(Стр.НомерСтроки-1)+"].Сотрудник";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтказВЗаписи;
	
КонецФункции

&НаСервере
Функция ПроверятьСотрудников()
	
	Возврат Объект.ВидЗаписи.ЗаполнятьТЧСотрудников;
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
	Форма = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма); 
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = "Подбор сотрудников в Оперативный журнал";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() > 0 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Объект.Подразделение));
			Возврат;
		КонецЕсли;
		
		НовСтр = Объект.Сотрудники.Добавить();
		НовСтр.Сотрудник = ВыбранноеЗначение;
		НовСтр.Подразделение = ПолучитьПодразделениеСотрудника(ВыбранноеЗначение);
		НовСтр.Должность = ПолучитьДолжностьСотрудника(ВыбранноеЗначение);
		НовСтр.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(ВыбранноеЗначение);
		НовСтр.ВремяНачалаРаботы = ПолучитьВремяНачалаРаботы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусЗаписьОЖ()
	
	Возврат Перечисления.СтатусыОборудования.ЗаписьОЖ;
	
КонецФункции

&НаКлиенте
Процедура ОборудованиеКонтрольВыполненПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.СтатусАктуален = Не ТекДанные.КонтрольВыполнен;
		ТекДанные.ДатаОкончанияРемонтныхРабот = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеСтатусАктуаленПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если ТекДанные.СтатусАктуален Тогда
			Если Не ЗначениеЗаполнено(ТекДанные.ДатаВыходаИзСтроя) Тогда 
				ТекДанные.ДатаВыходаИзСтроя = ТекущаяДата();
			КонецЕсли;
			ТекДанные.ДатаОкончанияРемонтныхРабот = Неопределено;
		КонецЕсли;
		ТекДанные.КонтрольВыполнен = Не ТекДанные.СтатусАктуален;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.СтатусОборудования = ПолучитьСтатусЗаписьОЖ();
	КонецЕсли;
	
КонецПроцедуры

// ( fa 22.11.2017

&НаСервере
Функция ПроверитьПодразделениеФизлица(ФизЛицо)
	
	ТекПодразделение = ФизЛицо.Подразделение;
	ПроверкаПройдена = Ложь;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		
		Если ТекПодразделение = Объект.Подразделение Тогда
			ПроверкаПройдена = Истина;
			Прервать;
		КонецЕсли;
		
		ТекПодразделение = ТекПодразделение.Родитель;
		
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.Событие = ПредопределенноеЗначение("Справочник.События.РаспоряжениеВыполнено") Тогда 
	
		//Оповестить("ОбновитьРаспоряжениеВРаботе");
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.Событие = ПредопределенноеЗначение("Справочник.События.ОтданоРаспоряжение") Тогда 
	
		//Оповестить("ОбновитьРаспоряжения");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Просмотр(Команда)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекДанные.Оборудование);
		
		ОткрытьФорму("Справочник.Оборудование.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

// ) fa