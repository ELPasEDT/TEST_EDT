
//&НаКлиенте
//Процедура ДекорацияДокументыНажатие(Элемент)
//	
//	Видимость = Не Элементы.ДокументыДляОзнакомления.Видимость;
//	Если Видимость Тогда
//		Элементы.ДекорацияДокументы.Заголовок = "Документы для ознакомления (скрыть)";		
//	Иначе
//		Элементы.ДекорацияДокументы.Заголовок = "Документы для ознакомления (отобразить)";
//	КонецЕсли;
//	
//	Элементы.ДокументыДляОзнакомления.Видимость = Видимость;
//	
//КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//Копирование
	Если Объект.Ссылка.Пустая() И Не Параметры.ЗначениеКопирования.Пустая() Тогда
		Объект.Распоряжение = Неопределено;
		Объект.ПолученоОт = Неопределено;
		Объект.Чистовик = Ложь;
		Объект.Сотрудники.Очистить();
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	//Ввод на основании
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание) Тогда
		ДокументОснование = Параметры.Основание;
	КонецЕсли;
	
	//Заполнение
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Параметры.Основание) Тогда
	
		Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
		Объект.ДатаСобытия = ТекущаяДатаСеанса();
		Объект.СтаршийСмены = ПараметрыСеанса.ТекущийПользователь;
		Объект.ЭтоПерваяЗапись = ЭтоПерваяЗапись();
		
		СписокСотрудников = ПолучитьСписокСотрудников();
		Если СписокСотрудников.Количество() > 0 Тогда
			ДокументПриемаСмены = СписокСотрудников[0].ДокументПриемаСмены;
			ОтветственныйПриемаСмены = ДокументПриемаСмены.Ответственный;
			Если Не Объект.Событие = Справочники.События.СменуПринял Тогда
				Объект.Вахта = ДокументПриемаСмены.Вахта;
				Объект.Смена = ДокументПриемаСмены.Смена;
				//даты смены
				Объект.ДатаНачалаСмены = ДокументПриемаСмены.ДатаНачалаСмены;
				Объект.ДатаОкончанияСмены = ДокументПриемаСмены.ДатаОкончанияСмены;
				//даты смены
				Для Каждого ТекСтр Из СписокСотрудников Цикл
					НовСтр = Объект.Сотрудники.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
					Если Объект.Событие = Справочники.События.СменуСдал Тогда
						Если Не ЗначениеЗаполнено(НовСтр.ВремяОкончанияРаботы) Тогда
							НовСтр.ВремяОкончанияРаботы = Объект.Смена.ВремяОкончания;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла; 			
			КонецЕсли;
			Если Объект.Событие = Справочники.События.СменуСдал Тогда 				
				Объект.ДокументыДляОзнакомления.Загрузить(ДокументПриемаСмены.ДокументыДляОзнакомления.Выгрузить());
			КонецЕсли;  			
		КонецЕсли;
		
		//ВИ 20180606
		Если Объект.Событие = Справочники.События.СменуПринял Тогда
			ДокументПриемаПредыдущейСмены = ПолучитьДокументПриемаПредыдущейСмены();
			Если ЗначениеЗаполнено(ДокументПриемаПредыдущейСмены) Тогда
				//Заполняем чек- лист показателями предыдущей смены
				ЗаполнитьЧекЛистЗначениями(ДокументПриемаПредыдущейСмены);
				//Заполняем документы документами предыдущей смены
				ЗаполнитьДокументыДляОзнакомления(ДокументПриемаПредыдущейСмены);
				//20190201
				//Заполняем поле Смена
				ЗаполнитьПолеСмена(ДокументПриемаПредыдущейСмены.Смена);
				//20190201
			КонецЕсли;
		КонецЕсли;
		//ВИ 20180606
		
		Если Параметры.Свойство("ДокументЗакрытия") Тогда
			ЗаполнитьДокументСдачиСмены(Параметры.ДокументЗакрытия);			
		КонецЕсли;
		
		Если Параметры.Свойство("СозданАвтоматически") Тогда
			Объект.СозданАвтоматически = Параметры.СозданАвтоматически;
		КонецЕсли;
		
		Если Объект.Событие = Справочники.События.СменуСдал Тогда
			Для Каждого Стр Из Объект.Сотрудники Цикл
				Стр.Выбран = Истина;
			КонецЦикла;
			//Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиВремяНачалаРаботы.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиВыбран.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиДатаКонтроляЗнаний.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиДолжность.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиНомерСтроки.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиПодразделение.ТолькоПросмотр = Истина;
			Элементы.Сотрудники.ПодчиненныеЭлементы.СотрудникиСотрудник.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		//Если ЗначениеЗаполнено(Объект.Смена) Тогда
		//	СформироватьОписание();
		//Иначе
		//	Объект.Описание = "" + Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " " + Объект.Подразделение;
		//КонецЕсли;
		
	ИначеЕсли Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Параметры.Основание) Тогда
		
		СписокСотрудников = ПолучитьСписокСотрудников();
		Если СписокСотрудников.Количество() > 0 Тогда
			ДокументПриемаСмены = СписокСотрудников[0].ДокументПриемаСмены;
			ОтветственныйПриемаСмены = ДокументПриемаСмены.Ответственный;
			Объект.СтаршийСмены = ПараметрыСеанса.ТекущийПользователь;
			//Если ЗначениеЗаполнено(Объект.Смена) Тогда
			//	СформироватьОписание();
			//Иначе
			//	Объект.Описание = "" + Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " " + Объект.Подразделение;
			//КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Видимость/ доступность
	Если Объект.ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
	//	Элементы.ГруппаДокументы.Видимость = Истина;
	//Иначе
	//	Элементы.ГруппаЧекЛист.Видимость = Ложь;
		Элементы.СотрудникиВремяНачалаРаботы.Видимость = Ложь;
		Элементы.СотрудникиВремяОкончанияРаботы.Видимость = Ложь;
	КонецЕсли; 	
	
	Элементы.ВидЗаписи.ТолькоПросмотр = Объект.СозданАвтоматически;
	Элементы.Событие.ТолькоПросмотр = Объект.СозданАвтоматически;
	
	//Блок Распоряжений
	Если Объект.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС Тогда
		Если Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено Тогда
			Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	//Блок Распоряжений
	
	//Блок Обращений
	Если Объект.ВидЗаписи = Справочники.ВидыЗаписей.Обращение Тогда
		Если Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено Тогда
			Объект.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	//Блок Обращений
	  	
	/////////////////////**********  
	Элементы.ЗамечанияКонтролера.Видимость = ЗначениеЗаполнено(Объект.ЗамечанияИРаспоряжения);
	Элементы.Распоряжения.Видимость = Объект.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС;
	Элементы.Обращения.Видимость = Объект.ВидЗаписи = Справочники.ВидыЗаписей.Обращение;
	Элементы.СодержаниеЗаписи.Видимость = Не (Объект.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС ИЛИ ЗначениеЗаполнено(Объект.ЗамечанияИРаспоряжения) ИЛИ Объект.ВидЗаписи = Справочники.ВидыЗаписей.Обращение);
	
	Если Параметры.Свойство("ВидЗаписи") Тогда
		Объект.ВидЗаписи = Параметры.ВидЗаписи;
	КонецЕсли;
	Если Параметры.Свойство("Событие") Тогда
		Объект.Событие = Параметры.Событие;
	КонецЕсли;
	Если Параметры.Свойство("Комментарий") Тогда
		Объект.Комментарий = Параметры.Комментарий;
	КонецЕсли;
	
	ОбновитьРазрешениеНаПринудительноеЗавершениеСмены();	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.Чистовик Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользуетсяЭЦП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	
	///////////////////////////////////////////////////////////////////////////////
	// Проверим необходимость подписания.
	
	Если Не ИспользуетсяЭЦП Тогда
		Возврат;
	КонецЕсли;
	
	// Подписываем только сдачу смены.
	
	Если Объект.Событие <> Справочники.События.СменуСдал Тогда
		Возврат;
	КонецЕсли;
	
	// Доп. возможность вкл.выкл. ЭЦП для орг. единиц.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиИспользованияЭЦППоОрганизациямСрезПоследних.Использование КАК Использование
	|ИЗ
	|	РегистрСведений.НастройкиИспользованияЭЦППоОрганизациям.СрезПоследних(&Период, Организация = &Организация) КАК НастройкиИспользованияЭЦППоОрганизациямСрезПоследних");
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Организация", Объект.Подразделение.Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Использование Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Проверим наличие сертификата у пользователя.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
	|	//И СертификатыКлючейЭлектроннойПодписиИШифрования.Подписание";
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Проверим наличие уже подписанного фпйла.
	
	ИмяФайла = "ОтчетЗаСмену";
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперативныйЖурналПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОперативныйЖурналПрисоединенныеФайлы КАК ОперативныйЖурналПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ОперативныйЖурналПрисоединенныеФайлы.ПометкаУдаления
	|	И ОперативныйЖурналПрисоединенныеФайлы.Наименование = &Наименование
	|	И ОперативныйЖурналПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("Наименование", ИмяФайла);
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Формируем файл.
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(Объект.Ссылка);
	
	ТабДок = Документы.ОперативныйЖурнал.ПечатьКарточкиЗаписи(ОбъектыПечати, Неопределено);
	
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла + ".mxl";
	
	ТабДок.Записать(ПолноеИмяФайла);
	
	Файл = Новый Файл(ПолноеИмяФайла);
		
	//РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	АдресВременногоХранилищаТекста = "";
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Объект.Ссылка);
	ПараметрыФайла.Вставить("Автор",                       Объект.Ответственный);
	ПараметрыФайла.Вставить("ИмяБезРасширения",            "КарточкаЗаписи");
	ПараметрыФайла.Вставить("РасширениеБезТочки",          "mxl");
	ПараметрыФайла.Вставить("ГруппаФайлов",                Неопределено);
	ПараметрыФайла.Вставить("ВремяИзменения");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Файл.ПолучитьУниверсальноеВремяИзменения());
	
	ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(
		ПараметрыФайла,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста);
		
		
	УдалитьФайлы(ПолноеИмяФайла);
	УдалитьФайлы(ИмяКаталога);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРазрешениеНаПринудительноеЗавершениеСмены()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РазрешитьЗакрытиеПредыдущейСмены = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РазрешенияНаПринудительноеЗавершениеСмены.Разрешено КАК Разрешено
	|ИЗ
	|	РегистрСведений.РазрешенияНаПринудительноеЗавершениеСмены КАК РазрешенияНаПринудительноеЗавершениеСмены
	|ГДЕ
	|	РазрешенияНаПринудительноеЗавершениеСмены.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Объект.Подразделение.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		РазрешитьЗакрытиеПредыдущейСмены = Выборка.Разрешено;
	КонецЕсли;
	
КонецПроцедуры

//ВИ++ 20180606
&НаСервере
Функция ПолучитьДокументПриемаПредыдущейСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктивныеСменыСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
//Ви-- 20180606

&НаСервере
Процедура СформироватьОписание(Знач ДатаЗаписи)
	
	Если Не ЗначениеЗаполнено(Объект.Смена) Тогда
		Объект.Описание = "" + Формат(ДатаЗаписи, "ДЛФ=DDT") + " " + Объект.Подразделение;
		Возврат;
	КонецЕсли;
	
	ДатаЗаписи = Объект.Дата;
	
	Если ЗначениеЗаполнено(Объект.Вахта) И ЗначениеЗаполнено(Объект.Смена) Тогда
		
		Если стрДлина(Строка(Объект.Смена.ВремяНачала)) = 19 Тогда
			тВремяНачала = " " + Лев(Прав(Объект.Смена.ВремяНачала, 8), 5);
		Иначе
			тВремяНачала = " 0" + СокрЛП(Лев(Прав(Объект.Смена.ВремяНачала, 8), 5));
		КонецЕсли;	
		тВремяОкончания = Лев(Прав(Объект.Смена.ВремяОкончания, 8), 5);
		
		СменаПрописью = Формат(Объект.ДатаНачалаСмены, "ДФ=yyyy/MM/dd") + тВремяНачала + " - " + тВремяОкончания;
		
		Объект.Описание = "" + Формат(ДатаЗаписи, "ДЛФ=DDT") + " " + Объект.Подразделение + "        " + Объект.Вахта + "        " + Объект.Смена + "        " + СменаПрописью;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоПерваяЗапись()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АктивныеСмены.Регистратор) КАК КолЗаписей
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат[0].КолЗаписей = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыДляОзнакомления(ДокументПриемаСмены)
	
	//Объект.ДокументыДляОзнакомления.Загрузить(ДокументПриемаСмены.ДокументыДляОзнакомления.Выгрузить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперативныйЖурналДокументыДляОзнакомления.Документ КАК Документ
		|ИЗ
		|	Документ.ОперативныйЖурнал.ДокументыДляОзнакомления КАК ОперативныйЖурналДокументыДляОзнакомления
		|ГДЕ
		|	ОперативныйЖурналДокументыДляОзнакомления.КОзнакомлениюПринимающему
		|	И ОперативныйЖурналДокументыДляОзнакомления.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПриемаСмены);
	
	Объект.ДокументыДляОзнакомления.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолеСмена(Смена)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Смены.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Смены КАК Смены
		|ГДЕ
		|	НЕ Смены.Ссылка = &ПредыдущаяСмена
		|	И НЕ Смены.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПредыдущаяСмена", Смена);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Объект.Смена = Результат.Ссылка;
	КонецЕсли;
	
КонецПроцедуры  

&НаСервере
Функция ПолучитьСписокСотрудников()
	
	СтаршийСмены = ПараметрыСеанса.ТекущийПользователь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор,
		|	АктивныеСмены.Подразделение КАК Подразделение,
		|	АктивныеСмены.Смена КАК Смена,
		|	АктивныеСмены.СтаршийСмены КАК СтаршийСмены,
		|	АктивныеСмены.СменаОткрыта КАК СменаОткрыта
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение = &Подразделение
		|	И АктивныеСмены.СтаршийСмены = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_ДокументСменыСдачи
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОперативныйЖурналСотрудники.Сотрудник КАК Сотрудник,
		|	ОперативныйЖурналСотрудники.Должность КАК Должность,
		|	ОперативныйЖурналСотрудники.Подразделение КАК Подразделение,
		|	ОперативныйЖурналСотрудники.ВремяНачалаРаботы КАК ВремяНачалаРаботы,
		|	ОперативныйЖурналСотрудники.ВремяОкончанияРаботы КАК ВремяОкончанияРаботы,
		|	ОперативныйЖурналСотрудники.Ссылка КАК ДокументПриемаСмены,
		|	ОперативныйЖурналСотрудники.Сотрудник.ДатаКонтроляЗнаний КАК ДатаКонтроляЗнаний
		|ИЗ
		|	Документ.ОперативныйЖурнал.Сотрудники КАК ОперативныйЖурналСотрудники
		|ГДЕ
		|	ОперативныйЖурналСотрудники.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_ДокументСменыСдачи.Регистратор КАК Регистратор
		|			ИЗ
		|				ВТ_ДокументСменыСдачи КАК ВТ_ДокументСменыСдачи)
		|	И ОперативныйЖурналСотрудники.Выбран";
	
	Запрос.УстановитьПараметр("Подразделение", СтаршийСмены.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", СтаршийСмены); 	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ЗапрещенВводДокументов()  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", ПараметрыСеанса.ТекущийПользователь.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;  
	
КонецФункции

&НаСервере
Функция НеЗакрытаПредыдущаяСмена()  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Подразделение КАК Подразделение,
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И НЕ СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;  
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСдачиСмены(ДокументЗакрытия)
	
	Объект.ДокументЗакрытия = ДокументЗакрытия; 	
	
	Объект.ЧекЛист.Очистить();
	Для Каждого ТекСтр Из ДокументЗакрытия.ЧекЛист Цикл
		НовСтр = Объект.ЧекЛист.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
	КонецЦикла;
	
	//Объект.ДокументыДляОзнакомления.Загрузить(ДокументЗакрытия.ДокументыДляОзнакомления.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//проверка ввода на основании #324
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		РаспоряжениеПроведено = ВыполнитьПроверкуСервер();
		Если Не РаспоряжениеПроведено Тогда
			ПоказатьПредупреждение(, "Сначала нужно ознакомиться с Распоряжением (провести документ с галкой Чистовик)!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//#324
	
	ВидЗаписиПередачаСмены = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены");
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ФормаОснования = ПолучитьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", Новый Структура("Ключ", ДокументОснование));
		Если ФормаОснования.Открыта() Тогда
			ФормаОснования.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	//20181108
	Если Объект.Ссылка.Пустая() И Не Объект.ВидЗаписи = ВидЗаписиПередачаСмены Тогда
		Если Не ЗначениеЗаполнено(ДокументПриемаСмены) Тогда
			ПоказатьПредупреждение(, "Сначала нужно принять смену!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//20181108
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаСобытия = ТекущаяДата();
		Объект.Дата = Объект.ДатаСобытия;
		ВремяСобытия = ПолучитьВремяСобытия(Объект.ДатаСобытия);
	КонецЕсли;
	СформироватьОписание(ТекущаяДата());
	
	//Если Объект.Ссылка.Пустая() Тогда//И Не Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял")
	//	Если ЭтоПерваяСмена() И Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") Тогда
	//	Иначе
	//		Если ЗапрещенВводДокументов() Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
	//			Возврат;
	//		КонецЕсли;
	//		Если Не ЗначениеЗаполнено(ОтветственныйПриемаСмены) Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Вы уже выполнили принятие смены!");
	//			Возврат;
	//		КонецЕсли;
	//		Если Не ОтветственныйПриемаСмены = Объект.СтаршийСмены Тогда
	//			Отказ = Истина;
	//			ПоказатьПредупреждение(, "Текущий пользователь не совпадает с Ответственным из последнего документа принятия смены!");
	//			Возврат;
	//		КонецЕсли;  			
	//	КонецЕсли;
	//КонецЕсли;
	
	//Новый документ
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		Если Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") Тогда
			Если ЭтоПерваяСмена() Тогда
			Иначе
				Если Не ЗапрещенВводДокументов() И Объект.СтаршийСмены = ПолучитьСтаршегоТекущейСмены() Тогда
					Отказ = Истина;
					ПоказатьПредупреждение(, "Вы уже выполнили принятие смены!");
					Возврат;
				КонецЕсли;
				//Принятие смены по этому же подразделению другим пользователем
				//Если СменаПоПодразделениюПринятаДругимПользователем() Тогда
				//	Отказ = Истина;
				//	ПоказатьПредупреждение(, "По данному подразделению уже выполнено Принятие смены!");
				//	Возврат;					
				//КонецЕсли;					
			КонецЕсли;
		Иначе
			Если ЗапрещенВводДокументов() Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
				Возврат;
			КонецЕсли;
			Если Объект.СтаршийСмены = СтаршийПредыдущейСмены() Тогда
			Иначе
				Если Не Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуСдал") И НеЗакрытаПредыдущаяСмена() Тогда
					
					Отказ = Истина;
					
					Если РазрешитьЗакрытиеПредыдущейСмены Тогда
						Оповещение = Новый ОписаниеОповещения("ОтветНаВопросОЗакрытииСмены", ЭтотОбъект);
						ПоказатьВопрос(Оповещение, "Не закрыта предыдущая смена! Закрыть принудительно?", РежимДиалогаВопрос.ДаНет);
					Иначе
						ПоказатьПредупреждение(, "Сначала нужно Сдать предыдущую смену!");
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если Не ОтветственныйПриемаСмены = Объект.СтаршийСмены Тогда
				Отказ = Истина;
				ПоказатьПредупреждение(, "Текущий пользователь не совпадает с Ответственным из последнего документа принятия смены!");
				Возврат;
			КонецЕсли;
		КонецЕсли; 		
	КонецЕсли;
	
	Если Объект.Проведен ИЛИ 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен") Тогда
		//ЭтаФорма.ТолькоПросмотр = Истина;
		УстановитьТолькоПросмотрЭлементовФормыКромеСписка();
	//ВИ++ 20180917	
	//ИначеЕсли Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуСдал") Тогда
	//	Элементы.ГруппаЧекЛист.ТолькоПросмотр = Истина;
	//ВИ-- 20180917
	//Элементы.ГруппаЖурналы.ТолькоПросмотр = Истина; // ФА -
	КонецЕсли;	
	
	//УстановитьВидимостьПоВидуЗаписи();
	УстановитьВидимостьПоСтатусу(); 
	
	/////////////////*************
	//Элементы.Оборудование.Видимость = Ложь;
	//Элементы.Сотрудники.Видимость = Ложь;
	ЭтоПередачаСмены = Объект.ВидЗаписи = ВидЗаписиПередачаСмены;
	Если Не Объект.Ссылка.Пустая() Тогда
		РазвернутьЗаполненныеТЧ(ЭтоПередачаСмены);
	КонецЕсли;
	
	//ЭтоПередачаСмены = Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"); 
	//Элементы.Группа2.Видимость = ЭтоПередачаСмены И Объект.Ссылка.Пустая();
	//Элементы.ДекорацияДокументы.Видимость = ЭтоПередачаСмены;
	Элементы.ГруппаДокументыДляОзнакомления.Видимость = ЭтоПередачаСмены;
	//Элементы.ДекорацияЧекЛист.Видимость = ЭтоПередачаСмены;
	Элементы.ГруппаЧекЛист.Видимость = ЭтоПередачаСмены;
	//Элементы.Страницы.Видимость = Ложь;
	Элементы.ГруппаСобытие.Видимость = Не ЭтоПередачаСмены И (Не Объект.Чистовик ИЛИ Объект.Ссылка.Пустая());
	Элементы.ПолученоОт.Видимость = ЗначениеЗаполнено(Объект.ПолученоОт);
	//
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		//РазвернутьЗаполненныеТЧ();
		СформироватьЗаголовок();
	КонецЕсли;  
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.РаспоряжениеНСС") И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Черновик") Тогда
		УстановитьДоступностьТолькоПоляСтатус();
	КонецЕсли;
	//Обращения
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.Обращение") И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Черновик") Тогда
		УстановитьДоступностьТолькоПоляСтатус();
	КонецЕсли;
	
	Элементы.ФормаСоздатьНаОсновании.Видимость = Не Объект.ВидЗаписи = ВидЗаписиПередачаСмены;
	Элементы.СообщитьНСС.Видимость = ОповещениеНСС();
	
	//доступность кнопки Оповещение НСС
	Если Не Объект.Ссылка.Пустая() И Объект.Чистовик И ОповещениеНСС() Тогда
		Элементы.СообщитьНСС.Доступность = НужноОтправитьОповещение();
	Иначе 
		Элементы.СообщитьНСС.Доступность = Ложь;
	КонецЕсли;	
	
	ОбновитьЗаголовокСтраницы("Оборудование");
	ОбновитьЗаголовокСтраницы("Сотрудники");
	//ОбновитьЗаголовокСтраницы("ЧекЛист");
	//ОбновитьЗаголовокСтраницы("ДокументыДляОзнакомления");
	
	//Шаблоны
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ВыборШаблона();
	КонецЕсли;
	
	Если Объект.ВидЗаписи = ВидЗаписиПередачаСмены Тогда
		ЗаполнитьНаСервере();
		ОбновитьЗаголовокСтраницы("Оборудование");
		ЗаполнитьОписаниеОборудованияСервер();
	КонецЕсли;
	
	УстановитьДоступностьдатыСобытия();
	ТекущаяДатаКлиент = ТекущаяДата();
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроверкуСервер()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Объект.Распоряжение.Чистовик;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьдатыСобытия()
	
	Элементы.ДатаСобытия.ТолькоПросмотр = (Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"));
	Элементы.ДатаСобытия.КнопкаВыбора = Не Элементы.ДатаСобытия.ТолькоПросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросОЗакрытииСмены(Ответ, ДопПарамтеры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПараметрыЗавершеннойСмены = ЗавершитьРанееОткрытуюСмну();
		
		ТекстОписание = "";
		
		Если ПараметрыЗавершеннойСмены.Успешно Тогда
			ТекстОписание = "Выполнено заврешнение смены:
				|	%1
				|	%2
				|	%3";
			ТекстОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОписание,
				ПараметрыЗавершеннойСмены.Смена,
				ПараметрыЗавершеннойСмены.Вахта,
				ПараметрыЗавершеннойСмены.СтаршийСмены);
		Иначе
			ТекстОписание = "Заврешнение смены не выполнено!:
				|	%1";
			ТекстОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОписание,
				ПараметрыЗавершеннойСмены.ОписаниеОшибки);
		КонецЕсли;
		
		ПоказатьПредупреждение(,ТекстОписание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьРанееОткрытуюСмну()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Успешно,Смена,Вахта,СтаршийСмены,ОписаниеОшибки", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Подразделение КАК Подразделение,
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.Регистратор.Вахта КАК Вахта,
	|	АктивныеСменыСрезПоследних.Регистратор КАК Регистратор,
	|	АктивныеСменыСрезПоследних.Смена.ВремяНачала КАК ВремяНачалаСмены,
	|	АктивныеСменыСрезПоследних.Смена.ВремяОкончания КАК ВремяОкончанияСмены
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И НЕ СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта");
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		ДокЗаурСмены = Документы.ОперативныйЖурнал.СоздатьДокумент();
		ДокЗаурСмены.Дата = ТекущаяДатаСеанса();
		ДокЗаурСмены.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены");
		ДокЗаурСмены.Событие = ПредопределенноеЗначение("Справочник.События.СменуСдал");
	    ДокЗаурСмены.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик");
		ДокЗаурСмены.ДокументЗакрытия = Выборка.Регистратор;
		ДокЗаурСмены.Подразделение = Объект.Подразделение;
		ДокЗаурСмены.Смена        = Выборка.Смена;
		ДокЗаурСмены.Вахта        = Выборка.Вахта;
		ДокЗаурСмены.СтаршийСмены = Выборка.СтаршийСмены;
		//20190110
		ДокЗаурСмены.Ответственный = Выборка.СтаршийСмены;
		ДокЗаурСмены.ДатаСобытия = ТекущаяДатаСеанса();
		//даты начала и окончания смены
		ВремяНачалаСмены = Выборка.ВремяНачалаСмены;
		ВремяОкончанияСмены = Выборка.ВремяОкончанияСмены;
		тВремяНачалаСмены = Прав(Строка(ВремяНачалаСмены),8);
		тВремяОкончанияСмены = Прав(Строка(ВремяОкончанияСмены),8);
		Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
			тВремяНачалаСмены = " " + тВремяНачалаСмены;
		КонецЕсли;
		Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
			тВремяОкончанияСмены = " " + тВремяОкончанияСмены;
		КонецЕсли;
		//даты начала и окончания смены
		ДокЗаурСмены.ДатаНачалаСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДатаСеанса())), 10) + тВремяНачалаСмены);
		Если ВремяНачалаСмены > ВремяОкончанияСмены Тогда
			ДокЗаурСмены.ДатаОкончанияСмены = Дата(Лев(Строка(КонецДня(ТекущаяДатаСеанса())+1), 10) + тВремяОкончанияСмены);
		Иначе
			ДокЗаурСмены.ДатаОкончанияСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДатаСеанса())), 10) + тВремяОкончанияСмены);  		
		КонецЕсли;
		ДокЗаурСмены.Комментарий = "Принудительное (автоматическое) закрытие смены";		
		//20190110
		Попытка
			ДокЗаурСмены.Записать(РежимЗаписиДокумента.Проведение);
			Результат.Успешно = Истина;
		Исключение
			Результат.ОписаниеОшибки = ОписаниеОшибки();
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НужноОтправитьОповещение()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперативныйЖурнал.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	ОперативныйЖурнал.Оповещение
		|	И ОперативныйЖурнал.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
Функция ОповещениеНСС()
	
	Возврат Объект.Событие.ОповещениеНСС;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьТолькоПоляСтатус()
	
	Для Каждого ТекЭлемент Из Элементы Цикл  		
		Если ТекЭлемент.Имя = "Группа1" ИЛИ ТекЭлемент.Имя = "Чистовик" Тогда
		ИначеЕсли ТекЭлемент.Имя = "СотрудникиПодбор" ИЛИ ТекЭлемент.Имя = "ОборудованиеЗаполнить" Тогда
			ТекЭлемент.Доступность = Ложь;
		Иначе
			Попытка
				ТекЭлемент.ТолькоПросмотр = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовок()
	
	ЭтаФорма.АвтоЗаголовок = Ложь;
	ЭтаФорма.Заголовок = "Запись ОЖ №" + Формат(Число(Объект.Номер),"ЧГ=") + " от " + Формат(Объект.Дата, "ДФ=yyyy/MM/dd") + "     " + Объект.ВидЗаписи + " /" + Объект.Событие;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЗаполненныеТЧ(ЭтоПередачаСмены)
	
	Элементы.Сотрудники.Видимость = ЗначениеЗаполнено(Объект.Сотрудники);
	Элементы.Оборудование.Видимость = ЭтоПередачаСмены ИЛИ ЗначениеЗаполнено(Объект.Оборудование);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТолькоПросмотрЭлементовФормыКромеСписка()
	
	Для Каждого ЭлФормы Из ЭтаФорма.Элементы Цикл
		Если ТипЗнч(ЭлФормы) = Тип("ДекорацияФормы") ИЛИ 
			ТипЗнч(ЭлФормы) = Тип("ГруппаФормы")
			Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлФормы.Имя = "ГруппаОборудование" ИЛИ ЭлФормы.Имя = "ОборудованиеПросмотр" ИЛИ ЭлФормы.Имя = "ФормаДокументОперативныйЖурналСоздатьНаОсновании" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ЭлФормы.ТолькоПросмотр = Истина;
		Исключение
			ЭлФормы.Доступность = Ложь;
		КонецПопытки;
	КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция СтаршийПредыдущейСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
		|	АктивныеСменыСрезПоследних.Период КАК Период,
		|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СтаршийСмены;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтаршегоТекущейСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", Объект.СтаршийСмены);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.СтаршийСмены;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СменаПоПодразделениюПринятаДругимПользователем()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И НЕ СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", Объект.СтаршийСмены);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоПерваяСмена()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АктивныеСменыСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СотрудникиПриИзменении(Элемент)
	
	ТекДанные = Элементы.Сотрудники.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник)).Количество() > 1 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			НомерСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник))[1].НомерСтроки;
			Объект.Сотрудники.Удалить(НомерСтроки-1);
			Возврат;
		КонецЕсли;
		
		ТекДанные.Подразделение = ПолучитьПодразделениеСотрудника(ТекДанные.Сотрудник);
		ТекДанные.Должность = ПолучитьДолжностьСотрудника(ТекДанные.Сотрудник);
		ТекДанные.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(ТекДанные.Сотрудник);
		Если Не ЗначениеЗаполнено(ТекДанные.ВремяНачалаРаботы) Тогда
			ТекДанные.ВремяНачалаРаботы = ПолучитьВремяНачалаРаботы();
		КонецЕсли;
	КонецЕсли;
	ОбновитьЗаголовокСтраницы("Сотрудники");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяНачалаРаботы()
	
	Возврат Объект.Смена.ВремяНачала;
	
КонецФункции

&НаСервере
Функция ПолучитьПодразделениеСотрудника(Сотрудник)
	
	Возврат Сотрудник.Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьДолжностьСотрудника(Сотрудник)
	
	Возврат Сотрудник.Должность;
	
КонецФункции

&НаСервере
Функция ПолучитьДатуКонтроляЗнанийСотрудника(Сотрудник)
	
	Возврат Сотрудник.ДатаКонтроляЗнаний;
	
КонецФункции

&НаКлиенте
Процедура СотрудникиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
    СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.мФормаВыбораПростая", ПараметрыФормы, Элемент);
 
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСотрудник = ВыбранноеЗначение;
	
	Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Объект.Подразделение));
		ТекСотрудник = Неопределено;
	КонецЕсли;
	
	Если СотрудникУволен(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, "Данный сотрудник уволен!");
		ТекСотрудник = Неопределено;
	КонецЕсли;
	
	Элемент = ТекСотрудник;
	
КонецПроцедуры

&НаСервере
Функция СотрудникУволен(Сотрудник)
	
	Возврат Сотрудник.Уволен;
	
КонецФункции

&НаСервере
Функция ПолучитьРодителя(ЭлементПоиска)
	
	Если ТипЗнч(ЭлементПоиска) = Тип("СправочникСсылка.Подразделения") Тогда 	
		ПодразделениеРодитель = ЭлементПоиска;
	ИначеЕсли ТипЗнч(ЭлементПоиска) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 	
		ПодразделениеРодитель = ЭлементПоиска.Подразделение;
	КонецЕсли; 
	
	Пока НЕ ПодразделениеРодитель.Родитель.Пустая() Цикл
		ПодразделениеРодитель = ПодразделениеРодитель.Родитель;	
	КонецЦикла;
	
	Возврат ПодразделениеРодитель;

КонецФункции  

&НаКлиенте
Функция ПолучитьНастройкиОткрытияФормыВыбораВидаЗаписи() Экспорт
	
	Настройки = Новый НастройкиКомпоновкиДанных;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"));
	Список.Добавить(ПредопределенноеЗначение("Справочник.ВидыЗаписей.РаспоряжениеНСС"));
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
    ЭлементНастройки.ПравоеЗначение = Список;//ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены");
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	//20180412
	//ПодразделениеНСС = ПолучитьПодразделениеНСС(Объект.Подразделение);
	//Организация = ПолучитьОрганизацию(ПодразделениеНСС);
	//ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементНастройки.Использование = Истина;
	//ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	//ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
	//ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Процедура ВидЗаписиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = ПолучитьНастройкиОткрытияФормыВыбораВидаЗаписи(); 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("Заголовок", "Виды записей");
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	ОткрытьФорму("Справочник.ВидыЗаписей.Форма.ФормаВыбораВидыЗаписи", ПараметрыФормы, Элемент);  	
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьОрганизацию(ПодразделениеНСС)
	
	Возврат ПодразделениеНСС.Организация;
	
КонецФункции

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ЗаполнитьЧекЛист();
	ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Объект.ЧекЛист.Очистить();
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьСписокСобытий();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСобытий(ВидЗаписи = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВидЗаписи = Неопределено Тогда
		ВидЗаписи = Объект.ВидЗаписи;
	КонецЕсли;
	
	СписокСобытий = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВидыЗаписейСобытияПоПодразделениям.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Документ
		|ИЗ
		|	РегистрСведений.ВидыЗаписейСобытияПоПодразделениям КАК ВидыЗаписейСобытияПоПодразделениям
		|ГДЕ
		|	ВидыЗаписейСобытияПоПодразделениям.Подразделение = &Подразделение
		|	И ВидыЗаписейСобытияПоПодразделениям.ВидЗаписи = &ВидЗаписи
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыЗаписейСобытияПоПодразделениям.Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакреплениеВидаЗаписиИСобытийЗаПодразделениемСписокСобытий.Событие КАК Событие
		|ИЗ
		|	Документ.ЗакреплениеВидаЗаписиИСобытийЗаПодразделением.СписокСобытий КАК ЗакреплениеВидаЗаписиИСобытийЗаПодразделениемСписокСобытий
		|ГДЕ
		|	ЗакреплениеВидаЗаписиИСобытийЗаПодразделениемСписокСобытий.Ссылка.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Документ.Регистратор КАК Регистратор
		|			ИЗ
		|				ВТ_Документ КАК ВТ_Документ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗакреплениеВидаЗаписиИСобытийЗаПодразделениемСписокСобытий.Порядок";
	
	Запрос.УстановитьПараметр("ВидЗаписи", ВидЗаписи);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);  	
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокСобытий.Добавить(Результат.Событие);
		
	КонецЦикла;
	
	Возврат СписокСобытий;
	
КонецФункции

&НаКлиенте
Процедура ВидЗаписиПриИзменении(Элемент)
	
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") Тогда
		Объект.ВидЗаписи = Неопределено;
	КонецЕсли; 
	
	Если Не ВидЗаписиРазрешен() Тогда
		Объект.ВидЗаписи = Неопределено;
		Элемент = Неопределено;
	КонецЕсли;
	
	//УстановитьВидимостьПоВидуЗаписи();
	
	Если ЗначениеЗаполнено(Объект.ВидЗаписи) Тогда
		Объект.Событие = ПолучитьСобытиеПоУмолчанию();
		Элементы.СообщитьНСС.Видимость = ОповещениеНСС();
		ВыборШаблона();
	Иначе
		Объект.Событие = Неопределено;
		Элементы.СообщитьНСС.Видимость = Ложь;
	КонецЕсли;  	
	
КонецПроцедуры

&НаСервере
Функция ВидЗаписиРазрешен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ВидыЗаписейСобытияПоПодразделениям.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И ВидЗаписи = &ВидЗаписи) КАК ВидыЗаписейСобытияПоПодразделениямСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЗаписи", Объект.ВидЗаписи);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Следующий();
	
КонецФункции

&НаСервере
Функция СобытиеРазрешено()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ВидыЗаписейСобытияПоПодразделениям.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И ВидЗаписи = &ВидЗаписи
		|				И Событие = &Событие) КАК ВидыЗаписейСобытияПоПодразделениямСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЗаписи", Объект.ВидЗаписи);
	Запрос.УстановитьПараметр("Событие", Объект.Событие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Возврат Результат.Следующий();
	
КонецФункции

&НаСервере
Функция ПолучитьСобытиеПоУмолчанию()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЗаписейСобытияПоПодразделениямСрезПоследних.Событие КАК Событие
		|ИЗ
		|	РегистрСведений.ВидыЗаписейСобытияПоПодразделениям.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И ВидЗаписи = &ВидЗаписи
		|				И СобытиеПоУмолчанию) КАК ВидыЗаписейСобытияПоПодразделениямСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидЗаписи", Объект.ВидЗаписи);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Событие = Результат.Событие;
	Иначе
		Событие = Неопределено;
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаСервере()  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегСостояниеОборудования.Оборудование КАК Оборудование,
		|	РегСостояниеОборудования.Период КАК Период,
		|	РегСостояниеОборудования.СостояниеОборудования КАК СостояниеОборудования,
		|	РегСостояниеОборудования.СтатусОборудования КАК СтатусОборудования
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.СостояниеОборудования.СрезПоследних(, Подразделение = &Подразделение) КАК РегСостояниеОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Регистр.Оборудование КАК Оборудование
		|ПОМЕСТИТЬ ВТ_Оборудование
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период,
		|	ВТ_Регистр.Оборудование КАК Оборудование
		|ПОМЕСТИТЬ ВТ_ПоследняяЗапись
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Регистр.Оборудование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Оборудование КАК Оборудование,
		|	ВТ_Регистр.СостояниеОборудования КАК СостояниеОборудования,
		|	ВТ_Регистр.СтатусОборудования КАК СтатусОборудования
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗапись КАК ВТ_ПоследняяЗапись
		|		ПО ВТ_Регистр.Оборудование = ВТ_ПоследняяЗапись.Оборудование
		|			И ВТ_Регистр.Период = ВТ_ПоследняяЗапись.Период";
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	СостояниеОборудованияСрезПоследних.Оборудование КАК Оборудование,
	//	|	СостояниеОборудованияСрезПоследних.СтатусОборудования КАК СтатусОборудования,
	//	|	СостояниеОборудованияСрезПоследних.СтатусАктуален КАК СтатусАктуален,
	//	|	СостояниеОборудованияСрезПоследних.Оборудование.ДиспетчерскоеНаименование КАК ДиспетчерскоеНаименование
	//	|ПОМЕСТИТЬ ВТ_Состояние
	//	|ИЗ
	//	|	РегистрСведений.СостояниеОборудования.СрезПоследних(, Подразделение = &Подразделение) КАК СостояниеОборудованияСрезПоследних
	//	|ГДЕ
	//	|	СостояниеОборудованияСрезПоследних.СтатусАктуален
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОборудованиеНаКонтролеСрезПоследних.Оборудование КАК Оборудование,
	//	|	ОборудованиеНаКонтролеСрезПоследних.ДатаВыходаИзСтроя КАК ДатаВыходаИзСтроя,
	//	|	ОборудованиеНаКонтролеСрезПоследних.СтатусАктуален КАК СтатусАктуален
	//	|ПОМЕСТИТЬ ВТ_Неисправность
	//	|ИЗ
	//	|	РегистрСведений.ОборудованиеНаКонтроле.СрезПоследних(, ) КАК ОборудованиеНаКонтролеСрезПоследних
	//	|ГДЕ
	//	|	ОборудованиеНаКонтролеСрезПоследних.Подразделение = &Подразделение
	//	|	И ОборудованиеНаКонтролеСрезПоследних.ДатаОкончанияРемонтныхРабот = ДАТАВРЕМЯ(1, 1, 1)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ОборудованиеНаКонтролеСрезПоследних.Оборудование,
	//	|	ОборудованиеНаКонтролеСрезПоследних.ДатаВыходаИзСтроя,
	//	|	ОборудованиеНаКонтролеСрезПоследних.СтатусАктуален
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Состояние.Оборудование КАК Оборудование,
	//	|	ВТ_Состояние.СтатусОборудования КАК СтатусОборудования,
	//	|	ВТ_Неисправность.СтатусАктуален КАК СтатусАктуален,
	//	|	ВТ_Состояние.ДиспетчерскоеНаименование КАК ДиспетчерскоеНаименование,
	//	|	ВТ_Неисправность.ДатаВыходаИзСтроя КАК ДатаВыходаИзСтроя
	//	|ИЗ
	//	|	ВТ_Состояние КАК ВТ_Состояние
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Неисправность КАК ВТ_Неисправность
	//	|		ПО ВТ_Состояние.Оборудование = ВТ_Неисправность.Оборудование";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение); 	
	
    Объект.Оборудование.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьНаСервере();
	ОбновитьЗаголовокСтраницы("Оборудование");
КонецПроцедуры

&НаКлиенте
Процедура ВидЗаписиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
 //   СтандартнаяОбработка = Ложь;
 //   
 //   Настройки = Новый НастройкиКомпоновкиДанных;
 //
 //   ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
 //   ЭлементНастройки.Использование = Истина;
 //   ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
 //   ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
 //   ЭлементНастройки.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен");
 //   ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
 //    
 //   ПараметрыФормы = Новый Структура;
 //   ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
 //   
 //   ОткрытьФорму("Перечисление.СтатусыДокументаОперативногоЖурнала.ФормаВыбора", ПараметрыФормы, Элемент); 
 	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
	
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Черновик"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик"));
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементНастройки.ПравоеЗначение = Список;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
	
	ОткрытьФорму("Перечисление.СтатусыДокументаОперативногоЖурнала.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоВидуЗаписи()
	
	СтруктураФлагов = ПолучитьСтруктуруФлаговСервер();
	
	Если СтруктураФлагов.ЗаполнятьТЧСотрудников Тогда
		Элементы.ГруппаСотрудники.Видимость = Истина;
	Иначе
		Элементы.ГруппаСотрудники.Видимость = Ложь;
	КонецЕсли;
	
	Если СтруктураФлагов.ЗаполнятьТЧОборудования Тогда
		Элементы.ГруппаОборудование.Видимость = Истина;
	Иначе
		Элементы.ГруппаОборудование.Видимость = Ложь;
	КонецЕсли;
	
	//Если Не Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") Тогда
	//	Элементы.Вахта.ТолькоПросмотр = Истина;
	//	Элементы.Смена.ТолькоПросмотр = Истина;
	//Иначе
	//	Элементы.Вахта.ТолькоПросмотр = Ложь;
	//	Элементы.Смена.ТолькоПросмотр = Ложь;
	//КонецЕсли;
	
	//Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.РаспоряжениеНСС") Тогда
	//	Элементы.ПолученоОт.Видимость = Истина;
	//	Элементы.ПолученоОт.ТолькоПросмотр = Истина;
	//Иначе
	//	Элементы.ПолученоОт.Видимость = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПоСтатусу()
	
	ВидимостьКомментарияРаспоряжения = Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик");
	
	Если Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") И Объект.Ссылка.Пустая() Тогда
		Элементы.Вахта.ТолькоПросмотр = Ложь;
		Элементы.Смена.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.Вахта.ТолькоПросмотр = Истина;
		Элементы.Смена.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	//Элементы.Комментарий.Видимость = ВидимостьКомментарияРаспоряжения;
	//Элементы.ЗамечанияИРаспоряжения.Видимость = ВидимостьКомментарияРаспоряжения;
	//Элементы.ГруппаКонтролер.Видимость = ВидимостьКомментарияРаспоряжения;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФлаговСервер()
	
	СтруктураФлагов = Новый Структура;
	СтруктураФлагов.Вставить("ЗаполнятьТЧСотрудников", Объект.ВидЗаписи.ЗаполнятьТЧСотрудников);
	СтруктураФлагов.Вставить("ЗаполнятьТЧОборудования", Объект.ВидЗаписи.ЗаполнятьТЧОборудования);
	//СтруктураФлагов.Вставить("СобытиеПоУмолчанию", Объект.ВидЗаписи.СобытиеПоУмолчанию);
	
	Возврат СтруктураФлагов;
	
КонецФункции

&НаКлиенте
Процедура ВахтаПриИзменении(Элемент)
	
	//Если Объект.Сотрудники.Количество() > 0 Тогда
	//	ПоказатьВопрос(Новый ОписаниеОповещения("ВахтаПриИзмененииЗавершение", ЭтотОбъект), "Табличная часть ответственных не пустая. Перезаполнить ответственных?",РежимДиалогаВопрос.ДаНет);
	//КонецЕсли;
	ПриИзмененииВахтыСервер();
	
	//Элементы.Сотрудники.Видимость = Истина;
	//Элементы.ДекорацияСотрудники.Заголовок = "Сотрудники (скрыть)";
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВахтыСервер()
	
	Объект.Сотрудники.Очистить(); 	
	
	Состав = ОперативныйЖурнал.ПолучитьСоставСмены(Объект.ДатаСобытия, Объект.Подразделение, Объект.Вахта);
	Для Каждого Стр Из Состав Цикл
		НовСтр = Объект.Сотрудники.Добавить();
		НовСтр.Сотрудник = Стр.Сотрудник;
		НовСтр.Подразделение = ПолучитьПодразделениеСотрудника(НовСтр.Сотрудник);
		НовСтр.Должность = ПолучитьДолжностьСотрудника(НовСтр.Сотрудник);
		НовСтр.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(НовСтр.Сотрудник);
	КонецЦикла;
	
КонецПроцедуры
	
//&НаКлиенте
//Процедура ВахтаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
//	
//	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
//		Объект.Вахта = Неопределено;
//		Возврат;		
//	КонецЕсли;
//	
//	ПриИзмененииВахтыСервер();
//	
//КонецПроцедуры	

&НаСервере
Процедура СменаПриИзмененииНаСервере()
	
	ВремяНачалаСмены = Объект.Смена.ВремяНачала;
	ВремяОкончанияСмены = Объект.Смена.ВремяОкончания;
	
	Для Каждого ТекСтр Из Объект.Сотрудники Цикл
		ТекСтр.ВремяНачалаРаботы = ВремяНачалаСмены;
		//ТекСтр.ВремяОкончанияРаботы = ВремяОкончанияСмены;
	КонецЦикла;
	
	//Даты смен
	//Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
	//	тВремяНачалаСмены = " " + Прав(Строка(ВремяНачалаСмены),8);
	//Иначе
	//	тВремяНачалаСмены = Прав(Строка(ВремяНачалаСмены),8);
	//КонецЕсли;
	//Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
	//	тВремяОкончанияСмены = " " + Прав(Строка(ВремяОкончанияСмены),8);
	//Иначе
	//	тВремяОкончанияСмены = Прав(Строка(ВремяОкончанияСмены),8);
	//КонецЕсли;
	//
	//Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
	//	тВремяНачалаСмены = " " + Прав(Строка(ВремяНачалаСмены),8);
	//Иначе
		тВремяНачалаСмены = Прав(Строка(ВремяНачалаСмены),8);
	//КонецЕсли;
	//Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
	//	тВремяОкончанияСмены = " " + Прав(Строка(ВремяОкончанияСмены),8);
	//Иначе
		тВремяОкончанияСмены = Прав(Строка(ВремяОкончанияСмены),8);
	//КонецЕсли;
	Если стрДлина(Строка(ВремяНачалаСмены)) = 19 Тогда
		тВремяНачалаСмены = " " + тВремяНачалаСмены;
	КонецЕсли;
	Если стрДлина(Строка(ВремяОкончанияСмены)) = 19 Тогда
		тВремяОкончанияСмены = " " + тВремяОкончанияСмены;
	КонецЕсли;
	//
	
	Объект.ДатаНачалаСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДатаСеанса())), 10) + тВремяНачалаСмены);
	Если ВремяНачалаСмены > ВремяОкончанияСмены Тогда
		Объект.ДатаОкончанияСмены = Дата(Лев(Строка(КонецДня(ТекущаяДатаСеанса())+1), 10) + тВремяОкончанияСмены);
	Иначе
		Объект.ДатаОкончанияСмены = Дата(Лев(Строка(НачалоДня(ТекущаяДатаСеанса())), 10) + тВремяОкончанияСмены);  		
	КонецЕсли;
	
	//Даты смен
	
КонецПроцедуры

&НаКлиенте
Процедура СменаПриИзменении(Элемент)
	СменаПриИзмененииНаСервере();
	СформироватьОписание(ТекущаяДата());
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Объект.ДатаСобытия = ТекущаяДата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Объект.ДатаСобытия = НачалоДня(Объект.ДатаСобытия) + (ВремяСобытия - '00010101');
	
	Если ПроверятьСотрудников() Тогда
		
		Отказ = Не СотрудникВыбран() ИЛИ ПроверитьДатуКонтроляЗнанийСотрудников(); 
		
	КонецЕсли;	
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		Если ЗапрещенВводДокументов() Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик")
		И Объект.ВидЗаписи = ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены") 
			И Объект.Событие = ПредопределенноеЗначение("Справочник.События.СменуПринял") И ЭтоНСС() Тогда 			
			Для Каждого ТекСтр Из Объект.Сотрудники Цикл
				Если ТекСтр.Выбран И Не ТекСтр.Сотрудник = ПолучитьТекущегоСотрудника() Тогда
					ДокументПриемаСменыНСЦ = ПолучитьДокументприемаСменыНСЦ(ТекСтр.Сотрудник);
					Если ДокументПриемаСменыНСЦ = Неопределено Тогда
						ПоказатьПредупреждение(, "НСЦ: " + ТекСтр.Сотрудник + " не выполнил(а) прием смены, исключите его из Вашего состава смены.");
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 			
	КонецЕсли;
		
	//Проверка заполнения показателей Чек-листов
	Для Каждого ТекСтр Из Объект.ЧекЛист Цикл
		Если ПроверятьКонтрольЗаполнения(ТекСтр.Показатель) И Не ЗначениеЗаполнено(ТекСтр.Значение) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнено значение показателя Чек листа в строке " + ТекСтр.ИсходныйНомерСтроки;
			Сообщение.Поле = "Объект.ЧекЛист["+(ТекСтр.НомерСтроки-1)+"].Значение";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Функция ПроверятьКонтрольЗаполнения(Показатель)
	
	Возврат Показатель.КонтрольЗаполнения;
	
КонецФункции

&НаСервере
Функция ПолучитьТекущегоСотрудника()
	
	Возврат ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо;
	
КонецФункции

&НаСервере
Функция ЭтоНсс()
	Возврат РольДоступна("НСС");
КонецФункции

&НаСервере
Функция ПолучитьДокументприемаСменыНСЦ(НСЦ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И АктивныеСмены.СтаршийСмены.ФизическоеЛицо = &СтаршийСмены
		|	И АктивныеСмены.СменаОткрыта
		|	И АктивныеСмены.Смена = &Смена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор КАК Регистратор
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Смена", Объект.Смена);
	Запрос.УстановитьПараметр("СтаршийСмены", НСЦ);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Регистратор;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СотрудникВыбран()
	
	СотрудникВыбран = Ложь;
	
	Для Каждого Стр Из Объект.Сотрудники Цикл
		Если Стр.Выбран Тогда
			СотрудникВыбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СотрудникВыбран Тогда
		ПоказатьПредупреждение(, "Необходимо выбрать Сотрудника!""");
	КонецЕсли;
	
	Возврат СотрудникВыбран;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДатуКонтроляЗнанийСотрудников()
	
	ОтказВЗаписи = Ложь;
	
	Для Каждого Стр Из Объект.Сотрудники Цикл
		Если Стр.Выбран И Стр.ДатаКонтроляЗнаний < КонецДня(ТекущаяДата()) + 1 Тогда
			ОтказВЗаписи = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Дата следующей проверки знаний для сотрудника "+Стр.Сотрудник+" не актуальна!";
			Сообщение.Поле = "Сотрудники["+(Стр.НомерСтроки-1)+"].Сотрудник";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОтказВЗаписи;
	
КонецФункции

&НаСервере
Функция ПроверятьСотрудников()
	
	Возврат Объект.ВидЗаписи.ЗаполнятьТЧСотрудников;
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	//
	ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Уволен");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементНастройки.ПравоеЗначение = Ложь;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	//
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
	Форма = ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрыФормы, ЭтаФорма); 
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = "Подбор сотрудников в Оперативный журнал";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() > 0 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьПодразделениеФизлица(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Объект.Подразделение));
			Возврат;
		КонецЕсли;
		
		НовСтр = Объект.Сотрудники.Добавить();
		НовСтр.Сотрудник = ВыбранноеЗначение;
		НовСтр.Подразделение = ПолучитьПодразделениеСотрудника(ВыбранноеЗначение);
		НовСтр.Должность = ПолучитьДолжностьСотрудника(ВыбранноеЗначение);
		НовСтр.ДатаКонтроляЗнаний = ПолучитьДатуКонтроляЗнанийСотрудника(ВыбранноеЗначение);
		НовСтр.ВремяНачалаРаботы = ПолучитьВремяНачалаРаботы();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Оборудование") Тогда
		
		Если Объект.Оборудование.НайтиСтроки(Новый Структура("Оборудование", ВыбранноеЗначение)).Количество() > 0 Тогда
			ПоказатьПредупреждение(,"Данное оборудование уже есть в табличной части!");
			Возврат;
		КонецЕсли;
		ДобавитьОборудование(ВыбранноеЗначение);
		
	КонецЕсли;
	
	ОбновитьСодержаниеЗаписи();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОборудование(Оборудование)
	
	НовСтр = Объект.Оборудование.Добавить();
	НовСтр.Оборудование = Оборудование;
	НовСтр.ДиспетчерскоеНаименование = Оборудование.ДиспетчерскоеНаименование;
	НовСтр.СтатусОборудования = Перечисления.СтатусыОборудования.ЗаписьОЖ;
	НовСтр.СостояниеОборудования = Перечисления.СостоянияОборудованияОЖ.ОборудованиеВРаботе;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатусЗаписьОЖ()
	
	Возврат Перечисления.СтатусыОборудования.ЗаписьОЖ;
	
КонецФункции

&НаКлиенте
Процедура ОборудованиеКонтрольВыполненПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда 
		Если ТекДанные.КонтрольВыполнен Тогда
			ОборудованиеНаКонтроле = НайтиОборудованиеНаКонтроле(Объект.Подразделение, ТекДанные.Оборудование, ТекДанные.СтатусОборудования);
			Если ОборудованиеНаКонтроле Тогда
				ТекДанные.СтатусАктуален = Не ТекДанные.КонтрольВыполнен;
				ТекДанные.ДатаОкончанияРемонтныхРабот = ТекущаяДата();
			Иначе
				ПоказатьПредупреждение(, "Данное оборудование не было взято на контроль!");
				ТекДанные.КонтрольВыполнен = Ложь;
			КонецЕсли;
		Иначе
			ТекДанные.ДатаОкончанияРемонтныхРабот = Дата(1,1,1);
			Если ЗначениеЗаполнено(ТекДанные.ДатаВыходаИзСтроя) Тогда
				ТекДанные.СтатусАктуален = Истина;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиОборудованиеНаКонтроле(Подразделение, Оборудование, СтатусОборудования)
	
	ОборудованиеНаКонтроле = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОборудованиеНаКонтролеСрезПоследних.Оборудование КАК Оборудование,
		|	ОборудованиеНаКонтролеСрезПоследних.СтатусАктуален КАК СтатусАктуален
		|ИЗ
		|	РегистрСведений.ОборудованиеНаКонтроле.СрезПоследних(
		|			,
		|			Подразделение = &Подразделение
		|				И Оборудование = &Оборудование
		|				И СтатусОборудования = &СтатусОборудования
		|				И НЕ ДатаВыходаИзСтроя = ДАТАВРЕМЯ(1, 1, 1)) КАК ОборудованиеНаКонтролеСрезПоследних
		|ГДЕ
		|	ОборудованиеНаКонтролеСрезПоследних.СтатусАктуален";
	
	Запрос.УстановитьПараметр("Оборудование", Оборудование);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтатусОборудования", СтатусОборудования);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ОборудованиеНаКонтроле = Истина;
	КонецЕсли;
	
	Возврат ОборудованиеНаКонтроле;
		
КонецФункции 

&НаКлиенте
Процедура ОборудованиеСтатусАктуаленПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если ТекДанные.СтатусАктуален Тогда
			ОборудованиеНаКонтроле = НайтиОборудованиеНаКонтроле(Объект.Подразделение, ТекДанные.Оборудование, ТекДанные.СтатусОборудования);
			Если ОборудованиеНаКонтроле Тогда
				ПоказатьПредупреждение(, "Данное оборудование уже было взято на контроль!");
				ТекДанные.СтатусАктуален = Ложь;
			Иначе
				Если Не ЗначениеЗаполнено(ТекДанные.ДатаВыходаИзСтроя) Тогда 
					ТекДанные.ДатаВыходаИзСтроя = ТекущаяДата();
				КонецЕсли;
				ТекДанные.ДатаОкончанияРемонтныхРабот = Неопределено;
			КонецЕсли;
			ТекДанные.КонтрольВыполнен = Не ТекДанные.СтатусАктуален;
		Иначе
			ТекДанные.ДатаВыходаИзСтроя = Дата(1,1,1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.СтатусОборудования = ПолучитьСтатусЗаписьОЖ();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПроверитьПодразделениеФизлица(ФизЛицо)
	
	ТекПодразделение = ФизЛицо.Подразделение;
	ПроверкаПройдена = Ложь;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		
		Если ТекПодразделение = Объект.Подразделение Тогда
			ПроверкаПройдена = Истина;
			Прервать;
		КонецЕсли;
		
		ТекПодразделение = ТекПодразделение.Родитель;
		
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.Событие = ПредопределенноеЗначение("Справочник.События.РаспоряжениеВыполнено") Тогда 
	
		//Оповестить("ОбновитьРаспоряжениеВРаботе");
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Объект.Событие = ПредопределенноеЗначение("Справочник.События.ОтданоРаспоряжение") Тогда 
	
		//Оповестить("ОбновитьРаспоряжения");
		
	КонецЕсли;
	
	СформироватьЗаголовок();
	
	//доступность кнопки Оповещение НСС
	Если Объект.Чистовик И ОповещениеНСС() Тогда
		Элементы.СообщитьНСС.Доступность = НужноОтправитьОповещение();
	Иначе 
		Элементы.СообщитьНСС.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда 
		
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ПрисоединенныйФайл);

		РаботаСФайламиСлужебныйКлиент.ПодписатьФайлы(МассивФайлов, УникальныйИдентификатор,
			Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеПодписейЗавершить(Успех, Контекст) Экспорт
	
	Если Успех = Истина Тогда
		УстановитьФлагПодписи(Объект.Ссылка);
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьФлагПодписи(Ссылка)
	
	ДокОбъект = Ссылка.ПолучитьОбъект();
	ДокОбъект.ПодписанЭП = Истина;
	ДокОбъект.ОбменДанными.Загрузка = Истина;
	ДокОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Просмотр(Команда)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТекДанные.Оборудование);
		
		ОткрытьФорму("Справочник.Оборудование.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ДекорацияОборудованиеНажатие(Элемент)
//	
//	Видимость = Не Элементы.Оборудование.Видимость;
//	Если Видимость Тогда
//		Элементы.ДекорацияОборудование.Заголовок = "Оборудование (скрыть)";		
//	Иначе
//		Элементы.ДекорацияОборудование.Заголовок = "Оборудование (отобразить)";
//	КонецЕсли;
//	
//	Элементы.Оборудование.Видимость = Видимость;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ДекорацияСотрудникиНажатие(Элемент)
//	
//	Видимость = Не Элементы.Сотрудники.Видимость;
//	Если Видимость Тогда
//		Элементы.ДекорацияСотрудники.Заголовок = "Сотрудники (скрыть)";		
//	Иначе
//		Элементы.ДекорацияСотрудники.Заголовок = "Сотрудники (отобразить)";
//	КонецЕсли;
//	
//	Элементы.Сотрудники.Видимость = Видимость;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ДекорацияЧекЛистНажатие(Элемент)
//	
//	Видимость = Не Элементы.ЧекЛист.Видимость;
//	Если Видимость Тогда
//		Элементы.ДекорацияЧекЛист.Заголовок = "Чек- лист (скрыть)";		
//	Иначе
//		Элементы.ДекорацияЧекЛист.Заголовок = "Чек- лист (отобразить)";
//	КонецЕсли;
//	
//	Элементы.ЧекЛист.Видимость = Видимость;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЧистовикПриИзменении(Элемент)
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик");
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОборудованиеПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	ТекДанные.ДиспетчерскоеНаименование = ВернутьДиспетчерскоеНаименование(ТекДанные.Оборудование);
	ТекДанные.СостояниеОборудования = ПредопределенноеЗначение("Перечисление.СостоянияОборудованияОЖ.ОборудованиеВРаботе");
	
КонецПроцедуры

&НаСервере
Функция ВернутьДиспетчерскоеНаименование(Оборудование)
	
	Возврат Оборудование.ДиспетчерскоеНаименование;
	
КонецФункции

&НаКлиенте
Процедура СобытиеПриИзменении(Элемент)
	
	Если Не СобытиеРазрешено() Тогда
		Объект.Событие = Неопределено;
		Элемент = Неопределено;
	КонецЕсли;
	
	Элементы.СообщитьНСС.Видимость = ОповещениеНСС();
	
	ВыборШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблона()
	
	ЗаполнитьШаблоныТекста(); 	
	Если мШаблоны.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(Объект.мШаблон) ИЛИ ЗначениеЗаполнено(Объект.Комментарий) Тогда
			Объект.мШаблон = Неопределено;
			Объект.Комментарий = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура; 	
	ПараметрыФормы.Вставить("Организация", ПолучитьОрганизацию(Объект.Подразделение));
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ВидЗаписи", Объект.ВидЗаписи);
	ПараметрыФормы.Вставить("Событие", Объект.Событие);	
	ПараметрыФормы.Вставить("мШаблоны", мШаблоны);
	
	Оповещение = Новый ОписаниеОповещения("ВыборШаблонаЗавершение", ЭтотОбъект);
 	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаВыбораШаблона", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШаблоныТекста()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШаблоныТекстаЗаписейОЖ.ШаблонТекста КАК Шаблон
	|ИЗ
	|	РегистрСведений.ШаблоныТекстаЗаписейОЖ КАК ШаблоныТекстаЗаписейОЖ
	|ГДЕ
	|	ШаблоныТекстаЗаписейОЖ.ВидЗаписи = &ВидЗаписи
	|	И (ШаблоныТекстаЗаписейОЖ.Событие = &Событие
	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Событие = ЗНАЧЕНИЕ(Справочник.События.ПустаяСсылка))
	|	И (ШаблоныТекстаЗаписейОЖ.Подразделение = &Подразделение
	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	|	И (ШаблоныТекстаЗаписейОЖ.Организация = &Организация
	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныТекстаЗаписейОЖ.Событие УБЫВ,
	|	ШаблоныТекстаЗаписейОЖ.НомерШаблона");
	
	Запрос.УстановитьПараметр("ВидЗаписи", Объект.ВидЗаписи);
	Запрос.УстановитьПараметр("Событие", Объект.Событие);
	Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	Запрос.УстановитьПараметр("Организация", Объект.Подразделение.Организация);
	
	мШаблоны.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ВыборШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Объект.мШаблон = Результат;
	ОбновитьСодержаниеЗаписи();		
	
КонецПроцедуры

//&НаСервере
//Функция СобытиеРазрешено()  	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ИСТИНА КАК Поле1
//		|ИЗ
//		|	Справочник.ВидыЗаписей.События КАК ВидыЗаписейСобытия
//		|ГДЕ
//		|	ВидыЗаписейСобытия.Ссылка = &Ссылка
//		|	И ВидыЗаписейСобытия.Событие = &Событие";
//	
//	Запрос.УстановитьПараметр("Событие", Объект.Событие);
//	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЗаписи);
//	
//	Результат = Запрос.Выполнить().Выбрать();
//	
//	Если Результат.Следующий() Тогда
//		Возврат Истина;
//	Иначе
//		Возврат Ложь;
//	КонецЕсли;
//	
//КонецФункции

&НаКлиенте
Процедура СообщитьНСС(Команда)  	
	
	Если Объект.Ссылка.Пустая() ИЛИ Не Объект.Чистовик Тогда
		ПоказатьПредупреждение(, "Сначала нужно провести документ в состоянии ""Чистовик""!");
		Возврат;
	КонецЕсли;
	СтруктураПараметров = Новый Структура("Вахта, Смена, ДатаНачалаСмены, ДатаОкончанияСмены, Подразделение, Ответственный, Комментарий");
	ЗаполнитьСтруктуруПараметров(СтруктураПараметров);
	Если СтруктураПараметров.Подразделение = Неопределено Тогда
		ПоказатьПредупреждение(, "НСС не принял смену!");
		Возврат;
	КонецЕсли;
	СтруктураПараметров.Комментарий = Объект.Комментарий;
	СформироватьСообщениеНСС(СтруктураПараметров);
	Элементы.СообщитьНСС.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеНСС(мПодразделение)
	
	Если ЗначениеЗаполнено(мПодразделение.Родитель) Тогда
		Возврат ПолучитьПодразделениеНСС(мПодразделение.Родитель);
	Иначе
		Возврат мПодразделение;
	КонецЕсли; 		
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПараметров(СтруктураПараметров)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодразделениеНСС = ПолучитьПодразделениеНСС(Объект.Подразделение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСмены.Период КАК Период,
		|	АктивныеСмены.Регистратор КАК Регистратор,
		|	АктивныеСмены.Подразделение КАК Подразделение,
		|	АктивныеСмены.Смена КАК Смена,
		|	АктивныеСмены.СтаршийСмены КАК СтаршийСмены
		|ПОМЕСТИТЬ ВТ_Регистр
		|ИЗ
		|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
		|ГДЕ
		|	АктивныеСмены.Подразделение = &Подразделение
		|	И АктивныеСмены.СменаОткрыта
		|	И АктивныеСмены.СтаршийСмены.ФизическоеЛицо.НСС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Регистр.Регистратор.Вахта КАК Вахта,
		|	ВТ_Регистр.Смена КАК Смена,
		|	ВТ_Регистр.Регистратор.ДатаНачалаСмены КАК ДатаНачалаСмены,
		|	ВТ_Регистр.Регистратор.ДатаОкончанияСмены КАК ДатаОкончанияСмены,
		|	ВТ_Регистр.Подразделение КАК Подразделение,
		|	ВТ_Регистр.СтаршийСмены КАК Ответственный
		|ИЗ
		|	ВТ_Регистр КАК ВТ_Регистр
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
		|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеНСС);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Результат);
	КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Функция СформироватьСообщениеНСС(СтруктураПараметров) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Описание
	Если стрДлина(Строка(СтруктураПараметров.Смена.ВремяНачала)) = 19 Тогда
		тВремяНачала = " " + Лев(Прав(СтруктураПараметров.Смена.ВремяНачала, 8), 5);
	Иначе
		тВремяНачала = " 0" + СокрЛП(Лев(Прав(СтруктураПараметров.Смена.ВремяНачала, 8), 5));   
	КонецЕсли;	
	тВремяОкончания = Лев(Прав(СтруктураПараметров.Смена.ВремяОкончания, 8), 5); 		
	СменаПрописью = Формат(СтруктураПараметров.ДатаНачалаСмены, "ДФ=yyyy/MM/dd") + тВремяНачала + " - " + тВремяОкончания; 		
	Описание = "" + Формат(ТекущаяДатаСеанса(), "ДЛФ=DDT") + " " + СтруктураПараметров.Подразделение + "        " + СтруктураПараметров.Вахта + "        " + СтруктураПараметров.Смена + "        " + СменаПрописью;
	//
		
	//Распоряжение для НСС
	НовДок = Документы.ОперативныйЖурнал.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(НовДок, СтруктураПараметров);
	НовДок.Дата = ТекущаяДатаСеанса();
	НовДок.ВидЗаписи = Объект.ВидЗаписи;
	НовДок.Событие = Объект.Событие.СобытиеВЖурналеНСС;
	НовДок.Комментарий = "Оповещение от НСЦ " + Объект.Ответственный + ": " + СтруктураПараметров.Комментарий;
	НовДок.ДатаСобытия = ТекущаяДатаСеанса();
	НовДок.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
	НовДок.ПолученоОт = Объект.Ответственный;
	НовДок.Распоряжение = Объект.Ссылка;
	Для Каждого ТекСтр Из Объект.Оборудование Цикл
		НовСтр = НовДок.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		НовСтр.СтатусОборудования = Перечисления.СтатусыОборудования.ЗаписьОЖ;
	КонецЦикла;
	Для Каждого ТекСтр Из Объект.Сотрудники Цикл
		НовСтр = НовДок.Сотрудники.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
	КонецЦикла;
	НовДок.Описание = Описание;
	НовДок.Оповещение = Истина;
	НовДок.Чистовик = Ложь;
	НовДок.Проведен = Ложь;
	
	Попытка
		НовДок.Записать();
		Сообщить("Сформировано сообщение для НСС.");
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 		
	
КонецФункции

&НаКлиенте
Процедура ЧекЛистПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Или Элементы.ЧекЛист.ТекущиеДанные.НомерСтроки = Объект.ЧекЛист.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	//СледСтрока = Элементы.ЧекЛист.ТекущиеДанные.НомерСтроки + 1;
	//
	////установим следующую строку
	//СтрОтбора = Новый ФиксированнаяСтруктура("НомерСтроки", СледСтрока);
	//Элементы.ЧекЛист.ОтборСтрок = СтрОтбора;
	//Элементы.ЧекЛист.ОтборСтрок = Неопределено;
	//
	////Если вызвать напрямую - не отработает, так как это действие ещё не завершилось
	//ПодключитьОбработчикОжидания("ИзменитьСтрокуОжидание", 0.1, Истина);
	
КонецПроцедуры   

&НаКлиенте
Процедура ИзменитьСтрокуОжидание() Экспорт
	
	Элементы.ЧекЛист.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПоказательПриИзменении(Элемент)
	
	ТекДанные = Элементы.ЧекЛист.ТекущиеДанные;
	ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуСервер(ТекДанные.Показатель);
	ТекДанные.Значение = ПолучитьЗначениеСервер(ТекДанные.Показатель);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЕдиницуСервер(Показатель)
	
	Возврат Показатель.ЕдиницаИзмерения;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеСервер(Показатель)
	
	Возврат Показатель.Значение;
	
КонецФункции


// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВремяСобытия = ПолучитьВремяСобытия(Объект.ДатаСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсехСотрудников(Команда)
	
	Для Каждого СтрСотрудник Из Объект.Сотрудники Цикл
		СтрСотрудник.Выбран = Истина;
	КонецЦикла;
	
	ОбновитьСодержаниеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсехСотрудников(Команда)
	
	Для Каждого СтрСотрудник Из Объект.Сотрудники Цикл
		СтрСотрудник.Выбран = Ложь;
	КонецЦикла;
	
	ОбновитьСодержаниеЗаписи();
	
КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ПолучитьШаблонТекста(ВидЗаписи, Событие, Подразделение)
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ШаблоныТекстаЗаписейОЖ.ШаблонТекста КАК ШаблонТекста
//	|ИЗ
//	|	РегистрСведений.ШаблоныТекстаЗаписейОЖ КАК ШаблоныТекстаЗаписейОЖ
//	|ГДЕ
//	|	ШаблоныТекстаЗаписейОЖ.ВидЗаписи = &ВидЗаписи
//	|	И (ШаблоныТекстаЗаписейОЖ.Событие = &Событие
//	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Событие = ЗНАЧЕНИЕ(Справочник.События.ПустаяСсылка))
//	|	И (ШаблоныТекстаЗаписейОЖ.Подразделение = &Подразделение
//	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
//	|	И (ШаблоныТекстаЗаписейОЖ.Организация = &Организация
//	|			ИЛИ ШаблоныТекстаЗаписейОЖ.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ШаблоныТекстаЗаписейОЖ.Событие УБЫВ,
//	|	ШаблоныТекстаЗаписейОЖ.Подразделение УБЫВ");
//	Запрос.УстановитьПараметр("ВидЗаписи", ВидЗаписи);
//	Запрос.УстановитьПараметр("Событие", Событие);
//	Запрос.УстановитьПараметр("Подразделение", Подразделение);
//	Запрос.УстановитьПараметр("Организация", Подразделение.Организация);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.ШаблонТекста;
//	КонецЕсли;
//	
//	Возврат "";
//	
//КонецФункции

&НаКлиенте
Процедура ОбновитьСодержаниеЗаписи() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.мШаблон) Тогда
		//Если ЗначениеЗаполнено(Объект.Комментарий) Тогда
		//	Объект.Комментарий = Неопределено;
		//КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СтрокаОборудования = "";
	СтрокаСотрудников  = "";
	СтрокаОборудованиеПолностью = "";
	
	Для Каждого СтрОборудование Из Объект.Оборудование Цикл
		Если Не ПустаяСтрока(СтрокаОборудования) Тогда
			СтрокаОборудования = СтрокаОборудования + "; ";
			СтрокаОборудованиеПолностью = СтрокаОборудованиеПолностью + "; ";
		КонецЕсли;
		СтрокаОборудования = СтрокаОборудования + ВернутьПредставлениеОборудования(СтрОборудование.Оборудование);
		СтрокаОборудованиеПолностью = СтрокаОборудованиеПолностью + СтрОборудование.Оборудование;
	КонецЦикла;
	
	Для Каждого СтрСотрудник Из Объект.Сотрудники Цикл			
		Если СтрСотрудник.Выбран Тогда
			Если Не ПустаяСтрока(СтрокаСотрудников) Тогда
				СтрокаСотрудников = СтрокаСотрудников + "; ";
			КонецЕсли;
			СтрокаСотрудников = СтрокаСотрудников + ВернутьФИО(СтрСотрудник.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Комментарий = СтрЗаменить(Объект.мШаблон, "#ОборудованиеПолностью", СтрокаОборудованиеПолностью);
	Объект.Комментарий = СтрЗаменить(Объект.Комментарий, "#Оборудование", СтрокаОборудования);	
	Объект.Комментарий = СтрЗаменить(Объект.Комментарий, "#Сотрудники", СтрокаСотрудников);  	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВернутьФИО(Сотрудник)
	
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Сотрудник.Наименование);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьПредставлениеОборудования(Оборудование)
	
	Если ЗначениеЗаполнено(Оборудование.ДиспетчерскоеНаименование) Тогда
		Возврат Оборудование.ДиспетчерскоеНаименование;
	Иначе
		Возврат Оборудование;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СотрудникиВыбранПриИзменении(Элемент)
	ОбновитьСодержаниеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСодержаниеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоУмолчанию(Команда)
	
	ЗаполнитьПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоУмолчаниюСервер()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаполнитьЧекЛист();
	ЗначениеВРеквизитФормы(ДокОбъект,"Объект");
	
	Если ЗначениеЗаполнено(ДокументПриемаПредыдущейСмены) Тогда
		ЗаполнитьЧекЛистЗначениями(ДокументПриемаПредыдущейСмены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧекЛистЗначениями(ДокументПриемаПредыдущейСмены)
	
	//Заполняем чек- лист показателями предыдущей смены
	Для Каждого ТекСтр Из Объект.ЧекЛист Цикл
		МасСтрок = ДокументПриемаПредыдущейСмены.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", ТекСтр.Показатель));
		Если МасСтрок.Количество() > 0 Тогда
			ТекСтр.Значение = МасСтрок[0].Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОборудование(Команда)
	
	Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
	Форма = ОткрытьФорму("Справочник.Оборудование.ФормаВыбора", ПараметрыФормы, ЭтаФорма); 
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = "Подбор оборудования в Оперативный журнал";
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПриИзменении(Элемент)
	
	ТекДанные = Элементы.Оборудование.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Объект.Оборудование.НайтиСтроки(Новый Структура("Оборудование", ТекДанные.Оборудование)).Количество() > 1 Тогда
			ПоказатьПредупреждение(,"Данное оборудование уже есть в табличной части!");
			НомерСтроки = Объект.Оборудование.НайтиСтроки(Новый Структура("Оборудование", ТекДанные.Оборудование))[1].НомерСтроки;
			Объект.Оборудование.Удалить(НомерСтроки-1);
			Возврат;
		КонецЕсли;
	КонецЕсли; 	
	ОбновитьЗаголовокСтраницы("Оборудование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокСтраницы(ИмяСтраницы) Экспорт
	
	КоличествоПозиций = Объект[ИмяСтраницы].Количество();
	Элементы["Группа" + ИмяСтраницы].Заголовок = ?(КоличествоПозиций > 0, ИмяСтраницы + "(" + КоличествоПозиций + ")", ИмяСтраницы);  	
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Объект.Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.Оборудование.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура ОборудованиеОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ПроверитьПодразделениеОборудования(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данное оборудование не относится к подразделению %1", Объект.Подразделение));
		//разрешаем выбирать оборудование другого подразделения
		//ВыбранноеЗначение = Неопределено;
	КонецЕсли;
	
	//разрешаем выбирать оборудование другого подразделения
	//Элемент = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПодразделениеОборудования(Оборудование)
	
	ТекПодразделение = Оборудование.Подразделение;
	ПроверкаПройдена = Ложь;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		
		Если ТекПодразделение = Объект.Подразделение Тогда
			ПроверкаПройдена = Истина;
			Прервать;
		КонецЕсли;
		
		ТекПодразделение = ТекПодразделение.Родитель;
		
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура ЧекЛистПриИзменении(Элемент)
	//ОбновитьЗаголовокСтраницы("ЧекЛист");
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДляОзнакомленияПриИзменении(Элемент)
	//ОбновитьЗаголовокСтраницы("ДокументыДляОзнакомления");
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСодержаниеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеПослеУдаления(Элемент)
	ОбновитьСодержаниеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПослеУдаления(Элемент)
	ОбновитьСодержаниеЗаписи();
КонецПроцедуры

&НаКлиенте
Процедура ДатаСобытияПриИзменении(Элемент)
	
	ДатаПриемаСмены = ПолучитьДатуПриемаСмены(); 
	Если ЗначениеЗаполнено(ДатаПриемаСмены) Тогда
		Если Объект.ДатаСобытия < ДатаПриемаСмены Тогда
			ПоказатьПредупреждение(, "Нельзя создать документ ранее начала приема смены (" + Формат(ДатаПриемаСмены, "ДЛФ=DDT") + ").");
			Объект.ДатаСобытия = ДатаПриемаСмены + 1;
			//время
			Если стрДлина(Строка(Объект.ДатаСобытия)) = 19 Тогда
				тВремя = "01.01.0001 " + Прав(Объект.ДатаСобытия, 8);
			Иначе
				тВремя = "01.01.0001 0" + Прав(Объект.ДатаСобытия, 8);
			КонецЕсли;			
			ВремяСобытия = Дата(тВремя);
			//время
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПриемаСмены()
	
	Возврат ДокументПриемаСмены.ДатаСобытия;
	
КонецФункции

&НаСервере
Функция ПолучитьОписание(Подразделение, СостояниеОборудования)
	
	Текст = "";
	
	мСтрок = Объект.Оборудование.НайтиСтроки(Новый Структура("СостояниеОборудования", СостояниеОборудования));
	Если мСтрок.Количество() > 0 Тогда  		
		Для Каждого ТекСтр Из мСтрок Цикл
			Описание = ?(ЗначениеЗаполнено(ТекСтр.ДиспетчерскоеНаименование), ТекСтр.ДиспетчерскоеНаименование, ТекСтр.Оборудование);
			Текст = ?(Текст = "", "" + Описание, Текст + ", " + Описание);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОписаниеОборудования(Команда)  	
	
	ЗаполнитьОписаниеОборудованияСервер();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеОборудованияСервер()
	
	//ОборудованиеВнеРезерва
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ВынужденныйПростойОборудования));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.ВынужденныйПростой);
	КонецЕсли;
	
	//ОборудованиеВРаботе
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ОборудованиеВРаботе));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.ОборудованиеВРаботе);
	КонецЕсли;
	
	//ОборудованиеВРезерве
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ОборудованиеВРезерве));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.ОборудованиеВРезерве);
	КонецЕсли;
	
	//ОборудованиеВРемонте
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ОборудованиеВРемонте));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.ОборудованиеВРемонте);
	КонецЕсли;
	
	//ОборудованиеТребующееПовышенногоВнимания
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ОборудованиеТребующееПовышенногоВнимания));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.ОборудованиеТребующееПовышенногоВнимания);
	КонецЕсли;
	
	//ОборудованиеНаКонсервации
	мСтроки = Объект.ЧекЛист.НайтиСтроки(Новый Структура("Показатель", Справочники.ПоказателиЧекЛиста.ОборудованиеНаКонсервации));
	Если мСтроки.Количество() > 0 Тогда
		НомерСтроки = мСтроки[0].НомерСтроки;
		СтрокаЧекЛиста = Объект.ЧекЛист[НомерСтроки-1];
		СтрокаЧекЛиста.Значение = ПолучитьОписание(Объект.Подразделение, Перечисления.СостоянияОборудованияОЖ.НаКонсервации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЖурналы(Команда)
	
	Для Каждого СтрДокумент Из Объект.ДокументыДляОзнакомления Цикл
		СтрДокумент.КОзнакомлениюПринимающему = Истина;
	КонецЦикла; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеЖурналы(Команда)
	
	Для Каждого СтрДокумент Из Объект.ДокументыДляОзнакомления Цикл
		СтрДокумент.КОзнакомлениюПринимающему = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяСобытияПриИзменении(Элемент)
	
	Объект.ДатаСобытия = НачалоДня(Объект.ДатаСобытия) + (ВремяСобытия - '00010101');
	ДатаСобытияПриИзменении(0);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВремяСобытия(ДатаСобытия)
	Возврат '00010101' + (ДатаСобытия - НачалоДня(ДатаСобытия));
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТекущаяДатаКлиент", ТекущаяДатаКлиент);
	
КонецПроцедуры
