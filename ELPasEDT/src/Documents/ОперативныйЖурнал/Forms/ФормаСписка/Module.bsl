
&НаКлиенте
Процедура ПриемСмены(Команда)
	//ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ПриемСмены");
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидЗаписи", ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"));
	ЗначенияЗаполнения.Вставить("Событие", ПредопределенноеЗначение("Справочник.События.СменуПринял"));
	ЗначенияЗаполнения.Вставить("ДатаНачалаСмены", ТекущаяДата());
	
	//АдресВХранилище = ПоместитьВХранилище();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	//ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик"));
	//ПараметрыФормы.Вставить("АдресВХранилище", АдресВХранилище);
	ПараметрыФормы.Вставить("СозданАвтоматически", Истина);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры  

&НаКлиенте
Процедура СдачаСмены(Команда)
	
	
	//СдачаСменыНаСервере();
	//
	////ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\common\1cestart.exe"" ENTERPRISE  /fC:\Users\fave001\bases\ЭЖ\ПОГиЭЖ\разработка");
	//ЗапуститьПриложение("""C:\Program Files (x86)\1cv8\common\1cestart.exe"" ENTERPRISE /S prm-ad01-aspd01\ElpasDev ");
	
КонецПроцедуры

&НаСервере
Процедура СдачаСменыНаСервере()
	//МЗ = РегистрыСведений.ПередачаСмены.СоздатьМенеджерЗаписи();
	//МЗ.ЗонаОтветственности = ПараметрыСеанса.ТекущаяЗонаОтветственности;
	//МЗ.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	//МЗ.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	
	Если ЭтоРуководитель() Тогда
		//КоманднаяПанель.Видимость = Ложь;
		Для Каждого ЭлементПанели Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
			Если ТипЗнч(ЭлементПанели) = Тип("КнопкаФормы") ИЛИ ТипЗнч(ЭлементПанели) = Тип("ГруппаФормы") Тогда
				Если Не ЭлементПанели.Имя = "ФормаНастройки" И Не ЭлементПанели.Имя = "ФормаИзменитьФорму" Тогда
					ЭлементПанели.Видимость = Ложь;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		Для Каждого Элемент Из Элементы.ГруппаПанельКоманд.ПодчиненныеЭлементы Цикл
			Если Элемент.Имя = "ОтборПоТекущейСмене" Тогда
				Элемент.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОбновитьПанельНапоминаний();
		ПодключитьОбработчикОжидания("ОбновитьПанельНапоминанийКлиент", 60);
	КонецЕсли; 
	Элементы.ОтборПоТекущейСмене.Заголовок = ?(УстановленПоДатеНачалаСмены(), "Отобразить все", "Отобрать по текущей смене");
	
КонецПроцедуры

&НаСервере
Функция УстановленПоДатеНачалаСмены()
	
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборВПользовательскихНастройках = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
																			Отбор.ИдентификаторПользовательскойНастройки);
																			
	РаботаемСНастройками = Истина;																		
	Если ОтборВПользовательскихНастройках <> Неопределено Тогда
		
		РаботаемСНастройками = Ложь;
		Отбор = ОтборВПользовательскихНастройках;		
	
	КонецЕсли;																		
																			
	ОтборПоДатеНачалаСмены = Неопределено;
	ПолеДатаНачалаСмены = Новый ПолеКомпоновкиДанных("ДатаНачалаСмены");
	
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			и ЭлементОтбора.ЛевоеЗначение = ПолеДатаНачалаСмены Тогда
			
			ОтборПоДатеНачалаСмены = ЭлементОтбора;
			Прервать;
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ОтборПоДатеНачалаСмены = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ОтборПоДатеНачалаСмены.Использование = Ложь Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЭтоРуководитель()
	
	Возврат РольДоступна("ПросмотрРуководителем");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПанельНапоминанийКлиент()
	ОбновитьПанельНапоминаний();
КонецПроцедуры

&НаСервере
Функция ПроверитьВидимостьПоРоли(ИмяРоли)
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораЗоныОтветственности(ВыбранноеЗначение, ДокПараметры) Экспорт
	УстановитьЗонуОтветственности(ВыбранноеЗначение)
КонецПроцедуры

&НаСервере
Процедура УстановитьЗонуОтветственности(ЗонаОтветственности)
	ПараметрыСеанса.ТекущаяЗонаОтветственности = ЗонаОтветственности;
КонецПроцедуры

&НаСервере
Функция НеобходимоВвестиЗаонуОтветственности()
	
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущаяЗонаОтветственности) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПередачуСмены()
	
	Если НужноЗакрытьСмену() Тогда
		ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.СдачаСмены");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НужноЗакрытьСмену()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ПередачаСмены КАК ПередачаСмены
	|ГДЕ
	|	ПередачаСмены.ЗонаОтветственности = &ЗонаОтветственности
	|	И ПередачаСмены.Пользователь <> &Пользователь");
	
	Запрос.УстановитьПараметр("ЗонаОтветственности", ПараметрыСеанса.ТекущаяЗонаОтветственности);
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("ВидЗаписи", ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"));
	ЗначенияЗаполнения.Вставить("Событие", ПредопределенноеЗначение("Справочник.События.СменуСдал"));
	
	//АдресВХранилище = СохранитьТЧВХранилище(ВыбранноеЗначение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик"));
	//ПараметрыФормы.Вставить("АдресВХранилище", АдресВХранилище);
	ПараметрыФормы.Вставить("ДокументЗакрытия", ВыбранноеЗначение);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

//&НаСервере
//Функция СохранитьТЧВХранилище(СсылкаНаДокумент)
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ОперативныйЖурналЧекЛист.Показатель КАК Показатель,
//	|	ОперативныйЖурналЧекЛист.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
//	|	ОперативныйЖурналЧекЛист.Значение КАК Значение
//	|ИЗ
//	|	Документ.ОперативныйЖурнал.ЧекЛист КАК ОперативныйЖурналЧекЛист
//	|ГДЕ
//	|	ОперативныйЖурналЧекЛист.Ссылка = &Ссылка";
//	
//	Запрос.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
//	
//	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
//	
//	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗначений);		
//	
//КонецФункции

&НаКлиенте
Процедура СдатьСмену(Команда)
	
	//ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.СдачаСмены");
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура();
	//Отбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыДокументаОперативногоЖурнала.Чистовик"));
	Отбор.Вставить("ВидЗаписи", ПредопределенноеЗначение("Справочник.ВидыЗаписей.ПередачаСмены"));
	Отбор.Вставить("Событие", ПредопределенноеЗначение("Справочник.События.СменуПринял"));
	Отбор.Вставить("Подразделение", ПолучитьПодразделениеПользователя());
	Отбор.Вставить("СменаЗакрыта", Ложь);
	Отбор.Вставить("Проведен", Истина);
	Отбор.Вставить("ЭтоПерваяЗапись", Ложь);//ЭтоПерваяЗапись
	//Отбор.Вставить("Ответственный", ПолучитьОтветственного());
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	//новое
	//ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
	Форма = ПолучитьФорму("Документ.ОперативныйЖурнал.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
	ОтборПоОтветственному = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоОтветственному.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ответственный");
	ОтборПоОтветственному.Использование = Истина;
	ОтборПоОтветственному.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборПоОтветственному.ПравоеЗначение = ПолучитьОтветственного();
	ОтборПоОтветственному.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Форма.Открыть();
	//новое
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьОтветственного()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

&НаСервере
Функция ПолучитьПодразделениеПользователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь.Подразделение;
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиЗавершение()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда 		
		Если ТекущиеДанные.Свойство("Комментарий") Тогда 
			РФ_Комментарий = Элементы.Список.ТекущиеДанные.Комментарий;
		Иначе
			//для группировок, где нет Ссылок
			Если ТекущиеДанные.Свойство("Ссылка") Тогда
				РФ_Комментарий = ПолучитьКомментарийСервер(ТекущиеДанные.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Если ТекущиеДанные.Свойство("ЗамечанияИРаспоряжения") Тогда
			РФ_Замечание = Элементы.Список.ТекущиеДанные.ЗамечанияИРаспоряжения;
		Иначе
			Если ТекущиеДанные.Свойство("Ссылка") Тогда
				РФ_Замечание = ПолучитьЗамечанияСервер(ТекущиеДанные.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриАктивизацииСтрокиЗавершение()

&НаСервере
Функция ПолучитьКомментарийСервер(Ссылка)
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	Возврат ДокументОбъект.Комментарий;
	
КонецФункции

&НаСервере
Функция ПолучитьЗамечанияСервер(Ссылка)
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	Возврат ДокументОбъект.ЗамечанияИРаспоряжения;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды 	
	УстановитьСистемуОтборов();
	
	//20180906 Для Руководителей свое меню
	Если РольДоступна("ПросмотрРуководителем") Тогда
		
		Элементы.ГруппаИнформация.Видимость = Ложь;
		//Элементы.ФормаЗамечаниеКонтролера.Видимость = РольДоступна("Контролер");
		Элементы.ФормаРаспоряжение.Видимость = Ложь;
		Элементы.ФормаПоказатьОборудование.Видимость = Ложь;  		
		
	Иначе
	
		//Распоряжения.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделение);
		Распоряжения.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		РаспоряженияВРаботе.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		ЗамечанияКонтролера.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь); 
		//20180918
		Обращения.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		ОбращенияВРаботе.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		ОповещениеОтНСЦ.Параметры.УстановитьЗначениеПараметра("Ответственный", ПараметрыСеанса.ТекущийПользователь);
		Элементы.ГруппаОбращения.Видимость = Не РольДоступна("НСС");
		Элементы.ГруппаОбращенияВРаботе.Видимость = Не РольДоступна("НСС");
		Элементы.ОповещениеОтНСЦ.Видимость = РольДоступна("НСС");
		//20180918
		
		Элементы.ФормаРаспоряжение.Видимость         = РольДоступна("НСС");
		Элементы.ФормаАвария.Видимость               = РольДоступна("НСС");
		Элементы.ФормаОбращение.Видимость            = Не РольДоступна("НСС");
		Элементы.ГруппаРаспоряженияВРаботе.Видимость = Не РольДоступна("НСС");
		//Элементы.ФормаЗамечаниеКонтролера.Видимость  = РольДоступна("Контролер");
		
		ДоступностьКоманд = 
		РольДоступна("ДобавлениеИзменениеПроведениеДокументаОперативныйЖурнал")
		Или РольДоступна("ПолныеПрава");
		
		Элементы.ФормаАвария.Доступность = ДоступностьКоманд;
		Элементы.ФормаПринятьСмену.Доступность = ДоступностьКоманд;
		Элементы.ФормаСдатьСмену.Доступность = ДоступностьКоманд;
		Элементы.ФормаДополнениеВСоставСмены.Доступность = ДоступностьКоманд;
		Элементы.ФормаЗавершитьРаботуСотрудника.Доступность = ДоступностьКоманд;
		Элементы.ФормаРаспоряжение.Доступность = ДоступностьКоманд;
		//Элементы.ФормаЗамечаниеКонтролера.Доступность = ДоступностьКоманд;
		//Элементы.ФормаИнтервалПоДатеНачалаСмены.Доступность = ДоступностьКоманд;
		Элементы.ФормаПоказатьОборудование.Доступность = ДоступностьКоманд;
		Элементы.ФормаОткрытьМастерБыстрогоВвода.Доступность = ДоступностьКоманд;
		
	КонецЕсли;  
	
	Элементы.ОтборПоТекущейСмене.Видимость = РольДоступна("ДобавлениеИзменениеПроведениеДокументаОперативныйЖурнал");
	
	Пользователь = ПараметрыСеанса.ТекущийПользователь;
	ЭтоПроверяющийКонтролер = РольДоступна("ПроверяющийКонтролер");
	Организация = Подразделение.Организация;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельНапоминаний()
	
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ЦветФонаПерсиковый = Новый Цвет(255, 204, 153);
	ЦветФонаНейтральный = ЦветаСтиля.ЦветФонаФормы;
	
	//Оборудование в тревожном статусе
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОборудованиеНаКонтролеСрезПоследних.Оборудование) КАК СтрокОборудования
	|ИЗ
	|	РегистрСведений.ОборудованиеНаКонтроле.СрезПоследних(, Подразделение = &Подразделение) КАК ОборудованиеНаКонтролеСрезПоследних
	|ГДЕ
	|	ОборудованиеНаКонтролеСрезПоследних.СтатусАктуален";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокОборудования = Результат.СтрокОборудования;
	
	Если СтрокОборудования > 0 Тогда
		Элементы.ГруппаОборудование.ЦветФона = ЦветФонаПерсиковый;
		Элементы.ГруппаОборудование.Заголовок = "(" + СтрокОборудования + ") Оборудование";
		Элементы.ГруппаОборудование.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	Иначе
		Элементы.ГруппаОборудование.ЦветФона = ЦветФонаНейтральный; 
		Элементы.ГруппаОборудование.Заголовок = "Оборудование";
		Элементы.ГруппаОборудование.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;  	
	
	//Распоряжения к ознакомлению
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперативныйЖурнал.Ссылка) КАК СтрокРаспоряжений
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И НЕ ОперативныйЖурнал.ВидЗаписи = ЗНАЧЕНИЕ(Справочник.ВидыЗаписей.Обращение)
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И (ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено)
		|			ИЛИ ОперативныйЖурнал.СтатусОтданногоРаспоряжения = ЗНАЧЕНИЕ(перечисление.СтатусыОтданныхРаспоряжений.НеВыполнено))
		|	И НЕ ОперативныйЖурнал.Ссылка В
		|				(ВЫБРАТЬ
		|					Распоряжения.Распоряжение.Распоряжение КАК Ссылка
		|				ИЗ
		|					РегистрСведений.Распоряжения КАК Распоряжения
		|				ГДЕ
		|					Распоряжения.Ознакомился
		|					И НЕ Распоряжения.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|					И Распоряжения.Распоряжение.Распоряжение.СтатусОтданногоРаспоряжения = ЗНАЧЕНИЕ(перечисление.СтатусыОтданныхРаспоряжений.НеВыполнено))
		|	И НЕ ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен)";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокРаспоряжений = Результат.СтрокРаспоряжений;
	
	Если СтрокРаспоряжений > 0 Тогда
		Элементы.ГруппаРаспоряжения.ЦветФона = ЦветФонаПерсиковый; 
		Элементы.ГруппаРаспоряжения.Заголовок = "(" + СтрокРаспоряжений + ") Распоряжения к ознакомлению";
		Элементы.ГруппаРаспоряжения.Картинка = БиблиотекаКартинок.ЗнакСтоп;
	Иначе
		Элементы.ГруппаРаспоряжения.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаРаспоряжения.Заголовок = "Распоряжения к ознакомлению";
		Элементы.ГруппаРаспоряжения.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;  	
	
	//Распоряжения к исполнению
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперативныйЖурнал.Ссылка) КАК СтрокРаспоряжений
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И НЕ ОперативныйЖурнал.ВидЗаписи = ЗНАЧЕНИЕ(Справочник.ВидыЗаписей.Обращение)
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И ОперативныйЖурнал.Событие = ЗНАЧЕНИЕ(справочник.События.ПринятоРаспоряжение)
		|	И ОперативныйЖурнал.Распоряжение В
		|			(ВЫБРАТЬ
		|				Распоряжения.Распоряжение КАК Ссылка
		|			ИЗ
		|				РегистрСведений.Распоряжения КАК Распоряжения
		|			ГДЕ
		|				Распоряжения.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				И Распоряжения.Ознакомился)
		|	И НЕ ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен)";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокРаспоряжений = Результат.СтрокРаспоряжений;
	
	Если СтрокРаспоряжений > 0 Тогда
		Элементы.ГруппаРаспоряженияВРаботе.ЦветФона = ЦветФонаПерсиковый;
		Элементы.ГруппаРаспоряженияВРаботе.Заголовок = "(" + СтрокРаспоряжений + ") Распоряжения в работе";
		Элементы.ГруппаРаспоряженияВРаботе.Картинка = БиблиотекаКартинок.ЗнакСтоп;
	Иначе
		Элементы.ГруппаРаспоряженияВРаботе.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаРаспоряженияВРаботе.Заголовок = "Распоряжения в работе";
		Элементы.ГруппаРаспоряженияВРаботе.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;	
	
	//Замечания контролера
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗамечанияКонтролера.ДокументОЖ) КАК СтрокЗамечаний
		|ИЗ
		|	РегистрСведений.ЗамечанияКонтролера КАК ЗамечанияКонтролера
		|ГДЕ
		|	ЗамечанияКонтролера.Ответственный = &Ответственный
		|	И НЕ ЗамечанияКонтролера.Ознакомился";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокЗамечаний = Результат.СтрокЗамечаний;
	
	Если СтрокЗамечаний > 0 Тогда
		Элементы.ГруппаЗамечанияКонтролера.ЦветФона = ЦветФонаПерсиковый; 
		Элементы.ГруппаЗамечанияКонтролера.Заголовок = "(" + СтрокЗамечаний + ") Замечания контролера";
		Элементы.ГруппаЗамечанияКонтролера.Картинка = БиблиотекаКартинок.СостояниеПользователя02;
	Иначе
		Элементы.ГруппаЗамечанияКонтролера.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаЗамечанияКонтролера.Заголовок = "Замечания контролера";
		Элементы.ГруппаЗамечанияКонтролера.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли; 
	
	//20180917
	//Обращения к ознакомлению
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперативныйЖурнал.Ссылка) КАК СтрокРаспоряжений
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И ОперативныйЖурнал.ВидЗаписи = ЗНАЧЕНИЕ(Справочник.ВидыЗаписей.Обращение)
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И (ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено)
		|			ИЛИ ОперативныйЖурнал.СтатусОтданногоРаспоряжения = ЗНАЧЕНИЕ(перечисление.СтатусыОтданныхРаспоряжений.НеВыполнено))
		|	И НЕ ОперативныйЖурнал.Ссылка В
		|				(ВЫБРАТЬ
		|					Распоряжения.Распоряжение.Распоряжение КАК Ссылка
		|				ИЗ
		|					РегистрСведений.Распоряжения КАК Распоряжения
		|				ГДЕ
		|					Распоряжения.Ознакомился
		|					И НЕ Распоряжения.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|					И Распоряжения.Распоряжение.Распоряжение.СтатусОтданногоРаспоряжения = ЗНАЧЕНИЕ(перечисление.СтатусыОтданныхРаспоряжений.НеВыполнено))";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокРаспоряжений = Результат.СтрокРаспоряжений;
	
	Если СтрокРаспоряжений > 0 Тогда
		Элементы.ГруппаОбращения.ЦветФона = ЦветФонаПерсиковый; 
		Элементы.ГруппаОбращения.Заголовок = "(" + СтрокРаспоряжений + ") Обращения НСЦ";
		Элементы.ГруппаОбращения.Картинка = БиблиотекаКартинок.ЗнакСтоп;
	Иначе
		Элементы.ГруппаОбращения.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаОбращения.Заголовок = "Обращения НСЦ";
		Элементы.ГруппаОбращения.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;  	
	
	//Обращения к исполнению
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперативныйЖурнал.Ссылка) КАК СтрокРаспоряжений
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И ОперативныйЖурнал.ВидЗаписи = ЗНАЧЕНИЕ(Справочник.ВидыЗаписей.Обращение)
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И ОперативныйЖурнал.Событие = ЗНАЧЕНИЕ(справочник.События.ПринятоОбращение)
		|	И ОперативныйЖурнал.Распоряжение В
		|			(ВЫБРАТЬ
		|				Распоряжения.Распоряжение КАК Ссылка
		|			ИЗ
		|				РегистрСведений.Распоряжения КАК Распоряжения
		|			ГДЕ
		|				Распоряжения.ДатаИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				И Распоряжения.Ознакомился)";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокРаспоряжений = Результат.СтрокРаспоряжений;
	
	Если СтрокРаспоряжений > 0 Тогда
		Элементы.ГруппаОбращенияВРаботе.ЦветФона = ЦветФонаПерсиковый;
		Элементы.ГруппаОбращенияВРаботе.Заголовок = "(" + СтрокРаспоряжений + ") Обращения в работе";
		Элементы.ГруппаОбращенияВРаботе.Картинка = БиблиотекаКартинок.ЗнакСтоп;
	Иначе
		Элементы.ГруппаОбращенияВРаботе.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаОбращенияВРаботе.Заголовок = "Обращения в работе";
		Элементы.ГруппаОбращенияВРаботе.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	//20180918
	//Оповещение от НСЦ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОперативныйЖурнал.Ссылка) КАК СтрокРаспоряжений
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И ОперативныйЖурнал.Оповещение
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыДокументаОперативногоЖурнала.Черновик)";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	СтрокРаспоряжений = Результат.СтрокРаспоряжений;
	
	Если СтрокРаспоряжений > 0 Тогда
		Элементы.ГруппаОповещение.ЦветФона = ЦветФонаПерсиковый; 
		Элементы.ГруппаОповещение.Заголовок = "(" + СтрокРаспоряжений + ") Оповещение от НСЦ";
		Элементы.ГруппаОповещение.Картинка = БиблиотекаКартинок.ЗнакСтоп;
	Иначе
		Элементы.ГруппаОповещение.ЦветФона = ЦветФонаНейтральный;
		Элементы.ГруппаОповещение.Заголовок = "Оповещение от НСЦ";
		Элементы.ГруппаОповещение.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСистемуОтборов()
	
	//Отбор по Подразделению
	Подразделение = ПараметрыСеанса.ТекущийПользователь.Подразделение;
	
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	//ОтборВПользовательскихНастройках = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
	//																		Отбор.ИдентификаторПользовательскойНастройки);
	//																		
	//РаботаемСНастройками = Истина;																		
	//Если ОтборВПользовательскихНастройках <> Неопределено Тогда
	//	
	//	РаботаемСНастройками = Ложь;
	//	Отбор = ОтборВПользовательскихНастройках;		
	//
	//КонецЕсли;																		
																			
	ОтборПоПодразделению = Неопределено;
	ПолеПодразделение = Новый ПолеКомпоновкиДанных("Подразделение");
	
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл 	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			и ЭлементОтбора.ЛевоеЗначение = ПолеПодразделение Тогда   			
			ОтборПоПодразделению = ЭлементОтбора;
			Прервать; 		
		КонецЕсли;		
	КонецЦикла;
	
	//Если ОтборПоПодразделению = Неопределено Тогда
	//
	//	ОтборПоПодразделению = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//	ОтборПоПодразделению.ЛевоеЗначение = ПолеПодразделение;
	//	ОтборПоПодразделению.Использование = Ложь;
	//	ОтборПоПодразделению.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	//	ОтборПоПодразделению.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
	//	Элементы.Список.СоздатьЭлементыФормыПользовательскихНастроек();
	//
	//КонецЕсли;
	//
	//Если РаботаемСНастройками Тогда
	//
	//	ОтборПоПодразделению = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ОтборПоПодразделению.ИдентификаторПользовательскойНастройки);
	//
	//КонецЕсли;
	ОтборПоПодразделению.Использование = Не ОтборПоПодразделению.Использование;
	
	ОтборПоПодразделению.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	ОтборПоПодразделению.ПравоеЗначение = Подразделение;
	
	СписокОборудования.Параметры.УстановитьЗначениеПараметра("Подразделение", Подразделение);
	
	/////////////////////////////////////////////////////////////////////////////////////////////
	//Отбор по Автору для Черновиков
	Гр_Отбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	Гр_Отбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
	
	//Группа И
	Гр_Отбора_И = Гр_Отбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	Гр_Отбора_И.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	НовЭлементОтбора = Гр_Отбора_И.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//НовЭлементОтбора.Родитель = Гр_Отбора_И; 	
	НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); 
	НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	НовЭлементОтбора.Использование = Истина; 	
	НовЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
	
	НовЭлементОтбора = Гр_Отбора_И.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	//НовЭлементОтбора.Родитель = Гр_Отбора_И; 	
	НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ответственный"); 
	НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	НовЭлементОтбора.Использование = Истина; 	
	НовЭлементОтбора.ПравоеЗначение = ПараметрыСеанса.ТекущийПользователь;
	
	//Группа ИЛИ
	НовЭлементОтбора = Гр_Отбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
	НовЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); 
	НовЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно; 
	НовЭлементОтбора.Использование = Истина; 	
	НовЭлементОтбора.ПравоеЗначение = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
	
	Гр_Отбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОборудование(Команда)
	
	Элементы.ГруппаИнформация.Видимость = Не Элементы.ГруппаИнформация.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнениеВСоставСмены(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура; 	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ДополнениеВСоставСмены", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура Распоряжение(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	//2018
	Если ЗапрещенВводДокументов() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
		Возврат;
	КонецЕсли;
	//2018
	
	ПараметрыФормы = Новый Структура; 	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.Распоряжение", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 	
	
КонецПроцедуры

//2018
&НаСервере
Функция ЗапрещенВводДокументов()  	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктивныеСменыСрезПоследних.Смена КАК Смена,
	|	АктивныеСменыСрезПоследних.СтаршийСмены КАК СтаршийСмены,
	|	АктивныеСменыСрезПоследних.СменаОткрыта КАК СменаОткрыта
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И СтаршийСмены = &СтаршийСмены) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПараметрыСеанса.ТекущийПользователь);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;  
	
КонецФункции
//2018

//&НаКлиенте
//Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
//	
//	Если ИмяСобытия = "ОбновитьСписокОЖ" Тогда
//		Элементы.Список.Обновить();
//		Элементы.Распоряжения.Обновить();
//	КонецЕсли;
//	
//	Если ИмяСобытия = "ОбновитьРаспоряжениеВРаботе" Тогда
//		Элементы.РаспоряженияВРаботе.Обновить();
//	КонецЕсли;
//	
//	Если ИмяСобытия = "ОбновитьРаспоряжения" Тогда
//		Элементы.Распоряжения.Обновить();
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЗамечаниеКонтролера(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	ФункционалПоКонтролерам(Истина);
	
	//Если ЭтоПроверяющийКонтролер Тогда
	//	ПроверкаПароляКонтролера();
	//Иначе
	//	ФункционалПоКонтролерам();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФункционалПоКонтролерам(ЭтоПроверяющийКонтролер = Ложь)
	
	мДокументы = Элементы.Список.ВыделенныеСтроки;
	
	Отказ = Ложь;
	
	ПроверитьПринятиеСмены(мДокументы, Отказ);
	
	Если Не Отказ Тогда
	
		ПараметрыФормы = Новый Структура;
		Если мДокументы.Количество() > 0 Тогда
			Если Не ТипЗнч(мДокументы[0]) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				ПараметрыФормы.Вставить("ДокументыОЖ", мДокументы);
			КонецЕсли;
		КонецЕсли;
		ПараметрыФормы.Вставить("ПодпсатьЭЦП", ЭтоПроверяющийКонтролер);
		ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ЗамечанияКонтролера", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПринятиеСмены(мДокументы, Отказ)
	
	Для Каждого Док из мДокументы Цикл
		Если Не ПользовательПринялСмену(Док.Подразделение) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Пользователь не принял смену по подразделению %1", Док.Подразделение);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПользовательПринялСмену(Подразделение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СтаршийСмены = &СтаршийСмены
	|	И АктивныеСменыСрезПоследних.СменаОткрыта");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПользователиКлиентСервер.ТекущийПользователь());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПароляКонтролера()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Пользователь);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	Оповещение = Новый ОписаниеОповещения("ПроверяющийКонтролерЗавершение", ЭтотОбъект);
 	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ПроверяющийКонтролер", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийКонтролерЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ок" Тогда
		
		ФункционалПоКонтролерам();		
	
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗамечанияКонтролераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "ЗамечанияКонтролераОзнакомился" Тогда
	
		ОтредактироватьЗаписьСервер(ВыбраннаяСтрока); 
		
		Элементы.ЗамечанияКонтролера.Обновить();
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.ДокументОЖ);
		
		ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтредактироватьЗаписьСервер(ВыбраннаяСтрока)
	
	НаборЗаписей = РегистрыСведений.ЗамечанияКонтролера.СоздатьНаборЗаписей();  			
	НаборЗаписей.Отбор.ДокументОЖ.Установить(ВыбраннаяСтрока.ДокументОЖ);
	НаборЗаписей.Отбор.Ответственный.Установить(ВыбраннаяСтрока.Ответственный);
	НаборЗаписей.Отбор.Контролер.Установить(ВыбраннаяСтрока.Контролер);
	НаборЗаписей.Отбор.Замечание.Установить(ВыбраннаяСтрока.Замечание);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 1 Тогда
		НаборЗаписей[0].Ознакомился = Истина;
	КонецЕсли;
	НаборЗаписей.Записать(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияВРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;  
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.ДокументРаспоряжения);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", ПараметрыФормы, Элемент);		
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуСотрудника(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура; 	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.ЗавершениеРаботыСотрудникомСмены", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды 
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры  
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Авария(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	//2018
	Если ЗапрещенВводДокументов() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
		Возврат;
	КонецЕсли;
	//2018
	
	ПараметрыФормы = Новый Структура; 	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.Авария", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерБыстрогоВвода(Команда)
	ОткрытьФорму("Обработка.МастерВводаЗаписиВОЖ.Форма.Форма",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Обращение(Команда)
	
	Если Подразделение.Пустая() Тогда
		ПоказатьПредупреждение(, "Необходимо сначала заполнить Подразделение для текущего Пользователя!");
		Возврат;
	КонецЕсли;	
	
	//2018
	Если ЗапрещенВводДокументов() Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, "Сначала нужно Принять смену!");
		Возврат;
	КонецЕсли;
	//2018
	
	ПараметрыФормы = Новый Структура; 	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.Обращение", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОповещениеОтНСЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.ДокументРаспоряжения);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", ПараметрыФормы, Элемент);  		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбращенияВРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.ДокументРаспоряжения);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбращенияОтНСЦВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока  = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элемент.ТекущиеДанные.ДокументРаспоряжения);
	
	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТекущейСмене(Команда)
	
	ОтборПоТекущейСменеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборПоТекущейСменеНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктивныеСменыСрезПоследних.Регистратор.ДатаНачалаСмены КАК ДатаНачалаСмены
		|ИЗ
		|	РегистрСведений.АктивныеСмены.СрезПоследних(
		|			,
		|			СтаршийСмены = &СтаршийСмены
		|				И Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
		|ГДЕ
		|	АктивныеСменыСрезПоследних.СменаОткрыта";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", Пользователь);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		СруктураПараметровДат = Новый Структура;
		СруктураПараметровДат.Вставить("ДатаНачалаСмены", Результат.ДатаНачалаСмены);
	Иначе
		Возврат;
	КонецЕсли;
	////////////////////////////////////////////
	Отбор = Список.КомпоновщикНастроек.Настройки.Отбор;
	
	ОтборВПользовательскихНастройках = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
																			Отбор.ИдентификаторПользовательскойНастройки);
																			
	РаботаемСНастройками = Истина;																		
	Если ОтборВПользовательскихНастройках <> Неопределено Тогда
		
		РаботаемСНастройками = Ложь;
		Отбор = ОтборВПользовательскихНастройках;		
	
	КонецЕсли;																		
																			
	ОтборПоДатеНачалаСмены = Неопределено;
	ПолеДатаНачалаСмены = Новый ПолеКомпоновкиДанных("ДатаНачалаСмены");
	
	Для каждого ЭлементОтбора Из Отбор.Элементы Цикл
	
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			и ЭлементОтбора.ЛевоеЗначение = ПолеДатаНачалаСмены Тогда
			
			ОтборПоДатеНачалаСмены = ЭлементОтбора;
			Прервать;
		
		КонецЕсли;	
	
	КонецЦикла;
	
	Если ОтборПоДатеНачалаСмены = Неопределено Тогда
	
		ОтборПоДатеНачалаСмены = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоДатеНачалаСмены.ЛевоеЗначение = ПолеДатаНачалаСмены;
		ОтборПоДатеНачалаСмены.Использование = Ложь;
		ОтборПоДатеНачалаСмены.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		ОтборПоДатеНачалаСмены.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор;
		Элементы.Список.СоздатьЭлементыФормыПользовательскихНастроек();
	
	КонецЕсли;
	
	Если РаботаемСНастройками Тогда
	
		ОтборПоДатеНачалаСмены = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ОтборПоДатеНачалаСмены.ИдентификаторПользовательскойНастройки);
	
	КонецЕсли;
	ОтборПоДатеНачалаСмены.Использование = Не ОтборПоДатеНачалаСмены.Использование;
	
	ОтборПоДатеНачалаСмены.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборПоДатеНачалаСмены.ПравоеЗначение = СруктураПараметровДат.ДатаНачалаСмены;
	Элементы.ОтборПоТекущейСмене.Пометка = ОтборПоДатеНачалаСмены.Использование;
	Элементы.ОтборПоТекущейСмене.Заголовок = ?(ОтборПоДатеНачалаСмены.Использование, "Отобразить все", "Отобрать по текущей смене");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОЖ(Команда)
	
	ОткрытьФорму("Отчет.ПросмотрОперативногоЖурнала.Форма.ФормаОтчета");
	
КонецПроцедуры

&НаКлиенте
Процедура Шаблон(Команда)
	
	ПараметрыФормы = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ВыборШаблонаЗавершение", ЭтотОбъект);
 	ОткрытьФорму("Документ.ОперативныйЖурнал.Форма.МастерШаблон", ПараметрыФормы, ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		СформироватьДокумент(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокумент(ТекДанные) 
	
	мФормаДок = ПолучитьФорму("Документ.ОперативныйЖурнал.Форма.мФормаДокумента");
	
	мФормаДок.Объект.ВидЗаписи = ТекДанные.ВидЗаписи;
	мФормаДок.Объект.Событие = ТекДанные.Событие;
	мФормаДок.Объект.мШаблон = ТекДанные.ШаблонТекста;
	мФормаДок.ОбновитьСодержаниеЗаписи();
	
	мФормаДок.Открыть();
	
	Если Не мФормаДок.Открыта() Тогда 
		мФормаДок = Неопределено;
		Отказ = Истина;
		Возврат;
	КонецЕсли;    	
	
КонецПроцедуры

























