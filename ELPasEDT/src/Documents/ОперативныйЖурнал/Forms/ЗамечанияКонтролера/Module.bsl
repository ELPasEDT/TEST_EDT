
&НаКлиенте
Перем мФайлыЗомечаний;


&НаСервере
Функция ПрисоединитьЛистЗамечанияя(Док, Замечание)
	
	ИмяФайла = "Замечание";
	
	Макет = Документы.ОперативныйЖурнал.ПолучитьМакет("Замечание");
	ТабДок = Новый ТабличныйДокумент;
	Область = Макет.ПолучитьОбласть("Замечание");
	Область.Параметры.ТекстЗамечания = Комментарий;
	
	ТабДок.Вывести(Область);
	
	ИмяКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяКаталога);
	ПолноеИмяФайла = ИмяКаталога + "\" + ИмяФайла + ".mxl";
	
	ТабДок.Записать(ПолноеИмяФайла);
	
	Файл = Новый Файл(ПолноеИмяФайла);
		
	//РаботаСФайламиСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	АдресВременногоХранилищаТекста = "";
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ВладелецФайлов",              Док);
	ПараметрыФайла.Вставить("Автор",                       ПользователиКлиентСервер.ТекущийПользователь());
	ПараметрыФайла.Вставить("ИмяБезРасширения",            "КарточкаЗаписи");
	ПараметрыФайла.Вставить("РасширениеБезТочки",          "mxl");
	ПараметрыФайла.Вставить("ГруппаФайлов",                Неопределено);
	ПараметрыФайла.Вставить("ВремяИзменения");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", Файл.ПолучитьУниверсальноеВремяИзменения());
	
	ПрисоединенныйФайл = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(
		ПараметрыФайла,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста);
		
		
	УдалитьФайлы(ПолноеИмяФайла);
	УдалитьФайлы(ИмяКаталога);
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

&НаСервере
Функция СоздатьРаспоряжениеНаСервере() 
	
	/////////////////////////////////////////////////
	
	ИспользуетсяЭЦП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	
	///////////////////////////////////////////////////////////////////////////////
	// Проверим наличие сертификата у пользователя.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|	И СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &Пользователь
	|	//И СертификатыКлючейЭлектроннойПодписиИШифрования.Подписание");
	Запрос.УстановитьПараметр("Пользователь", ПользователиКлиентСервер.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ИспользуетсяЭЦП = Ложь;
	КонецЕсли;
	
	ФайлыЗомечаний = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	//Комментарий = "" + Автор + "( " + Автор.ФизическоеЛицо.Должность + ") " + Комментарий;
	
	Для Каждого ТекСтр Из СписокЗаписейОЖ Цикл
		//ДокументОбъект = ТекСтр.Документ.ПолучитьОбъект();
		//ДокументОбъект.ЗамечанияИРаспоряжения = Комментарий;
		//Попытка
		//	ДокументОбъект.Записать();
			
		Если ИспользуетсяЭЦП Тогда		
			ФайлыЗомечаний.Добавить(ПрисоединитьЛистЗамечанияя(ТекСтр.Документ, Комментарий));
		КонецЕсли;
			
		//Исключение
		//	Сообщить(ОписаниеОшибки());
		//КонецПопытки;
	КонецЦикла;
	
	//ДобавитьДвиженияПоРаспоряжению(); 	

	УстановитьПривилегированныйРежим(Ложь);

	Возврат ФайлыЗомечаний;
	
КонецФункции

&НаСервере
Функция ПользовательПринялСмену(Подразделение)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.АктивныеСмены.СрезПоследних(, Подразделение = &Подразделение) КАК АктивныеСменыСрезПоследних
	|ГДЕ
	|	АктивныеСменыСрезПоследних.СтаршийСмены = &СтаршийСмены
	|	И АктивныеСменыСрезПоследних.СменаОткрыта");
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("СтаршийСмены", ПользователиКлиентСервер.ТекущийПользователь());
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ДобавитьДвиженияПоРаспоряжению()
	
	Для Каждого ТекСтрСотрудник Из СписокСотрудников Цикл
		Если ТекСтрСотрудник.Выбран И ЗначениеЗаполнено(ТекСтрСотрудник.Сотрудник) Тогда
			Для Каждого ТекСтр Из СписокЗаписейОЖ Цикл
				МенеджерЗаписи = РегистрыСведений.ЗамечанияКонтролера.СоздатьМенеджерЗаписи(); 
				МенеджерЗаписи.ДокументОЖ = ТекСтр.Документ;
				МенеджерЗаписи.Ответственный = ТекСтрСотрудник.Сотрудник;
				МенеджерЗаписи.Контролер = Автор;
				МенеджерЗаписи.Замечание = Комментарий;
				МенеджерЗаписи.Дата = ТекущаяДата();
				МенеджерЗаписи.Ознакомился = Ложь;
				МенеджерЗаписи.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПользователя(ФизическоеЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
		|	И НЕ Пользователи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСписокСотрудников() 	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АктивныеСмены.Период КАК Период,
	//	|	АктивныеСмены.Регистратор КАК Регистратор
	//	|ПОМЕСТИТЬ ВТ_Регистр
	//	|ИЗ
	//	|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
	//	|ГДЕ
	//	|	АктивныеСмены.Подразделение В ИЕРАРХИИ(&Подразделение)
	//	|	И АктивныеСмены.СменаОткрыта
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
	//	|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Регистр.Регистратор КАК Регистратор
	//	|ПОМЕСТИТЬ ВТ_Регистратор
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
	//	|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ОперативныйЖурналСотрудники.Сотрудник КАК Сотрудник
	//	|ИЗ
	//	|	Документ.ОперативныйЖурнал.Сотрудники КАК ОперативныйЖурналСотрудники
	//	|ГДЕ
	//	|	ОперативныйЖурналСотрудники.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				ВТ_Регистратор.Регистратор КАК Регистратор
	//	|			ИЗ
	//	|				ВТ_Регистратор КАК ВТ_Регистратор)
	//	|	И ОперативныйЖурналСотрудники.Выбран
	//	|	И ОперативныйЖурналСотрудники.Сотрудник.Должность = &ДолжностьНСЦ";
	//
	//Запрос.УстановитьПараметр("Подразделение", Автор.Подразделение);
	//Запрос.УстановитьПараметр("ДолжностьНСЦ", ПолучитьДолжностьНСЦ());
	//
	//масСотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	//
	//////////////////////////////////
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АктивныеСмены.Период КАК Период,
	//	|	АктивныеСмены.Регистратор КАК Регистратор
	//	|ПОМЕСТИТЬ ВТ_Регистр
	//	|ИЗ
	//	|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
	//	|ГДЕ
	//	|	АктивныеСмены.СтаршийСмены.ФизическоеЛицо В(&масСотрудники)
	//	|	И АктивныеСмены.СменаОткрыта
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
	//	|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Регистр.Регистратор КАК Регистратор
	//	|ПОМЕСТИТЬ ВТ_ДокументСменыСдачи
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
	//	|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ОперативныйЖурналСотрудники.Ссылка.Вахта КАК Вахта,
	//	|	ОперативныйЖурналСотрудники.Ссылка.Смена КАК Смена,
	//	|	ОперативныйЖурналСотрудники.Ссылка.СтаршийСмены.ФизическоеЛицо КАК Сотрудник,
	//	|	ИСТИНА КАК Выбран,
	//	|	ОперативныйЖурналСотрудники.Ссылка.ДатаНачалаСмены КАК ДатаНачалаСмены,
	//	|	ОперативныйЖурналСотрудники.Ссылка.ДатаОкончанияСмены КАК ДатаОкончанияСмены
	//	|ИЗ
	//	|	Документ.ОперативныйЖурнал.Сотрудники КАК ОперативныйЖурналСотрудники
	//	|ГДЕ
	//	|	ОперативныйЖурналСотрудники.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				ВТ_ДокументСменыСдачи.Регистратор КАК Регистратор
	//	|			ИЗ
	//	|				ВТ_ДокументСменыСдачи КАК ВТ_ДокументСменыСдачи)
	//	|	И ОперативныйЖурналСотрудники.Выбран";
	//
	//Запрос.УстановитьПараметр("масСотрудники", масСотрудники);
	//
	//СписокСотрудников.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Функция ПолучитьДолжностьНСЦ()
	
	//Запрос = Новый Запрос;
	//
	//Запрос.Текст =  	
	//"ВЫБРАТЬ
	//|	Должности.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.Должности КАК Должности
	//|ГДЕ
	//|	НЕ Должности.ПометкаУдаления
	//|	И Должности.Наименование = &Наименование";
	//
	//Запрос.УстановитьПараметр("Наименование", "Начальник смены цеха");
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//	Возврат Результат.Ссылка;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавлениеПодписейЗавершить(Успех, Контекст) Экспорт
	
	//Если Успех = Истина Тогда
	//	УстановитьДоступностьФайловыхКоманд();
	//КонецЕсли;
	
	Если Успех Тогда
		ДобавитьКомментарийИДвижения(Успех);
	КонецЕсли;
	
	Если Не Успех Тогда
		УдалитьФайлыДокумента(мФайлыЗомечаний);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомментарийИДвижения(Отказ)
	
	Для Каждого ТекСтр Из СписокЗаписейОЖ Цикл
		ДокументОбъект = ТекСтр.Документ.ПолучитьОбъект();
		ТекстЗамечания = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица(Автор.ФизическоеЛицо.Наименование) + ": " + Комментарий;
		ДокументОбъект.ЗамечанияИРаспоряжения = ?(ЗначениеЗаполнено(ДокументОбъект.ЗамечанияИРаспоряжения), ДокументОбъект.ЗамечанияИРаспоряжения + Символы.ПС + ТекстЗамечания, ТекстЗамечания);
		Попытка
			ДокументОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЦикла;
		
	ДобавитьДвиженияПоРаспоряжению(); 	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьФайлыДокумента(Файлы)
	
	Для Каждого Файл Из Файлы Цикл
		МЗ = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
		МЗ.Файл = Файл;
		МЗ.Удалить();
		
		МЗ = РегистрыСведений.СведенияОФайлах.СоздатьМенеджерЗаписи();
		МЗ.Файл = Файл;
		МЗ.Удалить();
		
		Массив = Новый Массив; 
		Массив.Добавить(Файл);
		
		Если НайтиПоСсылкам(Файлы).Количество() = 0 Тогда
			Файл.ПолучитьОбъект().Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРаспоряжение(Команда)
	
	//20190125
	//Проверка заполнения списка документов
	ПроверкаНаЗаполненность = Истина;	
	НомСтр = 1;
	Для Каждого ТекСтр Из СписокЗаписейОЖ Цикл
		Если Не ЗначениеЗаполнено(ТекСтр.Документ) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не заполнен Документ в строке " + НомСтр;
			Сообщение.Сообщить();			
			ПроверкаНаЗаполненность = Ложь;
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	Если Не ПроверкаНаЗаполненность Тогда
		Возврат;
	КонецЕсли;
	//20190125
	
	Если ПодпсатьЭЦП Тогда
		
		мФайлыЗомечаний = СоздатьРаспоряжениеНаСервере();
		
		Если мФайлыЗомечаний.Количество() > 0 Тогда
			РаботаСФайламиСлужебныйКлиент.ПодписатьФайлы(мФайлыЗомечаний, УникальныйИдентификатор,
				Новый ОписаниеОповещения("ДобавлениеПодписейЗавершить", ЭтотОбъект));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Замечания добавлены!");	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруПараметров(СтруктураПараметров)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	АктивныеСмены.Период КАК Период,
	//	|	АктивныеСмены.Регистратор КАК Регистратор
	//	|ПОМЕСТИТЬ ВТ_Регистр
	//	|ИЗ
	//	|	РегистрСведений.АктивныеСмены КАК АктивныеСмены
	//	|ГДЕ
	//	|	АктивныеСмены.Подразделение = &Подразделение
	//	|	И АктивныеСмены.СтаршийСмены = &СтаршийСмены
	//	|	И АктивныеСмены.СменаОткрыта
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(ВТ_Регистр.Период) КАК Период
	//	|ПОМЕСТИТЬ ВТ_ПоследняяЗаписьПоПодразделению
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_Регистр.Регистратор.Вахта КАК Вахта,
	//	|	ВТ_Регистр.Регистратор.Смена КАК Смена,
	//	|	ВТ_Регистр.Регистратор.ДатаНачалаСмены КАК ДатаНачалаСмены,
	//	|	ВТ_Регистр.Регистратор.ДатаОкончанияСмены КАК ДатаОкончанияСмены
	//	|ИЗ
	//	|	ВТ_Регистр КАК ВТ_Регистр
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследняяЗаписьПоПодразделению КАК ВТ_ПоследняяЗаписьПоПодразделению
	//	|		ПО ВТ_Регистр.Период = ВТ_ПоследняяЗаписьПоПодразделению.Период";
	//
	//Запрос.УстановитьПараметр("Подразделение", Автор.Подразделение);
	//Запрос.УстановитьПараметр("СтаршийСмены", Автор);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Результат);
	//КонецЕсли;   	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Автор = ПараметрыСеанса.ТекущийПользователь;
	//ЗаполнитьСписокСотрудников();
	Подразделение = Автор.Подразделение;
	
	Если Параметры.Свойство("ДокументыОЖ") Тогда
		Для Каждого Стр Из Параметры.ДокументыОЖ Цикл
			НовСтр = СписокЗаписейОЖ.Добавить();
			НовСтр.Документ = Стр.Ссылка;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодпсатьЭЦП") Тогда
		ПодпсатьЭЦП = Параметры.ПодпсатьЭЦП;
	КонецЕсли;
	
	ПодпсатьЭЦП = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОборудованияПриИзменении(Элемент)
	
	//ТекДанные = Элементы.СписокОборудования.ТекущиеДанные;
	//ТекДанные.ДиспетчерскоеНаименование = ПолучитьДиспетчерскоеНаименование(ТекДанные.Оборудование);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДиспетчерскоеНаименование(Оборудование)
	
	//Возврат Оборудование.ДиспетчерскоеНаименование;
	
КонецФункции

&НаКлиенте
Процедура СписокСотрудниковПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокСотрудников.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда  		
		Если СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник)).Количество() > 1 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ТекДанные.Сотрудник))[0].Выбран = Истина;
			Элементы.СписокСотрудников.ЗакончитьРедактированиеСтроки(Истина);
			Возврат;
		КонецЕсли; 		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ПроверитьПодразделениеПользователя(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Подразделение));
		ВыбранноеЗначение = Неопределено;;
	КонецЕсли;
	
	Элемент = ВыбранноеЗначение;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПодразделениеПользователя(Пользователь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекПодразделение = Пользователь.Подразделение;
	ПроверкаПройдена = Ложь;
	
	Пока ЗначениеЗаполнено(ТекПодразделение) Цикл
		
		Если ТекПодразделение = Подразделение Тогда
			ПроверкаПройдена = Истина;
			Прервать;
		КонецЕсли;
		
		ТекПодразделение = ТекПодразделение.Родитель;
		
	КонецЦикла;
	
	Возврат ПроверкаПройдена;
	
КонецФункции

&НаКлиенте
Процедура Подбор(Команда)
	
	Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
    ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
	Форма = ОткрытьФорму("Справочник.Пользователи.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма); 
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = "Подбор сотрудников";
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОборудованияОборудованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Документ.ОперативныйЖурнал.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОповещенияПриИзменении(Элемент)
	
	ЗаполнитьСтрудниковСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрудниковСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыОповещенияСотрудники.Сотрудник КАК Сотрудник,
		|	ИСТИНА КАК Выбран
		|ИЗ
		|	Справочник.ГруппыОповещения.Сотрудники КАК ГруппыОповещенияСотрудники
		|ГДЕ
		|	НЕ ГруппыОповещенияСотрудники.Ссылка.ПометкаУдаления
		|	И ГруппыОповещенияСотрудники.Ссылка.Ссылка = &ГруппаОповещения";
	
	Запрос.УстановитьПараметр("ГруппаОповещения", ГруппаОповещения);
	
	СписокСотрудников.Загрузить(Запрос.Выполнить().Выгрузить());	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОповещенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
    Настройки = Новый НастройкиКомпоновкиДанных;
 
    ЭлементНастройки = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементНастройки.Использование = Истина;
    ЭлементНастройки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
    ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
    ЭлементНастройки.ПравоеЗначение = Подразделение;
    ЭлементНастройки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
     
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("ФиксированныеНастройки", Настройки);
     
    ОткрытьФорму("Справочник.ГруппыОповещения.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Если СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() > 0 Тогда
			ПоказатьПредупреждение(,"Данный сотрудник уже есть в табличной части!");
			СписокСотрудников.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение))[0].Выбран = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьПодразделениеПользователя(ВыбранноеЗначение) Тогда
			ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный сотрудник не относится к подразделению %1", Подразделение));
			Возврат;
		КонецЕсли;
		
		НовСтр = СписокСотрудников.Добавить();
		НовСтр.Сотрудник = ВыбранноеЗначение;
		НовСтр.Выбран = Истина;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СписокСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Выбран = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСотрудниковСотрудникИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
























