Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
	Подразделение = ПараметрыСеанса.ТекущийПользователь.Подразделение;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ВидЗаписи") Тогда
			Если ДанныеЗаполнения.ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
				ЗаполнитьЧекЛист();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДатаСобытия = ТекущаяДатаСеанса();
	
	//Ввод на основании Распоряжения
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперативныйЖурнал") И ДанныеЗаполнения.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Дата, Номер, Распоряжение, ПолученоОт, Событие, Проведен, Ответственный, СтатусОтданногоРаспоряжения");
		//20180312
		Если ДанныеЗаполнения.Событие = Справочники.События.ПринятоРаспоряжение Тогда
			Распоряжение = ДанныеЗаполнения.Распоряжение;
		Иначе
			Распоряжение = ДанныеЗаполнения;
		КонецЕсли;
		//Распоряжение = ДанныеЗаполнения;//.Распоряжение;
		//20180312
		//ПолученоОт = ДанныеЗаполнения.Ответственный;
		ПолученоОт = ДанныеЗаполнения.ПолученоОт;
		Событие = Справочники.События.РаспоряжениеВыполнено;
		Для Каждого ТекСтр Из ДанныеЗаполнения.Оборудование Цикл
			НовСтр = Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		КонецЦикла;
	//Ввод на основании Обращения
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперативныйЖурнал") И ДанныеЗаполнения.ВидЗаписи = Справочники.ВидыЗаписей.Обращение Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Дата, Номер, Распоряжение, ПолученоОт, Событие, Проведен, Ответственный, СтатусОтданногоРаспоряжения");
		Если ДанныеЗаполнения.Событие = Справочники.События.ПринятоОбращение Тогда
			Распоряжение = ДанныеЗаполнения.Распоряжение;
		Иначе
			Распоряжение = ДанныеЗаполнения;
		КонецЕсли;
		ПолученоОт = ДанныеЗаполнения.ПолученоОт;
		Событие = Справочники.События.ОбращениеВыполнено;
		Для Каждого ТекСтр Из ДанныеЗаполнения.Оборудование Цикл
			НовСтр = Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		КонецЦикла;	
	//Ввод на основании документа смены
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперативныйЖурнал") И Не ДанныеЗаполнения.ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, , "Дата, Номер, Событие, Проведен, Ответственный, СтатусОтданногоРаспоряжения");
		Событие = ПолучитьСледующееСобытие(ДанныеЗаполнения.ВидЗаписи, ДанныеЗаполнения.Событие);
		Распоряжение = ПолучитьПервыйДокументОснование(ДанныеЗаполнения);
		Для Каждого ТекСтр Из ДанныеЗаполнения.Оборудование Цикл
			НовСтр = Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		КонецЦикла;
		Для Каждого ТекСтр Из ДанныеЗаполнения.Сотрудники Цикл
			НовСтр = Сотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПервыйДокументОснование(ДанныеЗаполнения)
	
	ДокРаспоряжение = ДанныеЗаполнения.Распоряжение;
	Если ЗначениеЗаполнено(ДокРаспоряжение) Тогда
		ДокРаспоряжение = ПолучитьПервыйДокументОснование(ДокРаспоряжение);
	Иначе
		ДокРаспоряжение = ДанныеЗаполнения;
	КонецЕсли;
	Возврат ДокРаспоряжение;
	
КонецФункции

Функция ПолучитьСледующееСобытие(ВидЗаписи, ПредыдущееСобытие) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыЗаписейСобытияПоПодразделениямСрезПоследних.Событие КАК Событие,
	|	ВидыЗаписейСобытияПоПодразделениямСрезПоследних.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_Рег
	|ИЗ
	|	РегистрСведений.ВидыЗаписейСобытияПоПодразделениям.СрезПоследних(
	|			,
	|			Подразделение = &Подразделение
	|				И ВидЗаписи = &ВидЗаписи) КАК ВидыЗаписейСобытияПоПодразделениямСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Рег.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТ_Порядок
	|ИЗ
	|	ВТ_Рег КАК ВТ_Рег
	|ГДЕ
	|	ВТ_Рег.Событие = &Событие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_Рег.Событие КАК Событие
	|ИЗ
	|	ВТ_Рег КАК ВТ_Рег
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Порядок КАК ВТ_Порядок
	|		ПО ВТ_Рег.Порядок > ВТ_Порядок.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Рег.Порядок";
	
	Запрос.УстановитьПараметр("Событие", ПредыдущееСобытие);
	Запрос.УстановитьПараметр("ВидЗаписи", ВидЗаписи);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Событие;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	ВидыЗаписейСобытия.Ссылка КАК Ссылка,
	//	|	ВидыЗаписейСобытия.Событие КАК Событие,
	//	|	ВидыЗаписейСобытия.НомерСтроки КАК НомерСтроки
	//	|ПОМЕСТИТЬ ВТ_События
	//	|ИЗ
	//	|	Справочник.ВидыЗаписей.События КАК ВидыЗаписейСобытия
	//	|ГДЕ
	//	|	ВидыЗаписейСобытия.Ссылка = &Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_События.НомерСтроки + 1 КАК НомерСтроки
	//	|ПОМЕСТИТЬ ВТ_НомерСтроки
	//	|ИЗ
	//	|	ВТ_События КАК ВТ_События
	//	|ГДЕ
	//	|	ВТ_События.Событие = &Событие
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ_События.Событие КАК Событие
	//	|ИЗ
	//	|	ВТ_События КАК ВТ_События
	//	|ГДЕ
	//	|	ВТ_События.НомерСтроки В
	//	|			(ВЫБРАТЬ
	//	|				ВТ_НомерСтроки.НомерСтроки КАК НомерСтроки
	//	|			ИЗ
	//	|				ВТ_НомерСтроки КАК ВТ_НомерСтроки)";
	//
	//Запрос.УстановитьПараметр("Событие", ПредыдущееСобытие);
	//Запрос.УстановитьПараметр("Ссылка", ВидЗаписи);
	//
	//Результат = Запрос.Выполнить().Выбрать();
	//
	//Если Результат.Следующий() Тогда
	//	Возврат Результат.Событие;
	//Иначе
	//	Возврат Неопределено;
	//КонецЕсли;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ДокументЗакрытия) Тогда
		ДокОбъект = ДокументЗакрытия.ПолучитьОбъект();
		ДокОбъект.Дата = ДатаСобытия + 1;
		Попытка
			ДокОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик
		И ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
		Если Событие = Справочники.События.СменуПринял Тогда 
			ДобавитьДвиженияАктивныеСмены(Истина);
		Иначе
			ДобавитьДвиженияАктивныеСмены(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик Тогда
		ДобавитьДвиженияСостояниеОборудования();
		ДобавитьДвиженияОборудованиеНаКонтроле();
		ДобавитьДвиженияСобытияОперативногоЖурнала();
	КонецЕсли;
	
	//Распоряжение
	Если ЗначениеЗаполнено(Распоряжение) И Событие = Справочники.События.ПолученоРаспоряжение Тогда
		//Сформировать ответ на распоряжение
		СформироватьДокументРаспоряжение();		
	КонецЕсли;
	
	//Движения по Распоряжению
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		//Если Событие = Справочники.События.РаспоряжениеВыполнено ИЛИ Событие = Справочники.События.ПолученоРаспоряжение 
		//	ИЛИ Событие = Справочники.События.ОтданоРаспоряжение ИЛИ Событие = Справочники.События.РаспоряжениеНеВыполнено Тогда
		Если Не ЭтоОтвет Тогда 
			ИзменитьСтатусРаспоряжения();
			Если ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС ИЛИ ВидЗаписи = Справочники.ВидыЗаписей.Обращение Тогда
				ДобавитьДвиженияПоРаспоряжению();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//Ответ
	Если Не ЭтоОтвет И ЗначениеЗаполнено(Распоряжение) И (Событие = Справочники.События.РаспоряжениеВыполнено ИЛИ Событие = Справочники.События.РаспоряжениеНеВыполнено) Тогда
		СформироватьОтветНаРаспоряжение();
	КонецЕсли;
	
	//Обращение
	Если ЗначениеЗаполнено(Распоряжение) И Событие = Справочники.События.ПолученоОбращение Тогда
		//Сформировать ответ на обращение
		СформироватьДокументОбращение();		
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Распоряжение) Тогда
	//	Если Не ЭтоОтвет Тогда 
	//		ИзменитьСтатусОбращения();
	//	КонецЕсли;
	//КонецЕсли;
	
	//Ответ
	Если Не ЭтоОтвет И ЗначениеЗаполнено(Распоряжение) И (Событие = Справочники.События.ОбращениеВыполнено ИЛИ Событие = Справочники.События.ОбращениеНеВыполнено) Тогда
		СформироватьОтветНаОбращение();
	КонецЕсли;
	//Обращение
	
КонецПроцедуры  

Процедура СформироватьОтветНаРаспоряжение()	
	
	РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
	
	Если ОтветБылСформированРанее(РаспоряжениеОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	НовДок = РаспоряжениеОбъект.Скопировать();
	Если ДополнительныеСвойства.Свойство("ТекущаяДатаКлиент") Тогда
		НовДок.Дата = ДополнительныеСвойства.ТекущаяДатаКлиент;
	Иначе
		НовДок.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	НовДок.Событие = Событие;
	НовДок.ЭтоОтвет = Истина;
	НовДок.Комментарий = СтрЗаменить(Комментарий, "НСС -> НСЦ ", "НСС <- НСЦ (" + Строка(Ответственный) + ")");//"Ознакомился с распоряжением от " + ПолученоОт + ": " + Комментарий;
	НовДок.ДатаСобытия = ДатаСобытия;
	НовДок.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
	НовДок.Чистовик = Ложь;
	НовДок.Распоряжение = РаспоряжениеОбъект.Ссылка;
	НовДок.СтатусОтданногоРаспоряжения = Неопределено;
	
	Попытка
		НовДок.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 	
	
КонецПроцедуры

Процедура СформироватьОтветНаОбращение()	
	
	РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
	
	Если ОтветБылСформированРанее(РаспоряжениеОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	НовДок = РаспоряжениеОбъект.Скопировать();
	Если ДополнительныеСвойства.Свойство("ТекущаяДатаКлиент") Тогда
		НовДок.Дата = ДополнительныеСвойства.ТекущаяДатаКлиент;
	Иначе
		НовДок.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	НовДок.Событие = Событие;
	НовДок.ЭтоОтвет = Истина;
	НовДок.ДатаСобытия = ДатаСобытия;
	НовДок.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик;
	НовДок.Чистовик = Ложь;
	НовДок.Распоряжение = РаспоряжениеОбъект.Ссылка;
	НовДок.СтатусОтданногоРаспоряжения = Неопределено;
	
	Попытка
		НовДок.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 	
	
КонецПроцедуры

Процедура ДобавитьДвиженияПоРаспоряжению()
	
	Если Событие = Справочники.События.ПолученоРаспоряжение ИЛИ Событие = Справочники.События.ПолученоОбращение Тогда// ИЛИ Событие = Справочники.События.РаспоряжениеНеВыполнено ИЛИ Событие = Справочники.События.ПринятоРаспоряжение Тогда
		ДокРаспоряжения = Ссылка;
	Иначе 
		ДокРаспоряжения = Распоряжение;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.Распоряжения.СоздатьНаборЗаписей(); 
	//НаборЗаписей.Отбор.Распоряжение.Установить(ДокРаспоряжения);
	НаборЗаписей.Отбор.Распоряжение.Установить(Распоряжение);
	НаборЗаписей.Отбор.Ответственный.Установить(Ответственный);
	НаборЗаписей.Прочитать();	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Если Событие = Справочники.События.РаспоряжениеВыполнено ИЛИ Событие = Справочники.События.РаспоряжениеНеВыполнено
			ИЛИ Событие = Справочники.События.ОбращениеВыполнено ИЛИ Событие = Справочники.События.ОбращениеНеВыполнено Тогда
			Запись.ДатаИсполнения = ДатаСобытия; 			
		Иначе
			Запись.Ознакомился = Истина;
		КонецЕсли;
	КонецЕсли;	
	НаборЗаписей.Записать();   	
	
КонецПроцедуры 

Процедура ИзменитьСтатусРаспоряжения()
	
	Если Событие = Справочники.События.ПринятоРаспоряжение ИЛИ Событие = Справочники.События.ПринятоОбращение Тогда
		Возврат;
	КонецЕсли;
	РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
	
	Если Событие = Справочники.События.РаспоряжениеВыполнено ИЛИ Событие = Справочники.События.ОбращениеВыполнено Тогда
		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.Выполнено;
		РаспоряжениеОбъект.Завершено = Истина;
	ИначеЕсли Событие = Справочники.События.РаспоряжениеНеВыполнено ИЛИ Событие = Справочники.События.ОбращениеНеВыполнено Тогда
		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.НеВыполнено;
		РаспоряжениеОбъект.Завершено = Истина;
	Иначе
		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.ВРаботе;
	КонецЕсли;
	
	Попытка
		РаспоряжениеОбъект.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//Процедура ИзменитьСтатусОбращения()
//	
//	Если Событие = Справочники.События.ПринятоОбращение Тогда
//		Возврат;
//	КонецЕсли;
//	РаспоряжениеОбъект = Распоряжение.ПолучитьОбъект();
//	
//	Если Событие = Справочники.События.ОбращениеВыполнено Тогда
//		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.Выполнено;
//		РаспоряжениеОбъект.Завершено = Истина;
//	ИначеЕсли Событие = Справочники.События.ОбращениеНеВыполнено Тогда
//		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.НеВыполнено;
//		РаспоряжениеОбъект.Завершено = Истина;
//	Иначе
//		РаспоряжениеОбъект.СтатусОтданногоРаспоряжения = Перечисления.СтатусыОтданныхРаспоряжений.ВРаботе;
//	КонецЕсли;
//	
//	Попытка
//		РаспоряжениеОбъект.Записать();
//	Исключение
//	КонецПопытки;
//	
//КонецПроцедуры

Процедура СформироватьДокументРаспоряжение()
	
	Если ДокументБылСформированРанее() Тогда
		Возврат;
	КонецЕсли;
	
	//Формируем ответ на распоряжение
	НовДок = Документы.ОперативныйЖурнал.СоздатьДокумент();
	Если ДополнительныеСвойства.Свойство("ТекущаяДатаКлиент") Тогда
		НовДок.Дата = ДополнительныеСвойства.ТекущаяДатаКлиент;
	Иначе
		НовДок.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	НовДок.ВидЗаписи = Справочники.ВидыЗаписей.РаспоряжениеНСС;
	НовДок.Событие = Справочники.События.ПринятоРаспоряжение;
	НовДок.Ответственный = Ответственный;
	НовДок.Комментарий = Комментарий;
	НовДок.Подразделение = Подразделение;
	НовДок.ДатаСобытия = ДатаСобытия;
	НовДок.Смена = Смена;
	НовДок.Вахта = Вахта;
	НовДок.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик;
	НовДок.Чистовик = Истина;
	НовДок.ДатаНачалаСмены = ДатаНачалаСмены;
	НовДок.ДатаОкончанияСмены = ДатаОкончанияСмены;
	НовДок.ПолученоОт = ПолученоОт;
	//20180312
	//НовДок.Распоряжение = Ссылка;
	НовДок.Распоряжение = Распоряжение;
	//20180312
	
	Для Каждого ТекСтр Из Распоряжение.Оборудование Цикл
		НовСтр = НовДок.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
	КонецЦикла;
	
	Попытка
		НовДок.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 	
	
КонецПроцедуры

Процедура СформироватьДокументОбращение()
	
	Если ДокументБылСформированРанее() Тогда
		Возврат;
	КонецЕсли;
	
	//Формируем ответ на обращение
	НовДок = Документы.ОперативныйЖурнал.СоздатьДокумент();
	Если ДополнительныеСвойства.Свойство("ТекущаяДатаКлиент") Тогда
		НовДок.Дата = ДополнительныеСвойства.ТекущаяДатаКлиент;
	Иначе
		НовДок.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	НовДок.ВидЗаписи = Справочники.ВидыЗаписей.Обращение;
	НовДок.Событие = Справочники.События.ПринятоОбращение;
	НовДок.Ответственный = Ответственный;
	НовДок.Комментарий = Комментарий;
	НовДок.Подразделение = Подразделение;
	НовДок.ДатаСобытия = ДатаСобытия;
	НовДок.Смена = Смена;
	НовДок.Вахта = Вахта;
	НовДок.Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик;
	НовДок.Чистовик = Истина;
	НовДок.ДатаНачалаСмены = ДатаНачалаСмены;
	НовДок.ДатаОкончанияСмены = ДатаОкончанияСмены;
	НовДок.ПолученоОт = ПолученоОт;
	НовДок.Распоряжение = Распоряжение;
	
	Для Каждого ТекСтр Из Распоряжение.Оборудование Цикл
		НовСтр = НовДок.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
	КонецЦикла;
	
	Попытка
		НовДок.Записать();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 	
	
КонецПроцедуры

Функция ДокументБылСформированРанее()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперативныйЖурнал.Ссылка КАК Ссылка,
		|	ОперативныйЖурнал.Ответственный КАК Ответственный,
		|	ОперативныйЖурнал.ПолученоОт КАК ПолученоОт,
		|	ОперативныйЖурнал.Распоряжение КАК Распоряжение,
		|	ОперативныйЖурнал.Статус КАК Статус
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	ОперативныйЖурнал.Распоряжение = &Распоряжение
		|	И НЕ ОперативныйЖурнал.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументаОперативногоЖурнала.РаспоряжениеПолучено)
		|	И ОперативныйЖурнал.Ответственный = &Ответственный
		|	И НЕ ОперативныйЖурнал.ПометкаУдаления
		|	И НЕ ОперативныйЖурнал.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственный);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;  	
	
КонецФункции

Функция ОтветБылСформированРанее(РаспоряжениеОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперативныйЖурнал.Ссылка КАК Ссылка,
		|	ОперативныйЖурнал.Распоряжение КАК Распоряжение,
		|	ОперативныйЖурнал.Комментарий КАК Комментарий,
		|	ОперативныйЖурнал.Событие КАК Событие
		|ИЗ
		|	Документ.ОперативныйЖурнал КАК ОперативныйЖурнал
		|ГДЕ
		|	ОперативныйЖурнал.Распоряжение = &Распоряжение
		|	И ОперативныйЖурнал.ЭтоОтвет
		|	И (ОперативныйЖурнал.Событие = ЗНАЧЕНИЕ(Справочник.События.РаспоряжениеВыполнено)
		|			ИЛИ ОперативныйЖурнал.Событие = ЗНАЧЕНИЕ(Справочник.События.РаспоряжениеНеВыполнено))
		|	И НЕ ОперативныйЖурнал.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Распоряжение", РаспоряжениеОбъект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;  	
	
КонецФункции

Процедура ДобавитьДвиженияОборудованиеНаКонтроле()
	
	Движения.ОборудованиеНаКонтроле.Записывать = Истина;
	Для Каждого ТекСтрокаОборудование Из Оборудование Цикл
		Если Не ТекСтрокаОборудование.СтатусОборудования = Перечисления.СтатусыОборудования.ЗаписьОЖ И 
			(ЗначениеЗаполнено(ТекСтрокаОборудование.ДатаВыходаИзСтроя) ИЛИ ЗначениеЗаполнено(ТекСтрокаОборудование.ДатаОкончанияРемонтныхРабот)) Тогда
			Движение = Движения.ОборудованиеНаКонтроле.Добавить();
			Движение.Период = ДатаСобытия;
			Движение.Подразделение = Подразделение;
			Движение.Оборудование = ТекСтрокаОборудование.Оборудование;
			Движение.СтатусОборудования = ТекСтрокаОборудование.СтатусОборудования;
			Движение.СтатусАктуален = ТекСтрокаОборудование.СтатусАктуален;
			Движение.ДатаВыходаИзСтроя = ТекСтрокаОборудование.ДатаВыходаИзСтроя;
			Движение.ДатаОкончанияРемонтныхРабот = ТекСтрокаОборудование.ДатаОкончанияРемонтныхРабот;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияСобытияОперативногоЖурнала()
	
	Движения.СобытияОперативногоЖурнала.Записывать = Истина;
	Для Каждого ТекСтрокаОборудование Из Оборудование Цикл
		Движение = Движения.СобытияОперативногоЖурнала.Добавить();
		Движение.Период = ДатаСобытия;
		Движение.Подразделение = Подразделение;
		Движение.Оборудование = ТекСтрокаОборудование.Оборудование;
		Движение.ВидЗаписи = ВидЗаписи;
		Движение.Событие = Событие;
		Движение.Ответственный = Ответственный;
		Движение.СодержаниеЗаписи = ТекСтрокаОборудование.СодержаниеЗаписи;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДвиженияСостояниеОборудования()
	
	Движения.СостояниеОборудования.Записывать = Истина;
	Для Каждого ТекСтрокаОборудование Из Оборудование Цикл
		Движение = Движения.СостояниеОборудования.Добавить();
		Движение.Период = ДатаСобытия;
		Движение.Подразделение = Подразделение;
		Движение.Оборудование = ТекСтрокаОборудование.Оборудование;
		Движение.СостояниеОборудования = ТекСтрокаОборудование.СостояниеОборудования;
		Движение.СтатусОборудования = ТекСтрокаОборудование.СтатусОборудования;
	КонецЦикла;   	
	
КонецПроцедуры

Процедура ДобавитьДвиженияАктивныеСмены(СменаОткрыта)
	
	Движения.АктивныеСмены.Записывать = Истина;
	Движение = Движения.АктивныеСмены.Добавить();
	Если ЗначениеЗаполнено(ДокументЗакрытия) Тогда
		Движение.Период = ДокументЗакрытия.ДатаСобытия + 2;
	Иначе
		Движение.Период = ДатаСобытия;
	КонецЕсли;
	Движение.Подразделение = Подразделение;
	Движение.Смена = Смена;
	Движение.СтаршийСмены = СтаршийСмены;
	Движение.СменаОткрыта = СменаОткрыта; 
	
КонецПроцедуры 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения) 
	
	Если ОбменДанными.Загрузка Тогда
		//удалить после перезаписи
		Если стрДлина(Строка(Смена.ВремяНачала)) = 19 Тогда
			тВремяНачала = " " + Лев(Прав(Смена.ВремяНачала, 8), 5);
		Иначе
			тВремяНачала = " 0" + СокрЛП(Лев(Прав(Смена.ВремяНачала, 8), 5));
		КонецЕсли;	
		тВремяОкончания = Лев(Прав(Смена.ВремяОкончания, 8), 5);
		
		СменаПрописью = Формат(ДатаНачалаСмены, "ДФ=yyyy/MM/dd") + тВремяНачала + " - " + тВремяОкончания;
		//удалить после перезаписи
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументЗакрытия) И Не ДокументЗакрытия.СменаЗакрыта И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДокОбъект = ДокументЗакрытия.ПолучитьОбъект();
		ДокОбъект.СменаЗакрыта = Истина; 
		ДокОбъект.Обменданными.Загрузка = Истина;
		ДокОбъект.Записать();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И 
		Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Черновик Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Проводить можно только документ в статусе ""Чистовик""!";
		Сообщение.Сообщить();   
		Отказ = Истина;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 		
		Если ПометкаУдаления Тогда
			Если Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик Тогда
				ДатаЭП = ПолучитьДатуЭПЗакрытияСмены();
				Если Дата > ДатаЭП Тогда
					Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен;
					ПометкаУдаления = Ложь;
				Иначе
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = "Пометить на удаление документ, после закрытия смены с подписью ЭЦП, нельзя!";
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе 		
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Отменить проведение документа нельзя!";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.ЧистовикОтменен И ПометкаУдаления Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Невозможно удаление записей, ранее отраженных в ОЖ";
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыДокументаОперативногоЖурнала.Чистовик И Не РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	СформироватьСтрокуОборудования();
	//СменаПрописью = "" + Смена + " с " + ДатаНачалаСмены + " по " + ДатаОкончанияСмены;
	
	Если стрДлина(Строка(Смена.ВремяНачала)) = 19 Тогда
		тВремяНачала = " " + Лев(Прав(Смена.ВремяНачала, 8), 5);
	Иначе
		тВремяНачала = " 0" + СокрЛП(Лев(Прав(Смена.ВремяНачала, 8), 5));
	КонецЕсли;	
	тВремяОкончания = Лев(Прав(Смена.ВремяОкончания, 8), 5);
		
	СменаПрописью = Формат(ДатаНачалаСмены, "ДФ=yyyy/MM/dd") + тВремяНачала + " - " + тВремяОкончания;  		
	
КонецПроцедуры

Функция ПолучитьДатуЭПЗакрытияСмены()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(ОперативныйЖурналПрисоединенныеФайлы.ДатаСоздания) КАК ДатаЭП
		|ИЗ
		|	Справочник.ОперативныйЖурналПрисоединенныеФайлы КАК ОперативныйЖурналПрисоединенныеФайлы
		|ГДЕ
		|	ОперативныйЖурналПрисоединенныеФайлы.ПодписанЭП
		|	И ОперативныйЖурналПрисоединенныеФайлы.ВладелецФайла ССЫЛКА Документ.ОперативныйЖурнал
		|	И ОперативныйЖурналПрисоединенныеФайлы.ВладелецФайла.Событие = ЗНАЧЕНИЕ(Справочник.События.СменуСдал)
		|	И ОперативныйЖурналПрисоединенныеФайлы.ВладелецФайла.Подразделение = &Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ОперативныйЖурналПрисоединенныеФайлы.ВладелецФайла.Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда 
		Возврат Результат.ДатаЭП;
	Иначе
		Возврат Дата(1,1,1);
	КонецЕсли;
	
КонецФункции

Процедура СформироватьСтрокуОборудования()
	
	СтрокаОборудования = "";
	
	Для Каждого ТекСтр Из Оборудование Цикл
		СтрокаОборудования = СтрокаОборудования+?(СтрокаОборудования="","",", ")+СокрЛП(ТекСтр.Оборудование.Наименование);
	КонецЦикла; 
	
	СтрокаОборудованияДиспетчерское = "";
	
	Для Каждого ТекСтр Из Оборудование Цикл
		СтрокаОборудованияДиспетчерское = СтрокаОборудованияДиспетчерское+?(СтрокаОборудованияДиспетчерское="","",", ")+СокрЛП(ТекСтр.Оборудование.ДиспетчерскоеНаименование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЧекЛист() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоказателиЧекЛистовПоПодразделениям.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ ВТ_Документ
		|ИЗ
		|	РегистрСведений.ПоказателиЧекЛистовПоПодразделениям КАК ПоказателиЧекЛистовПоПодразделениям
		|ГДЕ
		|	ПоказателиЧекЛистовПоПодразделениям.Подразделение = &Подразделение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПоказателиЧекЛистовПоПодразделениям.Период УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗакреплениеПоказателейЧекЛистовЗаПодразделениямиЧекЛист.Показатель КАК Показатель,
		|	ЗакреплениеПоказателейЧекЛистовЗаПодразделениямиЧекЛист.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗакреплениеПоказателейЧекЛистовЗаПодразделениямиЧекЛист.Показатель.Значение КАК Значение
		|ИЗ
		|	Документ.ЗакреплениеПоказателейЧекЛистовЗаПодразделениями.ЧекЛист КАК ЗакреплениеПоказателейЧекЛистовЗаПодразделениямиЧекЛист
		|ГДЕ
		|	ЗакреплениеПоказателейЧекЛистовЗаПодразделениямиЧекЛист.Ссылка.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТ_Документ.Регистратор КАК Регистратор
		|			ИЗ
		|				ВТ_Документ КАК ВТ_Документ)";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	ЧекЛист.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ВидЗаписи.ЗаполнятьТЧСотрудников Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("Сотрудники");
		Если Не Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);			
		КонецЕсли;
	КонецЕсли;
	
	//Если Не ВидЗаписи.ЗаполнятьТЧОборудования Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("Оборудование");
		Если Не Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(Индекс);			
		КонецЕсли;
	//КонецЕсли;
	
	Если ВидЗаписи = Справочники.ВидыЗаписей.ПередачаСмены Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("ДокументыДляОзнакомления");
		Если Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("ДокументыДляОзнакомления");
			ПроверяемыеРеквизиты.Добавить("ДокументыДляОзнакомления.Документ");
		КонецЕсли;
	КонецЕсли;
	
	Если Оборудование.Количество() > 0 Тогда
		Индекс = ПроверяемыеРеквизиты.Найти("Оборудование");
		Если Индекс = Неопределено Тогда
			ПроверяемыеРеквизиты.Добавить("Оборудование");
			ПроверяемыеРеквизиты.Добавить("Оборудование.Оборудование");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры





































