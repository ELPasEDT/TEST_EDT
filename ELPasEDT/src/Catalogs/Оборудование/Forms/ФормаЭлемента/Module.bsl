
#Область ОбработчикиСобытицФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Параметры.ЗначенияЗаполнения.Свойство("Родитель") Тогда
		Объект.Организация = Параметры.ЗначенияЗаполнения.Родитель.Организация; 
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СпособОтображенияРеквизитовПаспорта = "ВЕРТИКАЛЬНЫЙ";
	
	ОбновитьТаблицуПаспорта();
	ПрочитатьДанныеПаспорта();
	УстановитьУсловноеОФормлениеТаблицыПаспорта();
	
	ЗаполнитьДеревоСобытий();
	ЗаполнитьДеревоОтветственных();
	ЗапролнитьТаблицуФайлов();
	
	ОбновитьТекущихОтветственных();
	
	УстановитьДоступностьНаСервере();
	
	ЗаполнитьПредставленияРеквизитов();
	
	События.Параметры.УстановитьЗначениеПараметра("Оборудование", Объект.Ссылка);
	
	КонтрольВводаДанных.ПриСозданииФормы(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	КонтрольВводаДанныхКлиент.УстановитьАвтоОтметкуНезаполненного(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНаСервере()
	
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.Справочники.Оборудование);
	
	Элементы.РеквизитыПаспорта.ТолькоПросмотр   = Не ЕстьПравоНаИзменение;
	Элементы.РеквизитыПаспортаВертикальный.ТолькоПросмотр = Не ЕстьПравоНаИзменение;
	Элементы.События.ТолькоПросмотр             = Не ЕстьПравоНаИзменение;
	Элементы.ДеревоСобытий.ТолькоПросмотр       = Не ЕстьПравоНаИзменение;
	Элементы.ДеревоОтветственных.ТолькоПросмотр = Не ЕстьПравоНаИзменение;
	Элементы.ТаблицаФайлов.ТолькоПросмотр       = Не ЕстьПравоНаИзменение;
	Элементы.РеквизитыПаспортаВертикальныйДобавитьКолонкуПериодаВПаспорт.Доступность = ЕстьПравоНаИзменение;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
	    ОбновитьЭлементыДополнительныхРеквизитов();
	    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеПаспорта();
	
	КонтрольВводаДанных.ПослеЗаписиВФорме(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	///////////////////////////////////////////////////////////////////////////////
	// Запись событий
	
	Для Каждого ЭлементыВидыСобытий Из ДеревоСобытий.ПолучитьЭлементы() Цикл
		
		ЭлементыПериодСобытия = ЭлементыВидыСобытий.ПолучитьЭлементы();
		КоличествоЭлементов   = ЭлементыПериодСобытия.Количество();
		
		Для Инд = 1 По КоличествоЭлементов Цикл
			
			ОбрИнд = КоличествоЭлементов - Инд;
			
			ТекЭлемент = ЭлементыПериодСобытия[ОбрИнд];
			
			Если ТекЭлемент.НоваяЗапись Тогда
				
				МЗ = РегистрыСведений.СобытияОборудования.СоздатьМенеджерЗаписи();
				МЗ.Период        = ТекЭлемент.ВидСобытияПериод;
				МЗ.ВидСобытия    = ЭлементыВидыСобытий.ВидСобытияПериод;
				МЗ.Оборудование  = Объект.Ссылка;
				МЗ.Описание      = ТекЭлемент.Описание;
				МЗ.Ответственный = ПользователиКлиентСервер.ТекущийПользователь();
				
				МЗ.Записать();
				
				ТекЭлемент.НоваяЗапись = Ложь;
				
			ИначеЕсли ТекЭлемент.КУдалению Тогда
				
				МЗ = РегистрыСведений.СобытияОборудования.СоздатьМенеджерЗаписи();
				МЗ.Период        = ТекЭлемент.ВидСобытияПериод;
				МЗ.ВидСобытия    = ЭлементыВидыСобытий.ВидСобытияПериод;
				МЗ.Оборудование  = Объект.Ссылка;
				МЗ.Прочитать();
				
				Если МЗ.Выбран() Тогда
					МЗ.Удалить();
				КонецЕсли;
				
				ЭлементыПериодСобытия.Удалить(ОбрИнд);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////
	// Запись ответственных
	
	Для Каждого ЭлементыГруппа Из ДеревоОтветственных.ПолучитьЭлементы() Цикл
		
		ЭлементыОтветственные = ЭлементыГруппа.ПолучитьЭлементы();
		КоличествоЭлементов   = ЭлементыОтветственные.Количество();
		
		Для Инд = 1 По КоличествоЭлементов Цикл
			
			ОбрИнд = КоличествоЭлементов - Инд;
			
			ТекЭлемент = ЭлементыОтветственные[ОбрИнд];
			
			Если ТекЭлемент.НоваяЗапись Тогда
				
				МЗ = РегистрыСведений[ЭлементыГруппа.ГруппаДата].СоздатьМенеджерЗаписи();
				
				МЗ.Период        = ТекЭлемент.ГруппаДата;
				МЗ.Оборудование  = Объект.Ссылка;
				
				МЗ.Ответственный = ТекЭлемент.Ответственный;
				МЗ.НомерПриказа  = ТекЭлемент.НомерПриказа;
				МЗ.ДатаПриказа   = ТекЭлемент.ДатаПриказа;
				
				МЗ.Записать();
				
				ТекЭлемент.НоваяЗапись = Ложь;
				
			ИначеЕсли ТекЭлемент.КУдалению Тогда
				
				МЗ = РегистрыСведений[ЭлементыГруппа.ГруппаДата].СоздатьМенеджерЗаписи();
				
				МЗ.Период        = ТекЭлемент.ГруппаДата;
				МЗ.Оборудование  = Объект.Ссылка;
				МЗ.Прочитать();
				
				Если МЗ.Выбран() Тогда
					МЗ.Удалить();
				КонецЕсли;
				
				ЭлементыОтветственные.Удалить(ОбрИнд);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////
	// Запись файлов
	
	КоличествоЭлементов = ТаблицаФайлов.Количество();
	
	Для Инд = 1 По КоличествоЭлементов Цикл
		
		ОбрИнд    = КоличествоЭлементов - Инд;
		ТекСтрока = ТаблицаФайлов[ОбрИнд];
		
		Если ТекСтрока.НоваяЗапись Тогда
			МЗ = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МЗ.Объект = Объект.Ссылка;
			МЗ.Файл = ТекСтрока.Файл;
			МЗ.Записать();
			ТекСтрока.НоваяЗапись = Ложь;
		ИначеЕсли ТекСтрока.КУдалению Тогда
			МЗ = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МЗ.Объект = Объект.Ссылка;
			МЗ.Файл = ТекСтрока.Файл;
			МЗ.Удалить();
			ТаблицаФайлов.Удалить(ОбрИнд);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
Процедура РеквизитыПаспортаПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	УдалитьКолонкуВертикальнойТаблицы(ТекСтрока.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПаспортаВертикальныйПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Для Каждого КолонкаВертикальной Из КолонкиТаблицыВертикальногоРедактированияПаспорта Цикл
		
		СтрокаГоризонтальной = РеквизитыПаспорта.НайтиСтроки(Новый Структура("Период", КолонкаВертикальной.Значение))[0];
		
		Для Каждого СтрВертикальная Из РеквизитыПаспортаВертикальный Цикл 
			
			ИмяКолонкиГоризонтальнойТаб = ПолучитьИмяКолонкиРеквизитаНаКлиенте(СтрВертикальная.Реквизит);
			
			СтрокаГоризонтальной[ИмяКолонкиГоризонтальнойТаб] = СтрВертикальная[КолонкаВертикальной.Имя];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтображенияРеквизитовПаспортаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТаблицаФайлов.НайтиПоИдентификатору(ВыбраннаяСтрока).Файл,
		Неопределено, УникальныйИдентификатор);
	
	РаботаСФайламиСлужебныйКлиент.ОткрытьФайлСОповещением(Неопределено, ДанныеФайла, УникальныйИдентификатор);;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловФайлПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаФайлов.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.Файл) Тогда
		
		ДанныеЭлементаФайл = ПолучитьОсновныеДанныеЭлементаСправочникаФайлы(ТекСтрока.Файл);
		
		Если ДанныеЭлементаФайл.ПометкаУдаления Тогда
			ТекСтрока.ИндексКартинки = ДанныеЭлементаФайл.ИндексКартинки + 1;
		Иначе
			ТекСтрока.ИндексКартинки = ДанныеЭлементаФайл.ИндексКартинки;
		КонецЕсли;
	Иначе
		ТекСтрока.ИндексКартинки = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПередУдалением(Элемент, Отказ)
		
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Не ТекСтрока.НоваяЗапись Тогда
		Отказ = Истина;
		ТекСтрока.КУдалению = Не ТекСтрока.КУдалению;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФайловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.НоваяЗапись = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтветственныхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.ГруппаДата = ТекущаяДата();
		ДанныеСтроки.НоваяЗапись      = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтветственныхПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока.ГруппировочнаяЗапись Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ТекСтрока.НоваяЗапись Тогда
		Отказ = Истина;
		ТекСтрока.КУдалению = Не ТекСтрока.КУдалению;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтветственныхПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные.ГруппировочнаяЗапись Или Не ТекДанные.НоваяЗапись Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтветственныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Не ТекСтрока.ГруппировочнаяЗапись Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСобытийПередУдалением(Элемент, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	ЭтоВерхнийУровень = (ТекСтрока.ПолучитьРодителя() = Неопределено);
	
	Если ЭтоВерхнийУровень Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ТекСтрока.НоваяЗапись Тогда
		Отказ = Истина;
		ТекСтрока.КУдалению = Не ТекСтрока.КУдалению;
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСобытийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.ВидСобытияПериод = ТекущаяДата();
		ДанныеСтроки.НоваяЗапись      = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСобытийПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено
		Или Не ТекДанные.НоваяЗапись Тогда
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСобытийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если ТекСтрока.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОборудованияПриИзменении(Элемент)
	
	УстановитьУсловноеОФормлениеТаблицыПаспорта(Истина);
	ОбновитьТаблицуПаспорта();
	ПрочитатьДанныеПаспорта();
	УстановитьУсловноеОФормлениеТаблицыПаспорта();
	ЗаполнитьПредставленияРеквизитов();
	УстановитьВидимость();
	ОбновитьЭлементыДополнительныхРеквизитов();
	
	Если ЗначениеЗаполнено(Объект.ВидОборудования) И Не ВидОборудованияУтвержден() Тогда
		ПоказатьПредупреждение(, "Выбранный вид оборудования не утвержден!");
		Объект.ВидОборудования = Неопределено;
	КонецЕсли;
	
	КонтрольВводаДанныхКлиент.УстановитьАвтоОтметкуНезаполненного(ЭтаФорма);
	
КонецПроцедуры

&НаСервере()
Функция ВидОборудованияУтвержден()
	
	Возврат Объект.ВидОборудования.Статус = Перечисления.СтатусыЗаявок.Утверждена;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыПаспортаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Период) Тогда
		ТекСтрока.Период = '19000101';
	КонецЕсли;
	
	РеквизитыПаспорта.Сортировать("Период");
	
	ОбновитьКолонкуВертикальнойТаблицыРеквизитов(ТекСтрока.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПаспортаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элементы.РеквизитыПаспорта.ТекущиеДанные;
	
	ПериодРедактируемойСтроки = ТекСтрока.Период;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекИнд = РеквизитыПаспорта.Индекс(ТекСтрока);
		
		Если ТекИнд > 0 Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, РеквизитыПаспорта[ТекИнд - 1]);
			ТекСтрока.Период = ТекущаяДата();
		КонецЕсли;
		
		ПериодРедактируемойСтроки = '00010101';
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросОЗаполненииПаспорта(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеПаспортаПоМерке();
		Элементы.ГруппаПанельЗакладок.ТекущаяСтраница = Элементы.ГруппаПаспортОборудования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаркаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Марка) И ЕстьДанныеПаспортаПоМаркеОборудованич(Объект.Марка) Тогда
		
		Оповещение = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросОЗаполненииПаспорта", ЭтотОбъект);
		
		ПоказатьВопрос(
			Оповещение, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Для марки оборудования %1 есть введенные в программу данные паспорта. Заполнить паспорт оборудования?", Объект.Марка)
			, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиОповещений

&НаКлиенте
Процедура ПриВводеДатыНовойЗаписиПаспорта(ВведенноеЗначение, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВведенноеЗначение) Тогда
		ДобавитьКолонкуВТабВертикальногоРедактированияПаспорта(ВведенноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ОткрытьФорму("Отчет.ПечатьПаспорта.Форма", Новый Структура("Оборудование, СформироватьПриОткрытии", Объект.Ссылка, Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКолонкуПериодаВПаспорт(Команда)
	
	Значение = ТекущаяДата();
	
	ПоказатьВводЗначения(
		Новый ОписаниеОповещения("ПриВводеДатыНовойЗаписиПаспорта", ЭтотОбъект), 
		Значение, "Введите дату", 
		Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПредставленияРеквизитов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметр = Новый ПараметрКомпоновкиДанных("Текст");
	Поле = Новый ПолеКомпоновкиДанных("Реквизит");
	ПолеДляОформления = Новый ПолеКомпоновкиДанных("РеквизитыПаспортаВертикальныйРеквизит");
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВидыОборудованияРеквизитыПаспорта.Реквизит) КАК Наименование,
	|	ВидыОборудованияРеквизитыПаспорта.Заголовок КАК Заголовок,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОборудованияРеквизитыПаспорта.Реквизит.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ВидыОборудованияРеквизитыПаспорта.Реквизит КАК Реквизит
	|ИЗ
	|	Справочник.ВидыОборудования.РеквизитыПаспорта КАК ВидыОборудованияРеквизитыПаспорта
	|ГДЕ
	|	ВидыОборудованияРеквизитыПаспорта.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидОборудования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Реквизит) = Тип("ПланВидовХарактеристикСсылка.РеквизитыПаспортовОборудования") Тогда
			Для Каждого Стр Из РеквизитыПаспортаВертикальный.НайтиСтроки(Новый Структура("Реквизит", Выборка.Реквизит)) Цикл
				Стр.РеквизитПредставление = СформироватьЗаголовокРеквизита(Выборка.Наименование, Выборка.Заголовок, Выборка.ЕдиницаИзмеренияПредставление);
			КонецЦикла;
		ИначеЕсли ТипЗнч(Выборка.Реквизит) = Тип("СправочникСсылка.ГруппыКолонокПаспорта") Тогда
			Для Каждого СтрТЧ Из Выборка.Реквизит.РеквизитыГруппы Цикл
				Для Каждого Стр Из РеквизитыПаспортаВертикальный.НайтиСтроки(Новый Структура("Реквизит", СтрТЧ.Реквизит)) Цикл
					Стр.РеквизитПредставление = СформироватьЗаголовокРеквизита(СтрТЧ.Реквизит.Наименование, СтрТЧ.Заголовок, СтрТЧ.Реквизит.ЕдиницаИзмерения);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеЭлементаПараметраЭлементаОформления(ЭлементОформления, Параметр, Значение)
	
	Для Каждого Элемент Из ЭлементОформления.Оформление.Элементы Цикл
		
		Если Элемент.Параметр = Параметр Тогда
			Элемент.Значение = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокРеквизита(РеквизитНаименование, Заголовок, ЕдиницаИзмеренияПредставление = "")
	
	ЗаголовокРеквизита = РеквизитНаименование;
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		ЗаголовокРеквизита = Заголовок;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЕдиницаИзмеренияПредставление) Тогда
		ЗаголовокРеквизита = ЗаголовокРеквизита + ", " + ЕдиницаИзмеренияПредставление;
	КонецЕсли;
	
	Возврат ЗаголовокРеквизита;
	
КонецФункции

&НаСервере
Процедура УдалитьКолонкуВертикальнойТаблицы(Период)
	
	ОписаниеКолонки = КолонкиТаблицыВертикальногоРедактированияПаспорта.НайтиСтроки(Новый Структура("Значение", Период))[0];
	Элементы.Удалить(Элементы["РеквизитыПаспортаВертикальный" + ОписаниеКолонки.Имя]);
	Удаляемые = Новый Массив;
	Удаляемые.Добавить("РеквизитыПаспортаВертикальный." + ОписаниеКолонки.Имя);
	ИзменитьРеквизиты(, Удаляемые);
	
КонецПроцедуры


&НаСервере
Процедура ДобавитьКолонкуВТабВертикальногоРедактированияПаспорта(ЗначениеПериода, СтрТабРеквПаспорта = Неопределено)
	
	Добавляемые = Новый Массив;
	
	// Новая строка в таблице горизонтального редактирования
	Если СтрТабРеквПаспорта = Неопределено Тогда
		НовСтрТабРеквПаспорта = РеквизитыПаспорта.Добавить();
		ИндНовое = РеквизитыПаспорта.Индекс(НовСтрТабРеквПаспорта);
		Если ИндНовое > 0 Тогда
			ЗаполнитьЗначенияСвойств(НовСтрТабРеквПаспорта, РеквизитыПаспорта[ИндНовое - 1]);
		КонецЕсли;
		НовСтрТабРеквПаспорта.Период = ЗначениеПериода;
	Иначе
		НовСтрТабРеквПаспорта = СтрТабРеквПаспорта;
	КонецЕсли;
	
	// 
	НовСтр = КолонкиТаблицыВертикальногоРедактированияПаспорта.Добавить();
	НовСтр.Имя           = "Период" + Формат(НовСтрТабРеквПаспорта.ПолучитьИдентификатор(), "ЧГ=");
	НовСтр.Значение      = НовСтрТабРеквПаспорта.Период;
	НовСтр.Представление = Формат(НовСтрТабРеквПаспорта.Период, "ДЛФ=D");
	
	//
	Добавляемые.Добавить(Новый РеквизитФормы(НовСтр.Имя, 
						   Метаданные.ПланыВидовХарактеристик.РеквизитыПаспортовОборудования.Тип, 
						   "РеквизитыПаспортаВертикальный", 
						   НовСтр.Представление));
						   
	ИзменитьРеквизиты(Добавляемые);
	
	//
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.РеквизитыПаспортаВертикальный.ТекущиеДанные.Реквизит");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	НовЭлемент = Элементы.Добавить("РеквизитыПаспортаВертикальный" + НовСтр.Имя, Тип("ПолеФормы"), Элементы.РеквизитыПаспортаВертикальный);
	НовЭлемент.ПутьКДанным = "РеквизитыПаспортаВертикальный." + НовСтр.Имя;
	НовЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовЭлемент.ВыбиратьТип = Ложь;
	НовЭлемент.СвязиПараметровВыбора = НовыеСвязи;
	
	ЗаполнитьКолонкуВертикальнойТаблицыПаспортаПоСтрокеГоризонтальной(НовСтр.Имя, НовСтрТабРеквПаспорта);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКолонкуВертикальнойТаблицыРеквизитов(ИД)
	
	СтрокаТабРеквизитов = РеквизитыПаспорта.НайтиПоИдентификатору(ИД);
	
	Если ЗначениеЗаполнено(ПериодРедактируемойСтроки) Тогда // Это редактирование ранее введенной строки
		
		Найденные = КолонкиТаблицыВертикальногоРедактированияПаспорта.НайтиСтроки(Новый Структура("Значение", ПериодРедактируемойСтроки));
		
		Если ПериодРедактируемойСтроки <> СтрокаТабРеквизитов.Период Тогда
			ПериодРедактируемойСтроки = СтрокаТабРеквизитов.Период;
			Найденные[0].Значение = ПериодРедактируемойСтроки;
			Найденные[0].Представление = Формат(ПериодРедактируемойСтроки, "ДЛФ=D");
			Элементы["РеквизитыПаспортаВертикальный" + Найденные[0].Имя].Заголовок = Найденные[0].Представление;
		КонецЕсли;
		
		ЗаполнитьКолонкуВертикальнойТаблицыПаспортаПоСтрокеГоризонтальной(Найденные[0].Имя, СтрокаТабРеквизитов);
		
	Иначе // Это новая строка
		ПериодРедактируемойСтроки = СтрокаТабРеквизитов.Период;
		ДобавитьКолонкуВТабВертикальногоРедактированияПаспорта(ПериодРедактируемойСтроки, СтрокаТабРеквизитов);
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкуВертикальнойТаблицыПаспортаПоСтрокеГоризонтальной(ИмяКолонкиВертикальнойТаблицы, СтрокаГоризонтальнойТаблицы)
	
	Для Каждого Стр Из РеквизитыПаспортаВертикальный Цикл
		ИмяКолонки = ПолучитьИмяКолонкиРеквизита(Стр.Реквизит);
		Стр[ИмяКолонкиВертикальнойТаблицы] = СтрокаГоризонтальнойТаблицы[ИмяКолонки];		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	ВидимостьРеквизитовОборудования = ЗначениеЗаполнено(Объект.ВидОборудования);
	
	Для Каждого Элем Из Элементы.ГруппаПанельЗакладок.ПодчиненныеЭлементы Цикл
		Если Элем.Имя <> "ГруппаОсновные" И Элем.Имя <> "ГруппаФайлы"
			И Элем.Имя <> "ГруппаДополнительно" Тогда
			Элем.Видимость = ВидимостьРеквизитовОборудования;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДатаВводаВЭксплуатацию.Видимость     = ВидимостьРеквизитовОборудования;
	Элементы.Марка.Видимость                      = ВидимостьРеквизитовОборудования;
	Элементы.ЗаводИзготовитель.Видимость          = ВидимостьРеквизитовОборудования;
	Элементы.Ответственный.Видимость              = ВидимостьРеквизитовОборудования;
	Элементы.ОтветственныйРостехнадзора.Видимость = ВидимостьРеквизитовОборудования;
	
	Элементы.РеквизитыПаспорта.Видимость             = (СпособОтображенияРеквизитовПаспорта = "ГОРИЗОНТАЛЬНЫЙ");
	Элементы.РеквизитыПаспортаВертикальный.Видимость = (СпособОтображенияРеквизитовПаспорта = "ВЕРТИКАЛЬНЫЙ");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновныеДанныеЭлементаСправочникаФайлы(Элемент)
	
	Возврат Новый Структура("Наименование, ПометкаУдаления, ИндексКартинки", Элемент.Наименование, Элемент.ПометкаУдаления, Элемент.ИндексКартинки);
	
КонецФункции

&НаСервере
Процедура ОбновитьТекущихОтветственных()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОборудованиеОтветственныеЛицаСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ОборудованиеОтветственныеЛица.СрезПоследних(, Оборудование = &Оборудование) КАК ОборудованиеОтветственныеЛицаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборудованиеОтветственныеЛицаРостехнадзораСрезПоследних.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ОборудованиеОтветственныеЛицаРостехнадзора.СрезПоследних(, Оборудование = &Оборудование) КАК ОборудованиеОтветственныеЛицаРостехнадзораСрезПоследних");
	Запрос.УстановитьПараметр("Оборудование", Объект.Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Ответственный = Выборка.Ответственный;
	КонецЕсли;
	
	Выборка = Результат[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтветственныйРостехнадзора = Выборка.Ответственный;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обслуживания дерева событий

&НаСервере
Процедура ЗаполнитьДеревоСобытий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьПервыйУровеньДереваСобытий();
	ПолучитьСобытияОборудования();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервыйУровеньДереваСобытий()
	
	ЭлементыДерева = ДеревоСобытий.ПолучитьЭлементы();
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ВидСобытияПериод = ПредопределенноеЗначение("Перечисление.ВидыСобытийОборудования.ЭксплуатационныеМероприятия");
	НовСтр.ГруппировочнаяЗапись = Истина;
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ВидСобытияПериод = ПредопределенноеЗначение("Перечисление.ВидыСобытийОборудования.Освидетельствование");
	НовСтр.ГруппировочнаяЗапись = Истина;
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ВидСобытияПериод = ПредопределенноеЗначение("Перечисление.ВидыСобытийОборудования.РемонтИРеконструкция");
	НовСтр.ГруппировочнаяЗапись = Истина;
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ВидСобытияПериод = ПредопределенноеЗначение("Перечисление.ВидыСобытийОборудования.ПроведениеИспытаний");
	НовСтр.ГруппировочнаяЗапись = Истина;
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ВидСобытияПериод = ПредопределенноеЗначение("Перечисление.ВидыСобытийОборудования.РасседованиеАварий");
	НовСтр.ГруппировочнаяЗапись = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСобытияОборудования()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СобытияОборудования.Период КАК Период,
	|	СобытияОборудования.ВидСобытия КАК ВидСобытия,
	|	СобытияОборудования.Описание КАК Описание,
	|	СобытияОборудования.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.СобытияОборудования КАК СобытияОборудования
	|ГДЕ
	|	СобытияОборудования.Оборудование = &Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	Запрос.УстановитьПараметр("Оборудование", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура("");
	
	Пока Выборка.Следующий() Цикл
		
		ВеткаВидаСобытия = НайтиСтрокуКоллекции(ДеревоСобытий.ПолучитьЭлементы(), "ВидСобытияПериод", Выборка.ВидСобытия);
		
		Если ВеткаВидаСобытия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовЭлемент                  = ВеткаВидаСобытия.ПолучитьЭлементы().Добавить();
		НовЭлемент.ВидСобытияПериод = Выборка.Период;
		НовЭлемент.Описание         = Выборка.Описание;
		НовЭлемент.Ответственный    = Выборка.Ответственный;
		
	КонецЦикла;
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обслуживания дерева событий

&НаСервере
Процедура ЗапролнитьТаблицуФайлов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Файл КАК Файл,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Файл.ПометкаУдаления
	|			ТОГДА ПрисоединенныеФайлы.Файл.ИндексКартинки + 1
	|		ИНАЧЕ ПрисоединенныеФайлы.Файл.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	ТаблицаФайлов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обслуживания дерева событий

&НаСервере
Процедура ЗаполнитьДеревоОтветственных()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьПервыйУровеньДереваОтветственных();
	ПолучитьОтветственных();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПервыйУровеньДереваОтветственных()
	
	ЭлементыДерева = ДеревоОтветственных.ПолучитьЭлементы();
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ГруппаДата = "ОборудованиеОтветственныеЛица";
	НовСтр.ГруппировочнаяЗапись = Истина;
	
	НовСтр = ЭлементыДерева.Добавить();
	НовСтр.ГруппаДата = "ОборудованиеОтветственныеЛицаРостехнадзора";
	НовСтр.ГруппировочнаяЗапись = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтветственных()
	
	ЭлементыКоллекции = ДеревоОтветственных.ПолучитьЭлементы();
	
	ВеткаОтветственные              = НайтиСтрокуКоллекции(ЭлементыКоллекции, "ГруппаДата", "ОборудованиеОтветственныеЛица");
	ВеткаОтветственныеРостехнадзора = НайтиСтрокуКоллекции(ЭлементыКоллекции, "ГруппаДата", "ОборудованиеОтветственныеЛицаРостехнадзора");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОборудованиеОтветственныеЛица.Период КАК Период,
	|	ОборудованиеОтветственныеЛица.Ответственный КАК Ответственный,
	|	ОборудованиеОтветственныеЛица.НомерПриказа КАК НомерПриказа,
	|	ОборудованиеОтветственныеЛица.ДатаПриказа КАК ДатаПриказа
	|ИЗ
	|	РегистрСведений.ОборудованиеОтветственныеЛица КАК ОборудованиеОтветственныеЛица
	|ГДЕ
	|	ОборудованиеОтветственныеЛица.Оборудование = &Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	Запрос.УстановитьПараметр("Оборудование", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ВеткаОтветственные.ПолучитьЭлементы().Добавить();
		НовСтр.ГруппаДата           = Выборка.Период;
		НовСтр.Ответственный        = Выборка.Ответственный;
		//НовСтр.ГруппировочнаяЗапись = Истина;
		НовСтр.ДатаПриказа          = Выборка.ДатаПриказа;
		НовСтр.НомерПриказа         = Выборка.НомерПриказа;
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОборудованиеОтветственныеЛицаРостехнадзора.Период КАК Период,
	|	ОборудованиеОтветственныеЛицаРостехнадзора.Ответственный КАК Ответственный,
	|	ОборудованиеОтветственныеЛицаРостехнадзора.НомерПриказа КАК НомерПриказа,
	|	ОборудованиеОтветственныеЛицаРостехнадзора.ДатаПриказа КАК ДатаПриказа
	|ИЗ
	|	РегистрСведений.ОборудованиеОтветственныеЛицаРостехнадзора КАК ОборудованиеОтветственныеЛицаРостехнадзора
	|ГДЕ
	|	ОборудованиеОтветственныеЛицаРостехнадзора.Оборудование = &Оборудование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = ВеткаОтветственныеРостехнадзора.ПолучитьЭлементы().Добавить();
		НовСтр.ГруппаДата           = Выборка.Период;
		НовСтр.Ответственный        = Выборка.Ответственный;
		//НовСтр.ГруппировочнаяЗапись = Истина;
		НовСтр.ДатаПриказа          = Выборка.ДатаПриказа;
		НовСтр.НомерПриказа         = Выборка.НомерПриказа;
	КонецЦикла;
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция НайтиСтрокуКоллекции(Коллеция, НаименованиеРеквизита, Значение)
	
	Для Каждого Элемент Из Коллеция Цикл
		Если Элемент[НаименованиеРеквизита] = Значение Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обслуживания таблицы паспорта

&НаСервере
Процедура ОбновитьТаблицуПаспорта()
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПаспорта.Очистить();
	РеквизитыПаспортаВертикальный.Очистить();
	РеквизитыНетДанных.Очистить();
	
	Удаляемые    = Новый Массив;
	Добавляемые  = Новый Массив;
	ИндексИмени  = 0;
	
	// Добавим элементы к удалению и удалим элементы формы
	ОчиститьДеревоКолонокПаспорта(Удаляемые);
	
	// Найти новые
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыОборудованияРеквизитыПаспорта.Реквизит КАК Реквизит,
	|	ВидыОборудованияРеквизитыПаспорта.Реквизит.Периодический КАК РеквизитПериодический,
	|	ВидыОборудованияРеквизитыПаспорта.Реквизит.ТипЗначения КАК РеквизитТипЗначения,
	|	ВидыОборудованияРеквизитыПаспорта.Реквизит.Наименование КАК РеквизитНаименование,
	|	ВидыОборудованияРеквизитыПаспорта.Заголовок КАК Заголовок,
	|	ВидыОборудованияРеквизитыПаспорта.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ВидыОборудованияРеквизитыПаспорта.Реквизит.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|ИЗ
	|	Справочник.ВидыОборудования.РеквизитыПаспорта КАК ВидыОборудованияРеквизитыПаспорта
	|ГДЕ
	|	ВидыОборудованияРеквизитыПаспорта.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыОборудованияРеквизитыПаспорта.НомерСтроки");
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидОборудования);
	
	// Добавить описание новых
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Реквизит) = Тип("ПланВидовХарактеристикСсылка.РеквизитыПаспортовОборудования") Тогда
			
			// Для таблицы горизонтального редактирования
			СоздатьОписаниеРеквизита(ИндексИмени,
									 СформироватьЗаголовокРеквизита(Выборка.РеквизитНаименование, Выборка.Заголовок, Выборка.ЕдиницаИзмеренияПредставление),
									 Выборка.РеквизитТипЗначения, 
									 Добавляемые, 
									 ДеревоКолонокПаспорта,
									 Выборка.Реквизит);
			
			ИндексИмени = ИндексИмени + 1;
			
			// Для вертикального редактирования
			НовСтр = РеквизитыПаспортаВертикальный.Добавить();
			НовСтр.Реквизит = Выборка.Реквизит;
			
		ИначеЕсли ТипЗнч(Выборка.Реквизит) = Тип("СправочникСсылка.ГруппыКолонокПаспорта") Тогда
			
	        // Для таблицы горизонтального редактирования
			НовЭлементГруппа = ДеревоКолонокПаспорта.ПолучитьЭлементы().Добавить();
			НовЭлементГруппа.ИмяЭлементаФормы = "ГруппаРеквизитов" + Формат(ИндексИмени, "ЧЦ=3; ЧН=000; ЧВН=");
			НовЭлементГруппа.Заголовок        = ?(Не ПустаяСтрока(Выборка.Заголовок), Выборка.Заголовок, Выборка.РеквизитНаименование);
			НовЭлементГруппа.Тип              = "Группа";
			НовЭлементГруппа.ПутьКДанным      = "";
			НовЭлементГруппа.ВидГруппы        = Выборка.Реквизит.ВидГруппы;
			
			ИндексИмени = ИндексИмени + 1;
			
			Для Каждого Стр Из Выборка.Реквизит.РеквизитыГруппы Цикл
				
				// Для таблицы горизонтального редактирования
				СоздатьОписаниеРеквизита(ИндексИмени,
									 СформироватьЗаголовокРеквизита(Стр.Реквизит.Наименование, Стр.Заголовок, Стр.Реквизит.ЕдиницаИзмерения),
									 Стр.Реквизит.ТипЗначения, 
									 Добавляемые, 
									 НовЭлементГруппа,
									 Стр.Реквизит);
				
				ИндексИмени = ИндексИмени + 1;
				
				// Для вертикального редактирования
				НовСтр = РеквизитыПаспортаВертикальный.Добавить();
				НовСтр.Реквизит = Стр.Реквизит;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Создадим новые реквизиты
	ИзменитьРеквизиты(Добавляемые, Удаляемые);
	
	// Создадим элементы формы
	СоздатьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеПаспорта()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.ВидОборудования) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗначенияРеквизитовПаспортов.Период КАК Период,
		|	ЗначенияРеквизитовПаспортов.Реквизит КАК Реквизит,
		|	ЗначенияРеквизитовПаспортов.Значение КАК Значение,
		|	ЗначенияРеквизитовПаспортов.Реквизит.Периодический КАК Периодический,
		|	ЗначенияРеквизитовПаспортов.НетДанных КАК НетДанных
		|ИЗ
		|	РегистрСведений.ЗначенияРеквизитовПаспортов КАК ЗначенияРеквизитовПаспортов
		|ГДЕ
		|	ЗначенияРеквизитовПаспортов.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период");
		Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отбор = Новый Структура("Период");
		
		Пока Выборка.Следующий() Цикл
			
			ИмяКолонки = ПолучитьИмяКолонкиРеквизита(Выборка.Реквизит);
			
			Если ПустаяСтрока(ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Период = Выборка.Период;
			Найденные    = РеквизитыПаспорта.НайтиСтроки(Отбор);
			
			Если Найденные.Количество() > 0 Тогда
				СтрокаДанных = Найденные[0];
			Иначе
				СтрокаДанных = РеквизитыПаспорта.Добавить();
				СтрокаДанных.Период = Выборка.Период;
			КонецЕсли;
			
			СтрокаДанных[ИмяКолонки] = Выборка.Значение;
			
			Если Выборка.НетДанных Тогда
				ЗаполнитьЗначенияСвойств(РеквизитыНетДанных.Добавить(), Выборка);
			КонецЕсли;
			
		КонецЦикла;
	
	РеквизитыПаспорта.Сортировать("Период");
	
	КонецЕсли;
	
	ОбновитьДанныеТабВертикальногоРедактирования();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОФормлениеТаблицыПаспорта(Удалить = Ложь)

	Для Каждого СтрТаб Из РеквизитыНетДанных Цикл
		ИмяПоля = ПолучитьИмяКолонкиПоЗначениюПериода(СтрТаб.Период);
		ДобавитьУдалитьУсловноеОформлениеЯчейкиНедДанных(СтрТаб.Реквизит, ИмяПоля, Удалить)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТабВертикальногоРедактирования()
	
	Удаляемые = Новый Массив;
	Для Каждого Стр Из КолонкиТаблицыВертикальногоРедактированияПаспорта Цикл
		Удаляемые.Добавить("РеквизитыПаспортаВертикальный." + Стр.Имя);
		Элементы.Удалить(Элементы["РеквизитыПаспортаВертикальный" + Стр.Имя]);
	КонецЦикла;
	КолонкиТаблицыВертикальногоРедактированияПаспорта.Очистить();
	
	Добавляемые = Новый Массив;	
	Для Каждого Стр Из РеквизитыПаспорта Цикл
		НовСтр = КолонкиТаблицыВертикальногоРедактированияПаспорта.Добавить();
		НовСтр.Имя           = "Период" + Формат(Стр.ПолучитьИдентификатор(), "ЧГ=");
		НовСтр.Значение      = Стр.Период;
		НовСтр.Представление = Формат(Стр.Период, "ДЛФ=D");
		
		Добавляемые.Добавить(Новый РеквизитФормы(НовСтр.Имя, 
							   Метаданные.ПланыВидовХарактеристик.РеквизитыПаспортовОборудования.Тип, 
							   "РеквизитыПаспортаВертикальный", 
							   НовСтр.Представление));
	КонецЦикла;
	
	ИзменитьРеквизиты(Добавляемые, Удаляемые);
	
	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.РеквизитыПаспортаВертикальный.ТекущиеДанные.Реквизит");
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НоваяСвязь);
	НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
	
	Для Каждого Стр Из КолонкиТаблицыВертикальногоРедактированияПаспорта Цикл
		НовЭлемент = Элементы.Добавить("РеквизитыПаспортаВертикальный" + Стр.Имя, Тип("ПолеФормы"), Элементы.РеквизитыПаспортаВертикальный);
		НовЭлемент.ПутьКДанным = "РеквизитыПаспортаВертикальный." + Стр.Имя;
		НовЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовЭлемент.ВыбиратьТип = Ложь;
		НовЭлемент.СвязиПараметровВыбора = НовыеСвязи;
	КонецЦикла;
	
	Для ИндСтроки = 0 По РеквизитыПаспорта.Количество() - 1 Цикл
		ЗаполнитьВертикальнуюТаблицу(КолонкиТаблицыВертикальногоРедактированияПаспорта[ИндСтроки].Имя, ИндСтроки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВертикальнуюТаблицу(ИмяКолонки, ИндСтроки, ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Если Элемент.Тип = "Колонка" Тогда
			
			РеквизитыПаспортаВертикальный.НайтиСтроки(Новый Структура("Реквизит", Элемент.Свойство))[0][ИмяКолонки] = 
				РеквизитыПаспорта[ИндСтроки][Элемент.Имя];
			
		ИначеЕсли Элемент.Тип = "Группа" Тогда
			ЗаполнитьВертикальнуюТаблицу(ИмяКолонки, ИндСтроки, Элемент.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПаспорта()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияРеквизитовПаспортов.Период КАК Период,
	|	ЗначенияРеквизитовПаспортов.Объект КАК Объект,
	|	ЗначенияРеквизитовПаспортов.Реквизит КАК Реквизит
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовПаспортов КАК ЗначенияРеквизитовПаспортов
	|ГДЕ
	|	ЗначенияРеквизитовПаспортов.Объект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	Запрос.УстановитьПараметр("Объект", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МЗ = РегистрыСведений.ЗначенияРеквизитовПаспортов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Удалить();
	КонецЦикла;
	
	ДобавитьЗаписиПаспортаВРегистр();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписиПаспортаВРегистр(ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	Отбор = Новый Структура("Период, Реквизит");
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Если Элемент.Тип = "Колонка" Тогда
			
			Для Каждого СтрТабПаспорта Из РеквизитыПаспорта Цикл
				
				МЗ = РегистрыСведений.ЗначенияРеквизитовПаспортов.СоздатьМенеджерЗаписи();
				МЗ.Период   = СтрТабПаспорта.Период;
				МЗ.Объект   = Объект.Ссылка;
				МЗ.Реквизит = Элемент.Свойство;
				МЗ.Значение = СтрТабПаспорта[Элемент.Имя];
				
				Отбор.Период   = СтрТабПаспорта.Период;
				Отбор.Реквизит = Элемент.Свойство;
				
				Если РеквизитыНетДанных.НайтиСтроки(Отбор).Количество() > 0 Тогда
					МЗ.Значение  = Неопределено;
					МЗ.НетДанных = Истина;
				КонецЕсли;
				
				МЗ.Записать();
				
			КонецЦикла;
			
		ИначеЕсли Элемент.Тип = "Группа" Тогда
			ДобавитьЗаписиПаспортаВРегистр(Элемент.ПолучитьЭлементы());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКолонкиРеквизита(Реквизит, ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	ИмяКолонки = "";
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		ИмяКолонки = ПолучитьИмяКолонкиРеквизита(Реквизит, Элемент.ПолучитьЭлементы());
		
		Если Не ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		Если Элемент.Свойство = Реквизит Тогда
			ИмяКолонки = Элемент.Имя;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяКолонки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяКолонкиРеквизитаНаКлиенте(Реквизит, ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	ИмяКолонки = "";
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		ИмяКолонки = ПолучитьИмяКолонкиРеквизитаНаКлиенте(Реквизит, Элемент.ПолучитьЭлементы());
		
		Если Не ПустаяСтрока(ИмяКолонки) Тогда
			Прервать;
		КонецЕсли;
		
		Если Элемент.Свойство = Реквизит Тогда
			ИмяКолонки = Элемент.Имя;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИмяКолонки;
	
КонецФункции

&НаСервере
Процедура ОчиститьДеревоКолонокПаспорта(Удаляемые, ЭлементыДерева = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	КоличествоЭлементов = ЭлементыДерева.Количество();
	
	Для Инд = 1 По КоличествоЭлементов Цикл
		
		ОбрИнд = КоличествоЭлементов - Инд;
		
		Если Не ПустаяСтрока(ЭлементыДерева[ОбрИнд].ПутьКДанным) Тогда
			Удаляемые.Добавить(ЭлементыДерева[ОбрИнд].ПутьКДанным);
		КонецЕсли;
		
		ОчиститьДеревоКолонокПаспорта(Удаляемые, ЭлементыДерева[ОбрИнд].ПолучитьЭлементы());
		
		Элементы.Удалить(Элементы[ЭлементыДерева[ОбрИнд].ИмяЭлементаФормы]);
		
		ЭлементыДерева.Удалить(ОбрИнд);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОписаниеРеквизита(ИндексИмени, Наименование, ТипЗначения, Добавляемые, Родитель, Свойство)
	
	ПрефиксИмени        = "РеквизитПаспорта_";
	ИмяТаблицыФормы     = "РеквизитыПаспорта";
	ИмяРеквизитаТаблица = "РеквизитыПаспорта";
	
	ИмяНовогоРеквизита = ПрефиксИмени + Формат(ИндексИмени, "ЧЦ=3; ЧН=000; ЧВН=");
	Добавляемые.Добавить(Новый РеквизитФормы(ИмяНовогоРеквизита, 
							   ТипЗначения, 
							   ИмяРеквизитаТаблица, 
							   Наименование));
	
	НовЭлемент = Родитель.ПолучитьЭлементы().Добавить();
	НовЭлемент.ИмяЭлементаФормы = ИмяТаблицыФормы + ИмяНовогоРеквизита;
	НовЭлемент.Заголовок        = Наименование;
	НовЭлемент.Тип              = "Колонка";
	НовЭлемент.ПутьКДанным      = ИмяРеквизитаТаблица + "." + ИмяНовогоРеквизита;
	НовЭлемент.Свойство         = Свойство;
	НовЭлемент.Имя              = ИмяНовогоРеквизита;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПутьКЭлементуДерева(НаименованиеРеквизита, ЭлементДерева, Знач Путь = "")
	
	Если ПустаяСтрока(Путь) Тогда
		Путь = НаименованиеРеквизита;
	КонецЕсли;
	
	ЭлементыДерева = Неопределено;
	
	Выполнить("ЭлементыДерева = " + Путь + ".ПолучитьЭлементы()");
	
	Для Каждого Элемент Из ЭлементыДерева Цикл
		
		Инд = Формат(ЭлементыДерева.Индекс(Элемент), "ЧН=; ЧГ=");
		
		Если Элемент.Тип = "Колонка" Тогда
			Если ЭлементДерева = Элемент Тогда
				Путь = Путь + ".ПолучитьЭлементы()[" + Инд + "]";
				Прервать;
			КонецЕсли;
		ИначеЕсли Элемент.Тип = "Группа" Тогда
			
			ТекПуть = ПолучитьПутьКЭлементуДерева(НаименованиеРеквизита, ЭлементДерева, Путь);
			
			Если ТекПуть <> Путь Тогда
				Путь = ТекПуть;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Путь;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыФормы(ЭлементыДерева = Неопределено, Родитель = Неопределено)
	
	Если ЭлементыДерева = Неопределено Тогда
		ЭлементыДерева = ДеревоКолонокПаспорта.ПолучитьЭлементы();
	КонецЕсли;
	
	Если Родитель = Неопределено Тогда
		Родитель = Элементы.РеквизитыПаспорта;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		Если ЭлементДерева.Тип = "Колонка" Тогда
			
			//НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", ПолучитьПутьКЭлементуДерева("ДеревоКолонокПаспорта", ЭлементДерева) + ".Свойство");
			//НовыйМассив = Новый Массив();
			//НовыйМассив.Добавить(НоваяСвязь);
			//НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
			
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ЭлементДерева.Свойство);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			
			НовЭлемент = Элементы.Добавить(ЭлементДерева.ИмяЭлементаФормы, Тип("ПолеФормы"), Родитель);
			НовЭлемент.ПутьКДанным = ЭлементДерева.ПутьКДанным;
			НовЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовЭлемент.Заголовок = ЭлементДерева.Заголовок;
			НовЭлемент.Ширина    = 3;
			НовЭлемент.ПараметрыВыбора = НовыеПараметры;
			НовЭлемент.РедактированиеТекста = Ложь;
			НовЭлемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
			НовЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
			НовЭлемент.КнопкаВыбора = Истина;
			НовЭлемент.КнопкаВыпадающегоСписка = Ложь;
			//НовЭлемент.СвязиПараметровВыбора = НовыеСвязи;
			
		ИначеЕсли ЭлементДерева.Тип = "Группа" Тогда
			
			НовЭлемент = Элементы.Добавить(ЭлементДерева.ИмяЭлементаФормы, Тип("ГруппаФормы"), Родитель);
			НовЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
			НовЭлемент.Группировка = ?(ЭлементДерева.ВидГруппы = 1, ГруппировкаКолонок.Вертикальная,ГруппировкаКолонок.Горизонтальная);
			НовЭлемент.Заголовок = ЭлементДерева.Заголовок;
			НовЭлемент.ОтображатьВШапке = Истина;
			СоздатьЭлементыФормы(ЭлементДерева.ПолучитьЭлементы(), НовЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НетДанных(Команда)
	
	НетДанныхНаСервере(Элементы.РеквизитыПаспортаВертикальный.ТекущаяСтрока, Элементы.РеквизитыПаспортаВертикальный.ТекущийЭлемент.Имя);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НетДанныхНаСервере(ИДСтроки, ЭлементИмя)
	
	ЭлементыПути = РазобратьСтроку(Элементы[ЭлементИмя].ПутьКДанным, ".");
	
	Если ЭлементыПути.Количество() = 2 Тогда
		
		ИмяПоля = ЭлементыПути[1];
		
		Если Не СтрНайти(ИмяПоля, "Период") Тогда
			Возврат;
		КонецЕсли;
		
		ЗначПериода = ПолучитьЗначениеПериодаПоИмениКолонки(ИмяПоля);
		
		ТекСтрока = РеквизитыПаспортаВертикальный.НайтиПоИдентификатору(ИДСтроки);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Период", ЗначПериода);
		Отбор.Вставить("Реквизит", ТекСтрока.Реквизит);
		Найденные = РеквизитыНетДанных.НайтиСтроки(Отбор);
		
		Если Найденные.Количество() > 0 Тогда
			РеквизитыНетДанных.Удалить(Найденные[0]);
			ДобавитьУдалитьУсловноеОформлениеЯчейкиНедДанных(ТекСтрока.Реквизит, ИмяПоля, Истина);
		Иначе
			НовСтр = РеквизитыНетДанных.Добавить();
			НовСтр.Период   = ЗначПериода;
			НовСтр.Реквизит = ТекСтрока.Реквизит;
			
			ДобавитьУдалитьУсловноеОформлениеЯчейкиНедДанных(ТекСтрока.Реквизит, ИмяПоля);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУдалитьУсловноеОформлениеЯчейкиНедДанных(Реквизит, ИмяПоля, Удалить = Ложь)
	
	ОформляемоеПоле = Новый ПолеКомпоновкиДанных("РеквизитыПаспортаВертикальный" + ИмяПоля);
	
	Если Удалить Тогда
		
		Для Каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
			
			Для Каждого ОформПоле Из ЭлементУО.Поля.Элементы Цикл
				
				Если ОформПоле.Поле = ОформляемоеПоле Тогда
					
					Для Каждого ЭлементОтбора Из ЭлементУО.Отбор.Элементы Цикл
						
						Если ЭлементОтбора.ПравоеЗначение = Реквизит Тогда
							УсловноеОформление.Элементы.Удалить(ЭлементУО);
							Возврат;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		ЭлементУО.Использование = Истина;
		
		ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыПаспортаВертикальный.Реквизит");
		ЭлементОтбора.ПравоеЗначение = Реквизит;
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование = Истина;
		
		ОформПоле = ЭлементУО.Поля.Элементы.Добавить();
		ОформПоле.Использование = Истина;
		ОформПоле.Поле = ОформляемоеПоле;
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", "<<< Н/Д >>>");
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазобратьСтроку(Строка, Разделитель)
	
	ДлинаСтроки = СтрДлина(Строка);
	Значения    = Новый Массив;
	ТекЗначение = "";
	
	Для Инд = 1 По ДлинаСтроки Цикл
		
		ТекСимвол = Сред(Строка, Инд, 1);
		
		Если ТекСимвол = Разделитель Тогда
			Значения.Добавить(ТекЗначение);
			ТекЗначение = "";
		Иначе
			ТекЗначение = ТекЗначение + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Значения.Добавить(ТекЗначение); // добавим крайний элемент
	
	Возврат Значения;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеПериодаПоИмениКолонки(ИмяКолонки)
	
	Для Каждого Стр Из КолонкиТаблицыВертикальногоРедактированияПаспорта Цикл
		Если Стр.Имя = ИмяКолонки Тогда
			Возврат Стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПолучитьИмяКолонкиПоЗначениюПериода(ЗначениеПериода)
	
	Для Каждого Стр Из КолонкиТаблицыВертикальногоРедактированияПаспорта Цикл
		Если Стр.Значение = ЗначениеПериода Тогда
			Возврат Стр.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//
////////////////////////////////////////////////////////////////////////////////

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ЕстьДанныеПаспортаПоМаркеОборудованич(МаркаОборудования)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовПаспортов КАК ЗначенияРеквизитовПаспортов
	|ГДЕ
	|	ЗначенияРеквизитовПаспортов.Объект.Марка = &Марка");
	Запрос.УстановитьПараметр("Марка", МаркаОборудования);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПаспортаПоМерке()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияРеквизитовПаспортовСрезПервых.Объект КАК Объект,
	|	ЗначенияРеквизитовПаспортовСрезПервых.Реквизит КАК Реквизит,
	|	ЗначенияРеквизитовПаспортовСрезПервых.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовПаспортов.СрезПервых(
	|			,
	|			Объект.ВидОборудования = &ВидОборудования
	|				И Объект.Марка = &Марка) КАК ЗначенияРеквизитовПаспортовСрезПервых
	|ИТОГИ ПО
	|	Объект");
	Запрос.УстановитьПараметр("ВидОборудования", Объект.ВидОборудования);
	Запрос.УстановитьПараметр("Марка", Объект.Марка);
	
	РеквизитыПаспорта.Очистить();
	
	ВыборкаОбъекты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъекты.Следующий() Цикл
		
		Выборка = ВыборкаОбъекты.Выбрать();
		НовСтр = РеквизитыПаспорта.Добавить();
		НовСтр.Период = ?(ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию), Объект.ДатаВводаВЭксплуатацию, ТекущаяДатаСеанса());
		Пока Выборка.Следующий() Цикл
			
			ИмяКолонки = ПолучитьИмяКолонкиПаспорта(Выборка.Реквизит);
			Если Не ПустаяСтрока(ИмяКолонки) Тогда
				НовСтр[ИмяКолонки] = Выборка.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Прервать;
		
	КонецЦикла;
	
	ОбновитьДанныеТабВертикальногоРедактирования();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяКолонкиПаспорта(Реквизит)
	
	Дерево = РеквизитФормыВЗначение("ДеревоКолонокПаспорта");
	
	Найденные = Дерево.Строки.НайтиСтроки(Новый Структура("Свойство", Реквизит), Истина);
	
	Если Найденные.Количество() > 0 Тогда
		Возврат Найденные[0].Имя;
	КонецЕсли;
	
КонецФункции

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
